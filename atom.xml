<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[HaHack]]></title>
  <subtitle><![CDATA[哈嘿！]]></subtitle>
  <link href="http://hahack.com/atom.xml" rel="self"/>
  <link href="http://hahack.com"/>
  <updated>2017-07-18T12:51:19.459Z</updated>
  <id>http://hahack.com/</id>
  <author>
    <name><![CDATA[Joseph Pan]]></name>
    <email><![CDATA[cs.wzpan@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[我在平安的两年]]></title>
    <link href="http://hahack.com/work/my-2-years-at-pingan/"/>
    <id>http://hahack.com/work/my-2-years-at-pingan/</id>
    <published>2017-07-17T07:00:20.000Z</published>
    <updated>2017-07-18T12:42:05.514Z</updated>
    <content type="html"><![CDATA[<p>记得我是 2015 年 5 月 20 日离开的百度，次日就来到了平安。当时平安的这个团队叫做移动开发二队。在百度的最后一天，我在朋友圈发了张合照，写了句“再见，我爱你”。很多人不理解我为什么在百度干了一年就走了，而且去的是平安这个并不以技术见长的公司。其实原因很简单：跟对的团队做对的事情。</p>
<p>“对的事情”指的是平安这边正面临技术转型期，会有大量的技术需求可以放手去做。而过去平安那边的首要任务是开发完善底层的技术框架，有机会接触比较核心的技术，这对我的技术成长很有好处。</p>
<p>“对的团队”指的是因为我对平安这个团队的了解。平安那边的老大锋哥也是原先我们百度 LBS 团队的研发 leader，而 leader 定一也是之前在百度的时候合作非常愉快的一个同事。再加上鑫哥 <a href="http://www.jianshu.com/u/4ef984470da8" target="_blank" rel="external">@ASCE1985</a> 每周一更的技术周报，让我觉得这个团队是非常尊重技术的团队，而我过去应该能有更多发挥的机会。</p>
<p>于是，在锋哥的几次劝说下，我来到了平安。时间过得很快，一转眼的功夫，我也已经在平安待了两年的时间。从团队初建，到发展壮大，我和这个团队携手共同成长。对平安，对金融壹账通，对这个团队，我有说不尽的感激。如今我即将告别平安，走向一段新的旅程。在启程之前，我想对这两年走过的路做一个回顾。</p>
<p>我这两年的工作基本是两条线的思路：主线任务保证做得漂亮，然后做主动从日常工作中找问题和需求，做点支线任务。</p>
<a id="more"></a>
<h2 id="2015年秋">2015年秋</h2>
<h3 id="主线：离线缓存">主线：离线缓存</h3>
<p>我刚去平安的时候就被安排去做应用端的离线缓存。那时候我们的手机应用里有大量的 H5 页面，在线加载非常耗时。而我在这之前其实并没有移动开发的经验，这么重要的一个框架功能全权交给我去设计和实现，心里还是没底的。所幸平安的入职流程很长，十天半个月都拿不到账号上不到网，所以 leader 也没指望我很快能完成这个项目。于是我刚去的头两个月自己一个人保持了 997 的全勤，拼命恶补移动端的开发知识。当时腾讯的 AlloyKit 提出了一种比较理想的 H5 离线缓存的方案，页面静态资源通过打包 APK 的方式解决了首次加载问题，另外还允许更新这些缓存资源。我就在这个想法的基础上结合团队的实际需要进行设计和完善。在这段期间，我和定一以及后台的同事马文经常会在细节上展开讨论，从基本的流程、包管理、插件ID分配、自动打包、资源加密等方面都进行了认真的思考和设计。大概两个月后，我们的离线缓存就正式上线了，插件的加载速度和以前相比有了质的提升，得到了团队的认可。我拿着这个第一次参加了公司的 3A 论坛技术峰会，认识了公司里头来自不同团队的大佬。</p>
<p><img src="/images/my-2-years-at-pingan/hfcache.png" alt="离线缓存"></p>
<h3 id="支线">支线</h3>
<p>在百度的期间我最大的收获在于对潜在的需求有着非常灵敏的嗅觉。当时的平安才刚面临技术转型，一些内部系统难免有不尽完善的地方，这对于来自 BAT 这类有着完善的内部系统的公司的同事而言很难适应。和大多数花时间吐槽环境的同事不同，我觉得这是一个好机会，这代表内部就有很多需求。所以，利用空余时间，我也做了一些“支线任务”，提高团队的效率。</p>
<h4 id="日报助手">日报助手</h4>
<p>第一个让我们觉得麻烦的是每天的日报，科技要求我们每天写一篇日报，汇报当天的工作，并以此来作为确认考勤的依据。但实际的情况是，我们平常已经通过站会来确认沟通每天的工作了，日报便沦为了一种形式：填了没人看，但不填又影响考勤。所以我写了一个工具，在月底的时候跑一遍，就能一次性帮我们到日报平台上填写完整个月的日报，这样就节省了很多同事的时间。这个工具在内部一直工作良好，直到我们从科技独立出去，无需填写日报了才停止使用。</p>
<h4 id="wiki">Wiki</h4>
<p>团队里头也没有像样的 Wiki 平台，所以我用 Gollum 搭了个 Wiki ，为了方便在文档中插图，我又搭了一个相册平台，可以在上面上传照片并插到 Wiki 中。这两个平台一直使用到我们把代码由 SVN 切换到 Gitlab 时改用 Gitlab 的 Wiki 才结束服务。</p>
<p><img src="/images/my-2-years-at-pingan/wiki.png" alt="wiki"></p>
<h4 id="任意门日志分析平台">任意门日志分析平台</h4>
<p>当时我们有一个叫做“任意门”的项目，它的线上问题一直是使用 Excel 这种原始方式来跟进处理的，缺乏一个统一的问题跟进平台。而因为任意门是一个 SDK ，问题可能来自各种宿主应用，这些 Excel 报表的格式也有所不同，很影响问题的处理和定位。于是我又用了一个星期为任意门团队写了一个线上问题处理系统，可以导入 Excel 存到数据库中，然后提供一个报表页面，用于展示问题的描述、堆栈信息、出现次数、处理情况、宿主ID等数据。这个平台给开发维护任意门的同事带来了很大的便利。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/prices.jpg" alt=" 这两年拿过的各种奖杯奖牌"><b>图 1</b>  这两年拿过的各种奖杯奖牌</span></span></span></p>
<p><img src="/images/my-2-years-at-pingan/log-analysis.png" alt="日志分析平台"></p>
<p>本份工作顺利完成，再加上一些工具和平台加成，我在刚去的第一个季度就拿了团队的杰出贡献奖，奖品是一部 iPhone 6S 。</p>
<h2 id="2015年冬">2015年冬</h2>
<h3 id="主线：rn热更新">主线：RN热更新</h3>
<p>之后我们团队进行了业务的调整，大部分人（包括我）转去做银行一账通的项目，代号 F 项目。这个项目的目标就是低成本地生成中小银行的直销银行 APP ，可想而知这对核心框架的稳定性、可定制性和交付能力带来非常大的挑战。为了节省人力成本以及提高业务交付能力，我们经过评估后，决定采用 React Native 的开发模式，核心功能都尽量封装成 RN 层可调用的模块，再通过 RN 热更新来提升业务交付能力。RN 热更新的设计和实现就成了我在平安的第二个季度的主线任务。</p>
<p>当时 Android 版本的 RN 才刚刚发布，RN 热更新还处于尝试阶段，一开始的思路是使用反射修改 <code>PathClassLoader</code> 来修改 bundle 包的路径。v0.15.0 开始 <code>ReactInstantManager</code> 新增了 <code>setJSBundleFile</code> 方法，可以在程序运行时执行 Bundle 包的位置，这就给实现热更新提供了更大的便利。RN 热更新本身技术倒没有什么特别的难度，后面出现的 Microsoft code-push 也给我们提供了有价值的参考。不过，技术实现往往不是最困难的地方，最困难的地方是落地。我们花费了较多时间在热更新平台的增量更新、图片热更新、图片精度选择性下发、包版本管理、跨版本升级支持等问题上。一直做到年前，这个项目正式上线，为应用的运营能力提供了强有力的支持。凭借着 RN 热更新我也拿了一个公司的创新奖。</p>
<p><img src="/images/my-2-years-at-pingan/rnupdate.jpg" alt="RN热更新"></p>
<h3 id="支线-v2">支线</h3>
<p>在第二个季度我也照旧从日常工作中找了一些问题，做了一些支线任务。</p>
<h4 id="百宝箱">百宝箱</h4>
<p>第一个问题就是团队的文件共享问题。在 F 项目中，开发、测试、运营、产品需要经常共享 UED 、设计稿等文档。这些文件共享都是通过邮件的形式，而公司的邮件有附件大小限制，并且邮件只保留一个月的时间，超过这个时间的会被归档，只能从公司的邮件找回平台中去找。所以经常出现诸如附件找回困难、附件上传失败的问题。所以我在内网搭了一个网盘“百宝箱”，可以很方便的让各个成员在内网共享文档。这个网盘很快得到成为了团队文档交流的主要方式，直到公司推广了 Jira 才退出了历史。</p>
<p><img src="/images/my-2-years-at-pingan/treasure-box.png" alt="内部网盘"></p>
<h4 id="星黎殿">星黎殿</h4>
<p>第二个问题是我们内网上的平台越来越多，缺乏一个统一的门户站点。所以我和一个实习生写了一个内部门户“星黎殿”，这个门户收录了我们日常使用的各种站点平台，并提供检索功能。这样，只需要将这个门户保存到书签就相当于保存了所有常用的站点的书签了。</p>
<p><img src="/images/my-2-years-at-pingan/bookmark.png" alt="内部门户"></p>
<h4 id="壹瓴阁">壹瓴阁</h4>
<p>平常大家的线上技术交流较少，所以我又用 discourse 搭建了一个内部技术交流论坛，为了鼓励同事们多发点文章，我搞了几个月的有奖征文活动，并且给每个小组都设立了文章数量指标，于是这个论坛同样受到了同事们的欢迎 <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>甚至有同事在上面发布了征婚广告 </span></span></span>。</p>
<p><img src="/images/my-2-years-at-pingan/bbs.png" alt="内部技术论坛"></p>
<h4 id="金科大白">金科大白</h4>
<p>另外我发现的一个需求是图书馆的管理。我们团队自己搞了个小型图书馆，采用的是人工管理图书借阅的方式。由于缺乏自动化，借出去的书除非定期轮询一下，否则很难知道哪些书已经到期该归还。所以我带着几个实习生写了个基于公司内部聊天工具“天下通”的聊天机器人“金科大白”，可以与它对话查询和借阅书籍，当书籍借阅到期时，将自动邮件通知还书。这个机器人也给后面我开发内部群管家机器人以及叮当机器人带来了灵感。</p>
<p><img src="/images/my-2-years-at-pingan/manager.png" alt="金科大白"></p>
<h4 id="二队网站">二队网站</h4>
<p>年前我还带了两个实习生做了一个我们团队的内部网站，主要用来展示团队在做的东西，以及一些可以对外开放的文档。后来我们从科技独立了出去，原来的团队随即更名，这个项目就胎死腹中了。</p>
<p><img src="/images/my-2-years-at-pingan/site.png" alt="二队网站"></p>
<p>不过在这个过程中，我们却做了一个更有价值的东西。由于网站本身使用 Hexo 来编写，为了方便检索文档，我带着其中一个实习生写了个生成检索源的库 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 并开源在 Github 上。这个库后来成了一个非常流行的 Hexo 插件，NPM 月均下载量一度达到 2000 次/月。</p>
<p>主线 + 支线双开，所以年底我被公司授予“一狼当先”创新员工奖。年底绩效沟通，leader 给我定级 A 档。</p>
<h3 id="生活">生活</h3>
<p>平时的工作虽然比较忙，公司的文体活动还是挺丰富的。在团队里头可以申请俱乐部，于是我常年混迹在桌球俱乐部、游泳俱乐部、户外俱乐部中打酱油。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/me-and-ukulele.jpeg" alt=" 我和我的Ukulele"><b>图 2</b>  我和我的Ukulele</span></span></span></p>
<p>年底的时候公司的行政美女黎老板给我安排了一个的政治任务——年会表演。但纯粹上台唱歌实在无趣，所以我在年会前的一个月开始学习 Ukulele 。就跟学习一门新的语言范式一样，一开始面对陌生的东西依然会有一种恐惧感，但坚持下来很快就会发现它的确非常简单，很容易做到拿谱即弹，这也增强了我挑战新鲜事物的信心。放一段为年会准备的弹唱曲目吧：<a href="http://www.miaopai.com/show/7atrQSZrhxgF2OPsauSy3-XHbrM1wtNB.htm" target="_blank" rel="external"><i class="fa fa-video-camera"></i> 秒拍：一小段I’m Yours</a> 。</p>
<h2 id="2016年">2016年</h2>
<p>到了 2016 年，我们正式从平安科技独立了出来，成立了平安金科。后来公司名字又做了几次调整，到我离职时，公司的名字改成了“上海壹账通金融科技有限公司”。</p>
<h3 id="主线">主线</h3>
<h4 id="git-迁移">Git 迁移</h4>
<p>平安的内部版本控制一直使用的是 SVN ，但 SVN 对分支和子模块的支持不给力，所以年前我们做了个决定，搭了内部的 Gitlab ，然后把整个工程代码拆分成主工程和多个子模块，然后全部迁移到 Gitlab 中托管。为了简化代码迁移的复杂度，我写了个内部工具 svn-git-transfer ，只需要配置好源 SVN 地址和目标 Gitlab 仓库地址，即可一键完成所有模块到 Gitlab 的同步，并保留了原先的所有提交记录。有了这个工具，我们只用了一天就完成了代码的迁移，然后大家高高兴兴的回家过年了。</p>
<p>年后回公司，我们遇到了更加头疼的一个问题：Git 的子模块极容易出错。具体可以参见我的一篇博文《<a href="/work/enterprise-class-git-version-control-1/">化繁为简的企业级 Git 管理实践（一）：多分支子模块依赖管理</a>》。于是，在和同事们充分讨论之后，我们决定放弃子模块的 commit id ，采用我们自定义的一个 modules.json 的文件来维护子模块的版本。于是我用了几天时间完成了内部代码管理工具 fmanager 的第一个版本。这个工具将繁琐的子模块管理化繁为简，得到了同事们的一致好评。在之后我对这个工具不断的修改完善，加入了诸如分支切换、多分支 cherry-pick、Code Review、代码风格检查、Git-LFS 支持、钩子自动安装等，并且支持通过改配置文件动态增删子模块。</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">fmanager - F 项目专用 Git 管理工具</div><div class="line"></div><div class="line">- 开发者：潘伟洲 &lt;panweizhou500@pingan.com.cn&gt;</div><div class="line">- 版本：v2<span class="number">.0</span></div><div class="line">- 使用方法:</div><div class="line"></div><div class="line">$ ./fmanager pull [-l modules.json路径] [-t 线程数] [<span class="comment">--fast]	更新当前分支的主工程，并将每个子模块的代码更新到指定分支的最新状态。</span></div><div class="line">$ ./fmanager update						和 ./fmanager pull 完全等效。只是一个别名。（缩写：up）</div><div class="line">$ ./fmanager pull-rn [-t 线程数]				更新 React Native 及其子模块 (缩写：pullrn)。</div><div class="line">$ ./fmanager init [-l modules.json路径] [-t 线程数]		重新根据 modules.json 的配置初始化工程，移除所有不在列表中的子模块。</div><div class="line">$ ./fmanager checkout &lt;分支名&gt; [-l modules.json路径]		切换到某个银行分支，同时完成子模块的代码切换。（缩写：co）</div><div class="line">$ ./fmanager cherry-pick &lt;commit <span class="property">id</span>&gt; &lt;分支列表&gt;			cherry-pick 某个 commit <span class="property">id</span> 到分支列表。（缩写：cpick）</div><div class="line">    分支列表格式：逗号隔开，中间不带空格。</div><div class="line">    举例：</div><div class="line">        ./fmanager cpick <span class="number">023e937</span>d JiLinBank,WeiHaiBank,TaiShanBank</div><div class="line">$ ./fmanager cherry-push &lt;commit <span class="property">id</span>&gt; &lt;分支列表&gt; 			cherry-pick 某个 commit <span class="property">id</span> 到分支列表，并推送这些分支。（缩写：cpush）</div><div class="line">$ ./fmanager submodule update [-l modules.json路径] &lt;模块名列表&gt;	更新指定子模块的代码到所处分支的最新状态。（缩写：sub）</div><div class="line">$ ./fmanager showbranch 					查看当前主工程和所有子模块的所属分支。（缩写：br）</div><div class="line">$ ./fmanager status 						查看当前主工程和所有子模块的修改状态。（缩写：st）</div><div class="line">$ ./fmanager <span class="command">log</span> 						查看当前主工程和所有子模块的当前分支/标签和最新提交。</div><div class="line">$ ./fmanager tag-diff [<span class="comment">--detail]				生成当前modules.json配置的各个模块与各自最新标签的比对结果（只支持x.x.x形式的标签） （缩写：td）</span></div><div class="line">    参数说明：</div><div class="line">        <span class="comment">--detail					# 生成的结果包含代码的diff，默认只展示文件改动</span></div><div class="line">    举例：</div><div class="line">        ./fmanager tag-diff				<span class="comment"># 生成文件改动的diff</span></div><div class="line">        ./fmanager tag-diff <span class="comment">--detail | less		# 生成文件改动的diff，并在less中查看（比一次性全部打印到终端更流畅）</span></div><div class="line">        ./fmanager tag-diff <span class="comment">--detail &gt; ~/res.md		# 生成文件改动的diff并保存到 res.md 文件中</span></div><div class="line">$ ./fmanager master &lt;模块名|仓库地址&gt;		                查看当前工程下某个模块的仓库的 master 名单，目前只支持 <span class="number">10.20</span><span class="number">.11</span><span class="number">.218</span> 下的的仓库</div><div class="line">    举例：</div><div class="line">        ./fmanager master PAFFUIKit                      <span class="comment"># 查看 PAFFUIKit 模块的 master 名单</span></div><div class="line"></div><div class="line">$ ./fmanager login						登录 Phabricator 代码评审平台</div><div class="line">$ ./fmanager setup						将当前工程引入代码评审</div><div class="line">$ ./fmanager diff [<span class="comment">--create | --update]				提交一个代码评审任务</span></div><div class="line">    举例：</div><div class="line">        ./fmanager diff					<span class="comment"># 提交代码评审，并自动判断当前仓库是否需要新建一个评审任务，还是追加到现有的评审任务</span></div><div class="line">        ./fmanager diff <span class="comment">--create			# 提交代码评审，并强制要求新建一个评审任务</span></div><div class="line">        ./fmanager diff <span class="comment">--update			# 提交代码评审，并强制要求追加到现有的评审任务中</span></div><div class="line">$ ./fmanager <span class="type">list</span>						查看所有提交过的评审任务的状态</div><div class="line">$ ./fmanager browse 评审<span class="property">id</span>					打开评审<span class="property">id</span>对应的评审页面</div><div class="line">    举例：</div><div class="line">        ./fmanager browse D3			        <span class="comment"># 打开 id 为 D3 的评审任务的评审页面</span></div><div class="line">$ ./fmanager push						push 代码到 Gitlab 。将自动根据当前是否引入代码评审选择适合的方式</div><div class="line">    举例：</div><div class="line">        ./fmanager push					<span class="comment"># push 代码</span></div><div class="line">        ./fmanager push <span class="comment">--revision D3			# push 评审 id 为 D3 的代码</span></div><div class="line">$ ./fmanager amend [<span class="comment">--revision revision_id] [--show]		修改某个评审任务的信息（只对接入评审的仓库有效）</span></div><div class="line">    举例：</div><div class="line">        ./fmanager amend <span class="comment">--revision D3			# 修改 id 为 D3 的评审任务信息</span></div><div class="line">        ./fmanager amend <span class="comment">--revision D3 --show		# 打印 id 为 D3 的评审任务信息（不修改）</span></div><div class="line">$ ./fmanager land						push 命令的别名，与 push 命令完全等同</div><div class="line">$ ./fmanager faq &lt;类型&gt;						查看各种 faq</div><div class="line">    举例：</div><div class="line">        ./fmanager faq                            <span class="comment"># 打开 faq 菜单</span></div><div class="line">        ./fmanager faq fmanager                   <span class="comment"># 同上，打开 fmanager 的 faq</span></div><div class="line">        ./fmanager faq git                        <span class="comment"># 打开 git 的 faq</span></div><div class="line">        ./fmanager faq rn                         <span class="comment"># 打开 RN 红屏的 faq</span></div><div class="line">        ./fmanager faq react-native               <span class="comment"># 同上，打开 RN 红屏的 faq</span></div><div class="line">        ./fmanager faq jenkins                    <span class="comment"># 打开构建站的 faq</span></div><div class="line">        ./fmanager faq anydoor-android            <span class="comment"># 打开任意门 Android SDK 的 faq</span></div><div class="line">        ./fmanager faq anydoor-ios                <span class="comment"># 打开任意门 iOS SDK 的 faq</span></div><div class="line">$ ./fmanager tips						显示每日一贴。</div><div class="line">$ ./fmanager <span class="command">say</span> &lt;要说的话&gt;					用 fmanager 的吉祥物说一句话。</div><div class="line">$ ./fmanager commits-<span class="keyword">since</span> &lt;时间&gt; 				查看当前主工程和所有子模块自某个时间点开始的所有提交。（缩写：cs）</div><div class="line">    举例：</div><div class="line">        ./fmanager commits-<span class="keyword">since</span> yesterday        <span class="comment"># 统计从昨天开始到现在的所有commit</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">16</span>:<span class="number">00</span>            <span class="comment"># 统计从今天下午4点到现在的所有commit</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">4</span> o clock pm     <span class="comment"># 和上面示例完全等效</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">2016</span>-<span class="number">08</span>-<span class="number">18</span>       <span class="comment"># 统计从2016年8月18日到现在的所有commit</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">2016</span>-<span class="number">08</span>-<span class="number">18</span>-<span class="number">16</span>:<span class="number">00</span> <span class="comment"># 统计从2016年8月18日下午4点到到现在的所有commit</span></div><div class="line">$ ./fmanager switch-sdk &lt;(Android)要切换到的framework分支|（iOS）要切换的模式,SDKMode、SourceMode&gt;               把当前工程的framework切换到SDK模式/源码模式</div><div class="line">    举例：</div><div class="line">        ./fmanager switch-sdk Source        <span class="comment">#  把当前工程的framework切换到源码模式,</span></div><div class="line">                                            <span class="comment">#  如果当前已是源码分支，则切回SDK分支拉取最新modules.json配置后再切回源码，保证源码是最新</span></div><div class="line">        ./fmanager switch-sdk SDK           <span class="comment">#  把当前工程的framework切换到SDK模式</span></div><div class="line">        ./fmanager switch-sdk Source <span class="comment">--update  # 把当前工程的framework切换到源码模式</span></div><div class="line">                                                <span class="comment"># 如果当前已是源码分支，则直接按照当前framework/modules.json更新源码所有基础模块代码</span></div><div class="line">        ./fmanager switch-sdk Source <span class="comment">--current  # 按照当前工程的framework的分支切换到源码模式，默认会先切回外层modules.json配置的framework分支</span></div><div class="line">$ ./fmanager lfs	<span class="comment"># 使用 lfs 管理二进制文件</span></div><div class="line">    举例：</div><div class="line">        ./fmanager lfs install              <span class="comment"># 安装 lfs ，必须执行一遍才能使用 lfs</span></div><div class="line">        ./fmanager lfs track <span class="string">"*.zip"</span>        <span class="comment"># 把所有 zip 类型文件都用 lfs 来管理</span></div><div class="line">        ./fmanager lfs ls-files             <span class="comment"># 列举所有使用 lfs 管理的文件</span></div></pre></td></tr></table></figure></p>
<p>这些功能使它成为了团队日常开发中必备的工具，也因此获得了一个季度优秀工具奖以及公司创新奖。</p>
<p>除了技术上的问题，迁移 Git 也给团队的学习接受能力提出了挑战。由于我对 Git 比较熟悉，所以我自然承担了在团队中推广 Git 的角色。一开始的时候，找我解决代码拉取问题的人需要排一条很长的队伍。我也忙得几乎顾不上干其他事情。为了减轻负担，我先是进行了几场 Git 的使用技术分享。之后我在 Gitlab 上写了份 FAQ ，然后把团队遇到的各种常见问题都放到 FAQ 上。一旦帮同事解决了新的问题，我都会要求他去负责把解决办法添加到 FAQ 上，久而久之 FAQ 上的问题集就非常完善了。除此之外，先前为团队搭建的技术论坛也成了我一个推广 Git 技术的平台，我在上面写了几篇 Git 的教程，也对团队成员的学习起到了一定的帮助作用。我甚至把一些常用的 Git 技巧和 fmanager 做了整合，于是每次使用 fmanager 后，都会随机出现类似下面这样的卖萌 ASCII 图和贴士：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">  _____________________________________________________________________________________</div><div class="line">/ 你知道吗：要了解某个site用了哪些模块，每个模块使用什么tag  </div><div class="line"> ，可以访问模块可视化平台。                    </div><div class="line"><span class="command">\ </span>http://xx.xx.xx.xx:8081/modulevis/</div><div class="line">  -------------------------------------------------------------------------------------</div><div class="line">   <span class="command">\</span></div><div class="line">    <span class="command">\</span></div><div class="line">        .--.</div><div class="line">       |o_o |</div><div class="line">       |:_/ |</div><div class="line">      //   <span class="command">\\</span> <span class="command">\\</span></div><div class="line">     (|     | )</div><div class="line">    /'<span class="command">\\</span>_   _/`<span class="command">\\</span></div><div class="line">    <span class="command">\\</span>___)=(___/</div><div class="line"></div><div class="line">         tux</div><div class="line"></div><div class="line">  __________________________________________________________________________________</div><div class="line">/ 你知道吗：传说多看看 Gitlab 上的 FAQ 可以成为                     </div><div class="line"> Git 高手：                                           </div><div class="line"><span class="command">\ </span>http://xx.xx.xx.xx/FFProject/FFWiki/wikis/git-faq</div><div class="line">  ----------------------------------------------------------------------------------</div><div class="line">      <span class="command">\ </span>                   / <span class="command">\ </span> //<span class="command">\</span></div><div class="line">       <span class="command">\ </span>   |<span class="command">\_</span>__/|      /   <span class="command">\/</span>/  <span class="command">\\</span></div><div class="line">            /0  0  <span class="command">\_</span>_  /    //  | <span class="command">\ </span><span class="command">\</span></div><div class="line">           /     /  <span class="command">\/</span>_/    //   |  <span class="command">\ </span> <span class="command">\</span></div><div class="line">           @_^_@'/   <span class="command">\/</span>_   //    |   <span class="command">\ </span>  <span class="command">\</span></div><div class="line">           //_^_/     <span class="command">\/</span>_ //     |    <span class="command">\ </span>   <span class="command">\</span></div><div class="line">        ( //) |        <span class="command">\/</span>//      |     <span class="command">\ </span>    <span class="command">\</span></div><div class="line">      ( / /) _|_ /   )  //       |      <span class="command">\ </span>    _<span class="command">\</span></div><div class="line">    ( // /) '/,_ _ _/  ( ; -.    |    _ _<span class="command">\.</span>-<span class="special">~</span>        .-<span class="special">~</span><span class="special">~</span><span class="special">~</span>^-.</div><div class="line">  (( / / )) ,-<span class="special">{</span>        _      `-.|.-<span class="special">~</span>-.           .<span class="special">~</span>         `.</div><div class="line"> (( // / ))  '/<span class="command">\ </span>     /                 <span class="special">~</span>-. _ .-<span class="special">~</span>      .-<span class="special">~</span>^-.  <span class="command">\</span></div><div class="line"> (( /// ))      `.   <span class="special">{</span>            <span class="special">}</span>                   /      <span class="command">\ </span> <span class="command">\</span></div><div class="line">  (( / ))     .----<span class="special">~</span>-.<span class="command">\ </span>       <span class="command">\-</span>'                 .<span class="special">~</span>         <span class="command">\ </span> `. <span class="command">\^</span>-.</div><div class="line">             ///.----..&gt;        <span class="command">\ </span>            _ -<span class="special">~</span>             `.  ^-`  ^-_</div><div class="line">               ///-._ _ _ _ _ _ _<span class="special">}</span>^ - - - - <span class="special">~</span>                     <span class="special">~</span>-- ,.-<span class="special">~</span></div><div class="line">                                                                  /.-<span class="special">~</span></div><div class="line">                        dragon                                                                  </div><div class="line"></div><div class="line">  __________________________________________________</div><div class="line">/ 你知道吗：如果只需要更新 React Native </div><div class="line"> 的代码，而不需要更新 native 的代码，可以使用</div><div class="line"> ./fmanager pullrn 命令。     </div><div class="line"><span class="command">\ </span>                          </div><div class="line">  --------------------------------------------------</div><div class="line">                             (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                           (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                         (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                        (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                      (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                     (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                    (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                   (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                  (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">   _____         (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">  /     <span class="command">\ </span>      (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)    |<span class="command">\/</span><span class="command">\/</span><span class="command">\/</span>|     /<span class="command">\ </span>/<span class="command">\ </span> /<span class="command">\ </span>              /<span class="command">\</span></div><div class="line"><span class="command">\/</span><span class="command">\/</span>     |      (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)    |      |     | V  <span class="command">\/</span>  <span class="command">\-</span>--.    .----/  <span class="command">\-</span>---.</div><div class="line"> |  (o)(o)       (o)(o)(<span class="special">#</span><span class="special">#</span>)    |      |      <span class="command">\_</span>        /       <span class="command">\ </span>         /</div><div class="line"> C   .---_)    ,_C     (<span class="special">#</span><span class="special">#</span>)    | (o)(o)       (o)(o)  &lt;__.   .--<span class="command">\ </span>(o)(o) /__.</div><div class="line">  | |.___|    /____,   (<span class="special">#</span><span class="special">#</span>)    C      _)     _C         /     <span class="command">\ </span>    ()     /</div><div class="line">  |  <span class="command">\_</span>_/       <span class="command">\ </span>    (<span class="special">#</span>)       | ,___|     /____,   )  <span class="command">\ </span>     &gt;   (C_)   &lt;</div><div class="line">  /_____<span class="command">\ </span>       |    |         |   /         <span class="command">\ </span>    /----'    /___<span class="command">\_</span>___/___<span class="command">\</span></div><div class="line"> /_____/ <span class="command">\ </span>      OOOOOO        /____<span class="command">\ </span>         ooooo             /|    |<span class="command">\</span></div><div class="line">/         <span class="command">\ </span>    /      <span class="command">\ </span>     /      <span class="command">\ </span>       /     <span class="command">\ </span>          /        <span class="command">\</span></div><div class="line"></div><div class="line">  HOMER          MARGE         BART            LISA               MAGGIE</div></pre></td></tr></table></figure></p>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/teacher.jpeg" alt=" 由于 Git 的分享做的比较好，教师节的时候我被评上了公司的“十佳讲师”。收获小卡片一张。"><b>图 3</b>  由于 Git 的分享做的比较好，教师节的时候我被评上了公司的“十佳讲师”。收获小卡片一张。</span></span></span></p>
<p>这些技术推广策略对团队普及 Git 起到了非常有效的推动作用。过了一个月后，找我的人就变得很少了。多数人也从 Git 的新手慢慢变成了老手，也能够帮忙解决新人们的 Git 相关的问题了。</p>
<p>还有一个避不开的问题就是分支管理方案。因为我们的业务模型比较复杂，Git-Flow 和 Github-Flow 都无法满足我们的需求。而没有一个统一的分支方案，就好比没有一个成文的交通规则，老司机也开不了车。于是有很长一段时间，我们都聚在会议室里头激烈地讨论分支管理方案，见我的另一篇博文 《<a href="/work/enterprise-class-git-version-control-3/">化繁为简的企业级 Git 管理实战（三）：分支管理策略</a>》。这个过程虽然很痛苦，但是却很能够锻炼你的思维，以及考虑问题的完整程度。而且，你会感觉到你真正成为了团队里头一个领域的游戏规则的制定者，更加能感受到你对于这个团队的价值。</p>
<p>到了年中，我们使用 Git 来管理代码已经非常稳定可靠，Git 的迁移可以说非常成功。我们也因此获得了团队的优秀项目奖。</p>
<h4 id="三合一更新器">三合一更新器</h4>
<p>在下半年，我终于有时间回归到客户端开发了。我们遇到一个问题是几种更新的弹窗抢占问题。我们的 APP 已经包含了 Native 热修复、RN 热更新和 H5 离线缓存三个层级的更新能力。但这三种更新各自为政，可能发生弹窗抢占，此外，几种依赖可能存在依赖关系：比如 RN 层的某个接口可能依赖 Native 层相应的改动，这时候如果 RN 先更新成功了，而 Native 端又修复失败，就会导致应用崩溃。所以我承担设计了三合一更新器，将三层的更新交由一个更新器来统一调度，三层更新都允许设置静默、建议、强制三种更新优先级，并在必要时刻允许对优先级进行提升。这个三合一更新器优化了用户的更新体验，也消除了三层更新没有同步完成导致应用崩溃的潜在隐患。</p>
<h4 id="code-review-推动">Code Review 推动</h4>
<p>除了三合一更新之外，下半年我们开始思考如何更好地引入 Code Review 来规范化我们的工作。</p>
<p>在这之前，我已经通过 pre-commit 客户端钩子和 pre-receive 远程钩子来自动禁止了不规范的代码提交进我们的仓库。但代码风格只是最低层次的要求。有些代码本身的风格并没有问题，但是实现的思路与需求存在偏差，或者实现时对一些特殊情况欠考虑，这些 bad case 都无法通过静态分析的手段禁止提交，只能靠人工审核。所以，一个 Code Review 平台是很有必要的。</p>
<p>我先尝试了 ReviewBoard ，这个平台的优点是易于搭建，而且也有相应的 CLI 工具配套。但我发现这个平台似乎只支持 post review ，即 push 到仓库之后才发起 review 。而我们更希望做到 pre review，在 push 前就必须通过 code review ，否则禁止 push 。所以我决定弃用 ReviewBoard 。</p>
<p>之后我尝试了 Phabricator ，据说是 Facebook 内部使用的 Code Review 平台。我在搭建试用了几分钟后就觉得这个就是我们要的平台：</p>
<ol>
<li>基于 LAMP 架构，部署简单；</li>
<li>无需像 Gerrit 那样强绑定代码仓库；</li>
<li>多次 commit 自动合并成一个；</li>
<li>提供了配套的 CLI 工具 Arcanist；</li>
<li>平台开放 API （尽管不怎么完善）。</li>
</ol>
<p><img src="/images/my-2-years-at-pingan/phabricator.png" alt="Phabricator"></p>
<p>还是那句话，技术实现不是难点，难的是推广。为了在团队中推广 Code Review，我做了几个工作：</p>
<ol>
<li>把 Arcanist 集成进了 fmanager ，把常用的 diff、land 命令也变成了 fmanager 的子命令，降低了工具的学习成本；</li>
<li>写了个 pre-commit 钩子，根据当前模块是否存在 .arcanist 文件判断是否接入了 Code Review，然后在 commit 前根据 commit message 判断当前 commit 是否已经过 review ，从而禁用未经 review 的代码提交；</li>
<li>对 Code Review 记录做了跟踪和分析，评选出了有价值的 Review 记录并进行奖励。调动了大家参与 Review 的热情。</li>
</ol>
<p>为了方便查询和自己相关的 Code Review 的进展，我还写了个 Alfred 的 Workflow，输入自己的账号即可查询所有相关的 Review 任务：</p>
<p><img src="/images/my-2-years-at-pingan/workflow.png" alt="Phabricator Workflow"></p>
<p>这个 Code Review 平台内测不到两周，我们的 Code Review 数量就破百了，两个月后，团队的 Code Review 数量就突破了一千。这个平台也拿到了该季度的优秀项目奖。</p>
<h3 id="支线-v3">支线</h3>
<h4 id="加班统计平台">加班统计平台</h4>
<p>年初我发现团队里的一个痛点：每个月月初我们都需要到内网导出打卡记录，然后从中手动筛选出加班的那些天，再整理成一份报销表格给行政的同事申请加班补贴。手动筛选加班的打卡记录不仅耗时，而且很容易出错，尤其是当天是特殊节假日的时候。每次整理加班记录，可能要花费二十分钟的时间。而这些工作完全可以交给机器自动完成。</p>
<p>所以我写了一个内部使用的加班统计平台，从内网导出的打卡记录只需要交给平台进行一下分析，马上就可以生成一份符合要求的加班统计表格，并且还考虑了特殊节假日以及漏打卡的情况。原先要花费二十分钟完成的事情，只需要交给这个平台，一分钟左右即可导出需要的表格。</p>
<p><img src="/images/my-2-years-at-pingan/summary-1.png" alt="加班统计平台"></p>
<p>为了吸引同事们使用，我又加了加班数据排名以及可视化的功能，可以很直观的看出近期加班的情况。</p>
<p><img src="/images/my-2-years-at-pingan/summary-4.jpeg" alt="加班统计平台-排名系统"></p>
<p><img src="/images/my-2-years-at-pingan/summary-3.jpeg" alt="加班统计平台-可视化"></p>
<p>这个平台也是我首次尝试收费的一个服务，可选择一年授权和长期授权两种激活码，并提供首次免费试用。有 100 多位同事在试用成功后就购买了我的服务。</p>
<h4 id="模块配置可视化平台">模块配置可视化平台</h4>
<p>由于我们同时开发维护多个 APP ，数量一多，要查出每个 APP 的某个模块在使用什么版本就变得很繁琐了。</p>
<p>所以我写了一个模块配置可视化平台，支持多条件的检索模块的配置信息。</p>
<p><img src="/images/my-2-years-at-pingan/modulevis.png" alt="模块配置可视化平台"></p>
<p>为了保证数据是最新的，我给主工程的 Git 仓库加了 post-receive 远程钩子：每次检测到主工程的 modules.json 发生修改，在服务端的 post-receive 钩子就会把新的 modules.json 配置情况同步到可视化平台中。</p>
<h4 id="代码同步工具">代码同步工具</h4>
<p>在我们成功迁移到 Git 管理代码后，公司也开始普及 Git，搭了一个公司的 Gitlab 。在正式发布前，科技的工程管理团队甚至邮件向我咨询了 Git 管理的一些经验心得。</p>
<p>尽管公司的 Gitlab 有更大的团队来维护和支持，我们并不愿意把我们的代码迁移到公司的服务上。最主要的原因是我们自己的 Gitlab 可以更方便的定制，迁移到公司的 Gitlab 就没有这么高的权限了。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/piano.jpeg" alt=" 年会电子琴弹唱"><b>图 4</b>  年会电子琴弹唱</span></span></span></p>
<p>虽然自己的 Gitlab 定制起来很爽，但稳定性和单点问题也成了隐患。我们甚至遇到过 Gitlab 所在的服务器发生维护而导致我们一整天无法正常拉取和推送代码的情况，简直是一场噩梦。为了避免单点问题带来的灾难，我写了一个全自动代码同步工具，能够在每天凌晨把我们的 Gitlab 的组织、代码、成员、分支保护等东西都同步到公司的 Gitlab 中，而且无需管理员权限。见 《<a href="/work/enterprise-class-git-version-control-4/">化繁为简的企业级 Git 管理实战（四）：多 Gitlab 数据同步</a>》。这个工具给我们的代码安全提供了一个强有力的保障，也因此获得了该季度的优秀工具奖。</p>
<p>年中和年底的两次绩效沟通，leader 又继续给我评级了 A 档。同时我被评为了公司的年度优秀员工。</p>
<h3 id="生活-v2">生活</h3>
<p>有了去年的 Ukulele 弹奏的基础，今年的年会我决定玩点其他的乐器。于是我在九月份买了一台卡西欧入门电子琴，开始学习电子琴弹唱。</p>
<p>电子琴弹唱和 Ukulele 弹唱完全是不同级别的难度。Ukulele 的弹唱基本就是弹和弦搞定，而电子琴弹唱可以说是吉他指弹 + 演唱的难度了，要在几个月内达到拿得出手的水平非常困难。好在现在的电子琴的教学软件都做的非常人性化，我只需学好指法，然后照着软件给出的演示进行肌肉记忆，整首歌硬记下来也是可能的。年会上，我弹唱了偶像王力宏的经典歌曲《你不知道的事》（<a href="https://kg.qq.com/node/play?s=KKeq5gK_O1XgmKZ5" target="_blank" rel="external"><i class="fa fa-video-camera"></i> 练习视频：你不知道的事</a>），算是把大伙糊弄过去了。</p>
<h2 id="2017年">2017年</h2>
<h2 id="主线-v2">主线</h2>
<h3 id="人工智能小组">人工智能小组</h3>
<p>到了 2017 年，我们的框架变得稳定，不像上一年有诸多需求。于是我们进入了舒适区，过上了朝九晚六的生活。但这种情况对于我而言并不见得是好事，因为需求变少了，人也会跟着变懒，久而久之就没有成长了。既然业余时间变多了，我决定把时间用来学点 AI 的相关的知识。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/udacity.jpeg" alt=" 顺手给课程提了几个建议和bug，收到了 Udacity 寄来的小礼物。"><b>图 5</b>  顺手给课程提了几个建议和bug，收到了 Udacity 寄来的小礼物。</span></span></span></p>
<p>机器学习对数学的要求比较高，所以我先花了半个月的时间看了可汗学院的《线性代数》课程，写了<a href="http://localhost:4000/categories/#math" target="_blank" rel="external">几篇学习笔记</a>。然后又看完了 Udacity 上的《机器学习入门》，并做完了全部练习。这门课讲的非常生动，极大地帮助我加深了对机器学习如何解决实际问题的理解。</p>
<p>在锋哥的鼓励下，我带头成立了一个人工智能兴趣小组。我们一共开展了 6 次分享，涵盖了 TensorFlow、贝叶斯分类、线性回归、K-means 聚类、自然语言处理、对话机器人实现等多个 topic 。另外我申请购买了一台高性能的深度学习机，自己搭建了 Jupyter Notebook 和支持 GPU 加速的 TensorFlow 环境，可以供小组成员在 Notebook 上做感兴趣的实验。</p>
<p><img src="/images/my-2-years-at-pingan/notebook.png" alt="我们的notebook"></p>
<p>之后我想尝试将分类的技术用在我们内部的 issue tracker 来判断是否重复提 bug 。由于我们的框架同时对接了多款 App ，一旦框架出现了一个 bug，多个 App 上都会报相同的问题。如果能通过机器学习的技术来分辨出是否重复提 bug ，那么就能减少开发在 follow issue 上面花费的时间。判断是否重复提 bug 和判断文本内容相似度类似，可以对文本统计 TFIDF 词频信息，然后利用余弦相似度来判断相似程度。所以，我写了个爬虫，把我们的 Redmine 平台上的数据按照格式爬了下来，总共爬了接近两万条 bug 数据。但过了几天公司开始推 Jira 作为新的 issue tracker，我们的 Redmine 就停止使用了。这个项目就只能搁浅了。</p>
<p>虽然我们并没有真正用机器学习算法做出什么成果，但这个过程中积累的一些机器学习的知识也将为我日后的工作方向带来收益。</p>
<h2 id="支线-v4">支线</h2>
<h3 id="图灵">图灵</h3>
<p>我为团队做的一个比较好玩的项目是微信聊天机器人“图灵”。这是基于 <a href="https://github.com/liuwons/wxbot" target="_blank" rel="external">wxbot</a> 和 <a href="http://www.tuling123.com/" target="_blank" rel="external">图灵机器人 API</a> 做的一个微信群聊天机器人。</p>
<p>起初它是为了取代<a href="#%E9%87%91%E7%A7%91%E5%A4%A7%E7%99%BD">金科大白</a>而做的一个新的管家项目，因此它可以实现诸如询问内网站点地址、恶劣天气通知、群成员生日提醒、新人入群欢迎、活动报名征集、考勤异常提醒等功能。</p>
<p><img src="/images/my-2-years-at-pingan/birthday.jpeg" alt="群成员生日提醒"></p>
<p>大伙对图灵非常稀奇，刚推出的短短两天，它就被群里的同事 @ 了 800 多次。</p>
<p><img src="/images/my-2-years-at-pingan/at_count.jpeg" alt="火爆的图灵"></p>
<p>后面我发现把图灵和项目管理结合可以产生更多意想不到的效果。例如，我们的框架的源码和 SDK 是分开分支进行版本控制的。以往要构建 SDK ，需要先切到源码分支，执行构建脚本，然后再切到 SDK 分支上更新 SDK 。过程比较繁琐。我给图灵加上了构建框架 SDK 的功能。要构建某个分支的 SDK，只需要跟图灵说一声即可：</p>
<p><img src="/images/my-2-years-at-pingan/sdk-build.jpeg" alt="使用图灵构建SDK"></p>
<p>交给机器人构建 SDK 是如此方便，于是 @图灵 构建 SDK 成了我们日常构建框架 SDK 的主要方式。</p>
<p>李开复说，“5秒以下的工作将会被人工智能替代”。我也在工作中尽量找出 5 秒内可以用微信机器人取代的活，并交由它去完成。于是我给图灵实现了诸如苹果APP审核状态跟踪、项目日报查询、Jenkins 构建站任务跟踪、个人bug通知查询、线上 App 下载地址查询等功能，这些功能为项目的日常管理带来了很大便利。</p>
<h3 id="开源项目">开源项目</h3>
<p>由于今年加班时间变少了，我也有了更多时间投入在开源项目中。我的问题开始由“这个团队需要什么”转变为“外面的世界需要什么”。</p>
<p>在 5 月份的时候我决定自己动手做一个智能音箱，一方面来自于自己生活中的需求，另一方面也是因为找不到一个比较成熟可用的中文的开源智能音箱项目。于是我买来了硬件设备，花了三个星期的时间完成了<a href="http://github.com/wzpan/dingdang-robot" target="_blank" rel="external">叮当</a>的第一个版本。由于树莓派+智能音箱毕竟是小众项目，所以我一开始并不期望这个项目能得到多少关注。然而，随着 QQ 用户群人数的不断壮大，越来越多的朋友安装了叮当，并且真正将它投入在了日常的使用上。发布不到 10 天，star 数量就突破了 100 个，有两天登上了当天 Python 的 Github Trending。截至本文发布，叮当的 QQ 用户群已经达到了 117 人， Github Star 数量为 211 个。</p>
<p><img src="/images/my-2-years-at-pingan/trending.jpg" alt="叮当登上Github Trending"></p>
<p>叮当也给我的职业生涯带来了新的变化。在发布叮当后的第三天，腾讯团队找上了我问我是否考虑他们的工作机会。考虑到在这边已经处于舒适区，我决定去了解一下情况。</p>
<p><img src="/images/my-2-years-at-pingan/tencent-contact.png" alt="来自腾讯的工作机会"></p>
<p>经过了三轮技术面试和一轮通道面试，我拿到了 offer 。拿到 offer 的时候，我非常纠结。最大的原因来自对现在团队的不舍。但考虑到工作方向和个人的职业规划，我最终还是提了离职。</p>
<p>在项目交接期间，我又写了一个基于 Github issue 的评论脚本 <a href="https://github.com/wzpan/comment.js" target="_blank" rel="external">comment.js</a> ，用来取代 Disqus、网易云跟贴这类社会化评论系统。有趣的是，在我发布 comment.js 一周后，网易云跟贴宣布停止服务。有种自己在船沉了之前造出了飞机的感觉 <code>:-D</code> 。</p>
<p><img src="/images/my-2-years-at-pingan/163-yun-gen-tie.png" alt="网易云跟贴停止维护"></p>
<h2 id="总结">总结</h2>
<p>白驹过隙，在平安的两年时光已走到了尾声。除了不舍，更多的是对团队的感激。谢谢锋哥的知遇之恩，谢谢定一的细心栽培，谢谢技术大神鑫哥的指点，谢谢所有合作过的同事，谢谢团队对我的信任。</p>
<p>在平安的时间里，我一共获得了一次年度优秀员工奖项，一次年度创新员工奖项，两个工具奖，两个项目奖，四个创新奖，参与申请了八项专利，三次绩效考核都保持了 A 档。如果要我总结点经验：</p>
<ol>
<li>关于KPI：KPI 只是对你的基本期望。不要把自己的工作局限在 KPI 所设立的范围里头。而应该多从工作中发现问题，然后带头去解决问题。当然，你所发现和解决的问题应该对整个团队带来收益，否则只能被定性成“边边角角”的活。另外，拿到差的绩效也不要难过，更重要的是你在工作中学到了什么。</li>
<li>关于择业：在百度的老大说过一句让我受益匪浅的话：“找工作，一看方向，二看团队，三看公司，四看钱”。方向和团队对你的个人成长有非常重要的影响。我的两次跳槽，都是按照这个标准做出的慎重选择。</li>
<li>关于沟通：少吐槽，多做事情。经常吐槽会让人觉得你融入不进这个团队。与其花时间吐槽，不如想想能不能做点什么东西改善现状。</li>
<li>关于技术：把握好深度和广度之间的度。知识面广，学习能力好的人在工作前几年会比较混得开，因为工作上手得快，工作难度也不会很高，产出就会比别人多。然而随着工作年限的增长，外界对你的知识深度的要求也会越来越高。我去腾讯面试的时候，有不少深一点的技术问题没有答上来。虽然最终我还是拿到了 offer ，但我知道很大原因是开源项目加了分。所以，工作年限越大，更应该注重对自身技术领域的深耕，以免再次择业时面临被动。</li>
</ol>
<p>雄关漫道真如铁，而今迈步从头越。在即将奔赴新的单位前，我也以此文告诫自己：</p>
<ol>
<li>一切从头开始，多跟周围的朋友学习；</li>
<li>在未来至少要专心投入两年，把自己的技术学得更精深。</li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/职场感悟/" term="职场感悟"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用叮当声控智米电风扇]]></title>
    <link href="http://hahack.com/codes/use-dingdang-to-control-smart-mi-fan/"/>
    <id>http://hahack.com/codes/use-dingdang-to-control-smart-mi-fan/</id>
    <published>2017-07-15T11:42:22.000Z</published>
    <updated>2017-07-16T02:04:33.433Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p><a href="http://github.com/wzpan/dingdang-robot" target="_blank" rel="external">dingdang-robot</a> （以下简称“叮当”），是我在今年5月20号开源的一个中文智能音箱项目。</p>
<p>起初，我只是抱着一个好玩的心态做这个项目，并不期望这个项目能得到多少关注。然而，随着 QQ 用户群人数的不断壮大，越来越多的朋友安装了叮当，并且真正将它投入在了日常的使用上。很多朋友也提出了各种好玩的建议、想法，甚至为叮当贡献了插件或者捐赠了这个项目，让我觉得这个项目是很有价值的，也让我知道，我能做的还有很多东西。因此，我并不是开源了叮当之后就撒手不管了，而是利用业余时间不断完善叮当，又陆续发布了 8 个小版本，使得叮当在响应速度和功能丰富程度上都有了很大提升：</p>
<ul>
<li>自 v0.1.1 起，邮件通知也增加了 echo 功能，用户可以发送带 <code>[echo]</code> 前缀的邮件给叮当接入的邮箱，从而实现让叮当朗读标题的消息，而不是提醒有新的邮件。利用这个功能，可以很方便地和 ifttt 结合，当满足某个条件时让图灵通知这个事件。例如，我将 ifttt 的 <a href="https://ifttt.com/date_and_time" target="_blank" rel="external">Date &amp; Time</a> 触发器和 <a href="https://ifttt.com/email" target="_blank" rel="external">Email</a> 做了联动，实现定时在每天晚上 11 点发送邮件通知我睡觉；</li>
<li>自 v0.1.2 起，叮当的响应速度有了很大提升；</li>
<li>v0.1.3 增加了 snowboy 离线唤醒 STT 引擎，目前有 PocketSphinx 和 snowboy 两套离线唤醒引擎可供选择；</li>
<li>v0.1.4 增加了 SendQR 插件，可以让叮当将微信的登录二维码发送到邮箱。<a href="https://github.com/hhao" target="_blank" rel="external">@hhao</a> 也给叮当写了个可以获取二维码图片文件的服务器插件。另外，邮箱增加了 <code>[control]</code> 前缀支持，用户可以发送带 <code>[control]</code> 前缀标题的邮件，该标题里的内容会被当成一句指令交给叮当执行，从而实现类似微信的远程控制叮当的功能；</li>
<li>v0.1.5 开始，可以微信控制音乐播放了；</li>
<li>v0.1.7 开始，所有插件都可以通过在插件配置里头通过 <code>enable</code> 选项开关；</li>
<li>叮当的官方+第三方插件数量由 6 个增加到了 13 个。</li>
</ul>
<p>除了完善已有的功能，我也正试图让叮当往智能家电控制中心的方向上发展。</p>
<p>如今很多智能音箱除了用来听歌对话之外，还扮演了家庭中的一个控制中心的角色。不过，由于各家采用的接入协议有所区别，A 家的智能家电并不见得能得到 B 家的智能音箱的支持。而由于叮当是开源的项目，对其进行定制，接入控制家电所需的协议，从而实现声控大部分的智能家电是完全可能的。今天我就分享一下如何用叮当控制智米电风扇。</p>
<a id="more"></a>
<h2 id="智米风扇声控插件">智米风扇声控插件</h2>
<p>先上视频。这个视频演示了使用叮当实现对智米风扇的电源开关、摇头开关、自然风开关、风量调节、预约关机的声控：</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://www.miaopai.com/show/1NZnXdBMryZsDvyshBNdoPHNBHUHTEjW.html" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<p><embed src="http://player.youku.com/player.php/sid/XMjg5NDAwOTUxMg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"></p>
<p>插件的主页：<a href="https://github.com/wzpan/dingdang-smart-mi-fan" target="_blank" rel="external">https://github.com/wzpan/dingdang-smart-mi-fan</a> 。</p>
<h3 id="安装插件">安装插件</h3>
<p>先安装 python2-miio ：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install python2-miio</div></pre></td></tr></table></figure></p>
<p>之后，克隆本项目到任意目录：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/wzpan/dingdang-smart-mi-fan.git</div></pre></td></tr></table></figure></p>
<p>再将里头的 <a href="http://SmartMiFan.py" target="_blank" rel="external">SmartMiFan.py</a> 拷贝至 /home/pi/.dingdang/custom 目录。</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp dingdang-smart-mi-fan/SmartMiFan.py /home/pi/.dingdang/custom/</div></pre></td></tr></table></figure></p>
<p>如果没有 custom 目录，就先创建它然后再执行上面的拷贝命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /home/pi/.dingdang/custom</div></pre></td></tr></table></figure></p>
<p>然后，确保你的智米电风扇已开机并和叮当所在的机器处于同一个局域网下。然后执行以下命令获取风扇的 <code>host</code> 和  <code>token</code>:</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">miio2 discover</div></pre></td></tr></table></figure></p>
<p>最后在 /home/pi/.dingdang/profile.yml 中添加如下配置：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 智米风扇</span></div><div class="line">smart_mi_fan:</div><div class="line">    host: <span class="string">"192.168.1.106"</span></div><div class="line">    <span class="keyword">token</span>: <span class="string">"32e9af2050bc9d6f599c061733effee0"</span></div><div class="line">    angle: <span class="number">60</span>  <span class="comment"># 摇头的角度范围。可选值为 30/60/90/120</span></div></pre></td></tr></table></figure></p>
<p>完成后重启叮当即可使用本插件。</p>
<h3 id="指令列表">指令列表</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>相同指令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开风扇</td>
<td>启动风扇</td>
<td>打开风扇</td>
</tr>
<tr>
<td>关闭风扇</td>
<td>-</td>
<td>关闭风扇</td>
</tr>
<tr>
<td>开启自然风</td>
<td>启动自然风</td>
<td>切换到自然风模式</td>
</tr>
<tr>
<td>关闭自然风</td>
<td>关闭自然风</td>
<td>切换到普通模式</td>
</tr>
<tr>
<td>开始摇头</td>
<td>开启摇头</td>
<td>开始摇头</td>
</tr>
<tr>
<td>停止摇头</td>
<td>结束摇头，关闭摇头</td>
<td>结束摇头</td>
</tr>
<tr>
<td>加大风速</td>
<td>加快风速，加大风量，加大风力</td>
<td>加大风扇转速</td>
</tr>
<tr>
<td>减少风速</td>
<td>减慢风速，减少风量，减小风力</td>
<td>降低风扇转速</td>
</tr>
<tr>
<td><code>$num</code> <code>$unit</code> 后关闭风扇</td>
<td><code>$num</code> 是数字，<code>$unit</code> 可以是秒/分钟/小时</td>
<td>预约关机</td>
</tr>
</tbody>
</table>
<h2 id="开发心得">开发心得</h2>
<p>下面说说开发心得。小米的智能家电使用的是 miio 协议。在编写这个插件之前，我先试用了 <a href="https://github.com/homeassistantchina" target="_blank" rel="external">@homeassistantchina</a> 提供的 HomeAssistant 的智米风扇插件 <a href="https://github.com/homeassistantchina/custom_components/blob/master/custom_components/fan/smart_mi_fan.py" target="_blank" rel="external">smart_mi_fan.py</a>，这个插件在 HomeAssistant 里头的体验非常不错：</p>
<p><img src="/images/use-dingdang-to-control-smart-mi-fan/smart-mi-fan-hass.png" alt="HASS的智米风扇插件"></p>
<p>通过阅读这个插件，我发现这个插件依赖了一个封装了 miio 协议的 Python 3 的库 python-miio 。再阅读 python-miio 的源码，可以发现这个库就是通过 socket 来实现和家电的通讯的。整个发送消息的逻辑写成了一个 <code>send</code> 函数：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, command, parameters=None)</span></span></div></pre></td></tr></table></figure></p>
<p>使用这个函数非常简单，只需要传入要发送的指令即可。</p>
<p>通过阅读 <code>smart_mi_fan.py</code> 的源码，不难发现 miio 的指令主要是两个类型：</p>
<ol>
<li>
<p>获取属性。获取风扇的温度、角度、电源、风速等属性。通过发送 <code>get_prop</code> 指令并带上需要获取的属性名即可得到这些属性的值。具体有如下这些：</p>
<ul>
<li><code>temp_dec</code>：温度；</li>
<li><code>humidity</code>：湿度；</li>
<li><code>angle</code>：角度；</li>
<li><code>speed</code>：风速；</li>
<li><code>poweroff_time</code>：预约关机的时间（秒）；</li>
<li><code>power</code>：是否开机；</li>
<li><code>ac_power</code>：是否使用交流电供电；</li>
<li><code>battery</code>：电池剩余电量；</li>
<li><code>angle_enable</code>：是否摇头；</li>
<li><code>speed_level</code>：正常风风速等级；</li>
<li><code>natural_level</code>：自然风风速等级；</li>
<li><code>child_lock</code>：儿童锁；</li>
<li><code>buzzer</code>：是否有声音反馈；</li>
<li><code>led_b</code>：LED指示灯的亮度。</li>
</ul>
</li>
<li>
<p>设置属性。设置某个属性的值。通过发送 <code>set_属性名</code> 指令并带上值即可对该属性进行控制。</p>
</li>
</ol>
<p>了解了这个套路后，我只需要照着写一个叮当的插件，即可实现让叮当声控智米风扇的目标。</p>
<p>不过，在完成这个目标前，我还遇到了一个问题：python-miio 只能在 Python 3 环境中使用，而叮当是使用 Python 2 编写的。于是我对 python-miio 进行了 Python 2 版本的移植，发布为 <a href="https://pypi.python.org/pypi/python2-miio/0.0.3" target="_blank" rel="external">python2-miio</a> 。为了避免两个版本的 <code>miio</code> 命令行工具冲突，我把 python 2 版本的 <code>miio</code> 更名为 <code>miio2</code> 。</p>
<p>插件的编写过程也很轻松，和写其他的叮当插件一样的套路，所以整个插件我只用了一个晚上的时间就写好了。如果你看过我之前写的一篇编写叮当插件的教程《<a href="/codes/how-to-write-dingdang-plugin/">手把手教你编写叮当机器人插件</a>》，那么阅读风扇声控插件的源码也不会很困难，这里就只放上源码链接：<a href="https://github.com/wzpan/dingdang-smart-mi-fan/blob/master/SmartMiFan.py%E3%80%82" target="_blank" rel="external">https://github.com/wzpan/dingdang-smart-mi-fan/blob/master/SmartMiFan.py。</a></p>
<p>最后就是插件的发布问题。考虑到这个插件比较私人——大部分用户并没有智米风扇，因此我并没有把它丢进 dingdang-contrib 中，而是单独创建了一个仓库来托管。对于需要使用这个插件的人，只需要将它放到个人的插件目录 /home/pi/.dingdang/custom 中，即可让该插件生效<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。这样的好处是无需改动 contrib 目录，也不会影响 contrib 目录的更新。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><code>custom</code> 目录的支持在叮当 v0.1.9 开始引进。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Comment.js：一个纯JS实现的静态站点评论系统]]></title>
    <link href="http://hahack.com/codes/comment-js/"/>
    <id>http://hahack.com/codes/comment-js/</id>
    <published>2017-07-02T12:48:07.000Z</published>
    <updated>2017-07-04T14:17:00.091Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>我的博客最早是使用 Disqus 来实现评论功能的。Disqus 被墙了之后，改成了多说。今年年初，多说也正式关闭了，于是我被逼着又开始寻找其他的替代评论系统。</p>
<p>我先是试用了网易云跟贴、畅言等几种类似的社会化评论系统。畅言要求站点必须备案，而我实在没有为了评论去申请备案的动力。网易云跟贴的管理后台上有很多不明觉厉的功能，但好像都没多大用处。最致命的问题是我不小心把我的站点绑定到了另一个网易账户，而不是我常用的微博账户。这样的话，我每次回贴就得退登到微博账户，要管理贴子的时候又得切回管理员账户，非常不方便。然而网易云跟贴并没有提供解绑的功能。于是我给他们提了需求，然而一直到现在都没有回复。再加上有了多说作为前车之鉴，我对国内的免费评论服务已经失去了信心。今天把A换成B，难以保证日后B也关闭了，被逼着又换到C，实在是懒得折腾下去啊。于是，我放弃了换用类似的评论系统的念头。</p>
<p>之后我找到了 <a href="https://github.com/posativ/isso" target="_blank" rel="external">isso</a> 项目，它是一个 Python 实现的开源评论服务。这个服务需要搭建在自己的服务器上。官方的简介简明扼要：“a Disqus alternative”。出于对 Python 的好感，我把站点的评论功能迁移到了 isso 。然而，我对 isso 也并不是很满意。首先它的功能其实也非常弱，不支持 Markdown 语法，不支持 Gravatar 头像，也没有一个像样的管理后台，搭建和配置的过程也比较费时，远达不到开箱即用的程度。再加上 isso 需要服务器运营，为了一个评论系统而去购买服务器确实太奢侈了。用了几个月后，我又萌生了换掉它的念头。</p>
<a id="more"></a>
<h2 id="项目介绍">项目介绍</h2>
<p>我的想法来源于一些基于 Github issue 的博客。其实 Github 的 issue 本身就是一个非常完善的评论系统，有完善的管理后台，灵活的通知设置，而且 Github 是开放 API 的。只要我能把 Github 的 issue 与博客的页面打通，把 issue 上的内容显示在我的博客上，然后在需要评论的时候点击跳转到 Github 的 issue 页，就实现了一个基本可用的评论系统了。</p>
<p>comment.js 就是基于这个想法实现的一个评论系统，它的核心代码只有 400 行左右，却能够用来实现评论会话和最新评论列表的两个功能。比起已有的社会化评论系统，它有如下几个优点：</p>
<ol>
<li>完善的评论管理系统。基于 issue 的评论，支持 Markdown ，支持 Gravatar。</li>
<li>开箱即用的邮件通知功能。Github 的邮件通知功能非常完善，不像 isso 那样还得配置邮件通知服务。</li>
<li>无需搭建后台。直接用现成的 issue 作为后端，不像 isso 那样还需要自己搭个后台，搞定数据库。</li>
<li>接入简单。获取评论会话和获取最新列表各自对应一个函数。</li>
<li>代码简单。这意味着你也可以很快上手脚本代码，对这个脚本进行定制。</li>
<li>除了 Github issue 之外，comment.js 也支持使用 OSChina issue 作为后端<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，即使 Github 被墙，也能通过修改参数迅速切换到其他备选站点，比起说关闭就关闭的评论服务可靠多了。</li>
</ol>
<ul>
<li>项目主页：<a href="https://github.com/wzpan/comment.js" target="_blank" rel="external">https://github.com/wzpan/comment.js</a></li>
<li>Demo
<ul>
<li><a href="http://wzpan.github.io/comment.js#comment-thread" target="_blank" rel="external">评论会话Demo</a></li>
<li><a href="http://wzpan.github.io/comment.js#recent-comments" target="_blank" rel="external">最新评论列表Demo</a></li>
</ul>
</li>
</ul>
<h2 id="接入方法">接入方法</h2>
<p>comment.js 依赖几个 JS 前端库：</p>
<ul>
<li>jQuery - 用于 Ajax 请求以及将评论内容插入到页面中。</li>
<li>markdown-js - Markdown 支持。</li>
<li>timeago.js - 时间文本格式化。</li>
<li>spin - 用于在加载评论数据前先绘制一个 loading 动画（可选）。</li>
</ul>
<h3 id="0-添加静态资源文件">0. 添加静态资源文件</h3>
<p>在页面中添加这些资源：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- stylesheet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"path_to_comment_css/comment.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- javascripts --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.js"</span>&gt;</span><span class="javascript">/script&gt;</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/markdown.js/0.5.0/markdown.min.js"</span>&gt;</span><span class="javascript">/script&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/timeago.js/3.0.2/timeago.min.js"</span>&gt;</span><span class="javascript"></span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"path_to_comment_js/comment.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="1-注册-oauth-app">1. 注册 OAuth App</h3>
<p>为了避免 API 被恶意滥用，Github API （以及 OSChina API）设定了一个<a href="https://developer.github.com/v3/#rate-limiting" target="_blank" rel="external">API调用频率限制</a>。为了提高频率限额，建议 [注册一个 Oauth App](Register a OAuth application](<a href="https://github.com/settings/applications/new" target="_blank" rel="external">https://github.com/settings/applications/new</a>)。</p>
<p>完成注册后，你将得到一个 <code>client id</code> 以及一个 <code>client_secret</code> ，先将这两个值记下来，后面我们会用到。</p>
<p>（提示：注册 App 的时候你可能会对 <code>Authorization callback URL</code> 这一项目感到困惑，一般填写你的站点地址即可。例如 <a href="http://hahack.com" target="_blank" rel="external">http://hahack.com</a> ）</p>
<h3 id="2-获取评论会话">2. 获取评论会话</h3>
<p>第一步，在页面中添加一个 DIV ，用于展示评论会话内容。</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"comment-thread"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二步（可选），如果希望在加载完数据前先展示一个loading动画，还可以添加一个用于动画的 DIV ：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"loading-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最后，调用 <code>getComments()</code> 方法，获取该页面对应的 issue 包含的所有评论，然后展示到我们指定的 DIV 中：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="keyword">var</span> opt = {</div><div class="line">       type: <span class="string">"github"</span>,</div><div class="line">       user: <span class="string">"wzpan"</span>,</div><div class="line">       repo: <span class="string">"comment.js"</span>,</div><div class="line">       no_comment: <span class="string">"No comments yet. Press the button and go to comment now!"</span>,</div><div class="line">       go_to_comment: <span class="string">"Go to comment"</span>,</div><div class="line">       issue_id: <span class="string">"1"</span>,</div><div class="line">       btn_class: <span class="string">"btn"</span>,</div><div class="line">       comments_target: <span class="string">"#comment-thread"</span>,</div><div class="line">       loading_target: <span class="string">"#loading-spin"</span>,</div><div class="line">       client_id: <span class="string">"xxxxxx"</span>,</div><div class="line">       client_secret: <span class="string">"xxxxxx"</span></div><div class="line">   };</div><div class="line">   getComments(opt);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li><code>type</code>: 要作为后端的站点。目前支持 <code>Github</code> 和 <code>OSChina</code> 。</li>
<li><code>user</code>: 您的 Github 用户名。</li>
<li><code>repo</code>: 您用作评论后端的仓库名。</li>
<li><code>no_comment</code>: 当没有评论时，展示的提示消息。</li>
<li><code>go_to_comment</code>: “去留言” 按钮的按钮文本。</li>
<li><code>issue_title</code>: 您当前页面对应的 issue 标题。也可以使用 <code>issue_id</code> ，二者只选其一。</li>
<li><code>issue_id</code>: 您当前页面对应的 issue id。也可以使用 <code>issue_title</code>，二者只选其一。</li>
<li><code>btn_class</code>: “去留言”按钮的 CSS 样式名。</li>
<li><code>comments_target</code>: 用于展示评论内容的容器。例如我们上面所写的 <code>comment-thread</code> DIV 。</li>
<li><code>loading_target</code>（可选）：用于展示 loading 动画的容器。例如我们上面所写的 <code>loading-spin</code> DIV 。</li>
<li><code>client_id</code>（可选但建议）:您注册的 OAuth App 的 client id。</li>
<li><code>client_secret</code>（可选但建议）：您注册的 OAuth App 的 client secret。</li>
</ul>
<p>效果参见本页面下方的留言区。</p>
<h3 id="3-获取最新评论列表">3. 获取最新评论列表</h3>
<p>评论列表用于获取你最近的若干条评论，效果可以参见 <a href="http://hahack.com" target="_blank" rel="external">站点首页</a> 右侧的最新留言区。</p>
<p>要获取最新评论列表的方法也大同小异。首先写一个 DIV 用于加载获取得到的评论列表数据：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"recent-comments"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后可以调用 <code>getRecentCommentsList()</code> 方法，获取最近评论列表并展示到指定的 DIV 中。</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="keyword">var</span> opt = {</div><div class="line">       type: <span class="string">"github"</span>,</div><div class="line">       user: <span class="string">"wzpan"</span>,</div><div class="line">       repo: <span class="string">"comment.js"</span>,</div><div class="line">       recent_comments_target: <span class="string">"#recent-comments"</span>,</div><div class="line">       count: <span class="number">5</span>,</div><div class="line">       client_id: <span class="string">"xxxxxx"</span>,</div><div class="line">       client_secret: <span class="string">"xxxxxx"</span></div><div class="line">   };</div><div class="line">   getRecentCommentsList(opt);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li><code>type</code>: 要作为后端的站点。目前支持 <code>Github</code> 和 <code>OSChina</code> 。</li>
<li><code>user</code>: 您的 Github 用户名。</li>
<li><code>repo</code>: 您用作评论后端的仓库名。</li>
<li><code>recent_comments_target</code>: 用于展示最新评论列表的容器。例如我们上面所写的 <code>recent-comments</code> DIV 。</li>
<li><code>count</code>: 列表的最大长度。</li>
<li><code>client_id</code>（可选但建议）:您注册的 OAuth App 的 client id。</li>
<li><code>client_secret</code>（可选但建议）：您注册的 OAuth App 的 client secret。</li>
</ul>
<h2 id="开发心得">开发心得</h2>
<p>下面照例总结下项目的开发心得。虽然整个项目只有几百行的代码，但这个过程中还是不可避免的遇到一些困难。</p>
<h3 id="关于选型和项目命名">关于选型和项目命名</h3>
<p>一开始的想法只是给 Hexo 写一个插件，让其能够实现评论功能。最理想的情况是类似 <a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 那样，npm install 一下，然后 _config.yml 里添加下配置就完事。通过阅读 Hexo 的文档后我发现 <a href="https://hexo.io/docs/helpers.html" target="_blank" rel="external">helper</a> 似乎比较适合用作这个目的：把核心功能写成一个 helper ，然后在模板文件里直接执行这个 helper ，得到的数据还能进一步再模板中调诸如 <a href="https://hexo.io/docs/helpers.html#markdown" target="_blank" rel="external">markdown</a> 等其他现成的 helper， 这样还能实现 Markdown 支持。于是我最初的项目仓库名叫做 hexo-helper-github-comment 。</p>
<p>等我实现了 <code>getComments()</code> 方法后，我发现我的想法是错误的：helper 只适用于同步执行的操作，不适合网络请求这种异步操作。这带来的问题就是模板文件里已经成功执行了 helper 了，也返回了数据，但此时 renderer 早已经完成了模板的渲染了，而异步返回的评论数据却不再能够被渲染。</p>
<p>之后我想在 NodeJS 中加入 jQuery，用 jQuery 来操纵 DOM ，而不再依赖 renderer 。但这个方案似乎也不可行。因为在模板文件中，DOM 还没有创建，jQuery 拿不到实际的 DOM 。</p>
<p>所以最终我改成了纯 JS 的方案，把请求的方式也从 request-promise 改成了 AJAX ，然后在模板文件中直接跑 JS ，让 JS 完成请求，此时的 DOM 是已创建的，可以使用 jQuery 来操纵页面。虽然这样做就不能直接用 Hexo 现成的 markdown helper 了，但由于是纯 JS 实现，这个库也就可以在任何静态站点中使用，变得更加通用了。于是我把仓库名改成了 github-comment 。</p>
<p>又后来，我准备开源的前一天，在微博上先公开了关于这个项目的信息。有些人也表示了 Github 将来也可能被墙的质疑。于是我花了几分钟时间，也加入了对 OSChina 的支持。这个仓库名似乎也不只是基于 Github 了，于是我又把仓库名改成了 comment.js 。</p>
<h3 id="关于取舍">关于取舍</h3>
<p>我最纠结的部分，在于要不要把评论框也写进来。</p>
<p>直接在页面中写评论，减少了页面的跳数，当然是一大收益。但这样做也有几个问题：</p>
<ol>
<li>功能可用性和项目的复杂度的取舍。Github 的编辑框其实包含了非常多的功能，例如支持拖拽的附件添加、表情、预览、快捷键等等，如果不把这些功能加进来，编辑框的功能就显得很鸡肋，远不如在 Github 中评论有趣；如果加进来，整个项目的代码就远不止 400 行这么简单了。</li>
<li>通用性和专用程度的取舍。为了避免 Github 单点问题，comment.js 还支持 OSChina 作为备选评论系统。加入 Github 的这些编辑功能，是否会影响对其他站点后端的兼容性又是个问题。</li>
<li>界面美观程度和版权的取舍。现在的评论会话界面几乎照搬了 Github 的样式，因为点击“去留言”按钮实际上直接跳到了 Github ，相当于为 Github 做了引流，给了一个大大的版权说明，也就没有了侵权的担忧。如果界面完全隔离了 Github，也隐藏了 Github 的版权信息，反而有点滥用平台的感觉<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</li>
</ol>
<p>有意思的是，当我刚发布 comment.js 的时候，我才发现几个月前已经有人做了一个类似的项目：<a href="https://imsun.github.io/gitment/" target="_blank" rel="external">gitment</a>，真是心有灵犀啊。这个项目与我的项目的最大区别就在于它实现了内置的编辑框，并且目前只支持 Github 。如果你认为评论框必不可少，那么建议使用 gitment；反之如果你觉得点击按钮跳到 Github 页面似乎也还能接受，担心 Github 单点问题，而且觉得保证代码的简单和通用性更重要的话，那么不妨使用 comment.js 。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>目前 OSChina 的 API 在浏览器端会出现 CORS 错误。我已经给 OSChina <a href="https://git.oschina.net/oschina/git-osc/issues/5843" target="_blank" rel="external">提交了工单</a>，待后台添加 CORS 支持后就可以使用 OSChina 作为后端。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>话说回来直接照搬界面确实不太好，后面我会对评论会话的UI进行调整，避免侵权。 <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/comment-js/" term="comment.js"/>
    <category scheme="http://hahack.com/tags/Disqus/" term="Disqus"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[手把手教你编写叮当机器人插件]]></title>
    <link href="http://hahack.com/codes/how-to-write-dingdang-plugin/"/>
    <id>http://hahack.com/codes/how-to-write-dingdang-plugin/</id>
    <published>2017-05-28T12:23:40.000Z</published>
    <updated>2017-07-07T15:39:13.682Z</updated>
    <content type="html"><![CDATA[<p><a href="http://hahack.com/codes/dingdang-robot-intro/" target="_blank" rel="external">叮当</a> 是一款可以工作在 Raspberry Pi 上的开源中文语音对话机器人/智能音箱项目，目的是让中国的Hacker们也能快速打造类似 Amazon Echo 的个性化的智能音箱。</p>
<p>由于叮当是完全开源的，编写插件来满足自己的个性化需求就成了使用叮当的最大乐趣。您可以自由地接入自己需要的服务，让叮当更好的为您服务。</p>
<p>这篇文章将一步步教你如何编写一个天气插件，并最终发布到 dingdang-contrib 中。</p>
<p>交互示例：</p>
<ul>
<li>用户：天气</li>
<li>叮当：深圳天气。今天：晴。最高气温：25～30摄氏度；明天：晴。26～31摄氏度；后天：小雨。最高气温：23～29摄氏度。</li>
</ul>
<a id="more"></a>
<h2 id="准备工作">准备工作</h2>
<h3 id="安装-dingdang-contrib">安装 dingdang-contrib</h3>
<p>首先需要确保您已安装了叮当的第三方插件库 <a href="https://github.com/dingdang-robot/dingdang-contrib" target="_blank" rel="external">dingdang-contrib</a> ：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/pi/.dingdang</div><div class="line">git clone http://github.com/wzpan/dingdang-contrib contrib</div><div class="line">pip install -r contrib/requirements.txt</div><div class="line"><span class="built_in">sudo</span> apt-get install sox  <span class="comment"># 用于播放音乐</span></div><div class="line"><span class="built_in">sudo</span> apt-get install libsox-fmt-mp3 <span class="comment"># 添加 sox 的 mp3 格式支持</span></div></pre></td></tr></table></figure></p>
<p>接下来可以在这个插件库中开发您的插件。</p>
<h3 id="了解天气-api">了解天气 API</h3>
<p>要实现天气预报功能，少不了要了解一下天气 API 。通过搜索，我找到了一款免费的天气 API —— <a href="https://www.seniverse.com/" target="_blank" rel="external">心知天气</a> 。心知天气提供了天气、空气质量、生活指数等多种数据信息。其中<a href="https://www.seniverse.com/doc#daily" target="_blank" rel="external">逐日天气预报</a>是免费的，可以利用来实现天气预报查询插件。</p>
<p>选择心知天气的另一个理由是他们的 API 文档非常详细，还提供了多种语言的 <a href="https://github.com/seniverse/seniverse-api-demos" target="_blank" rel="external">demo</a> <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>连 common-lisp 都有，点个赞！ </span></span></span> 。下面是官方提供的一个 Python 版的示例：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> utils.const_value <span class="keyword">import</span> API, KEY, UNIT, LANGUAGE</div><div class="line"><span class="keyword">from</span> utils.helper <span class="keyword">import</span> getLocation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchWeather</span><span class="params">(location)</span>:</span></div><div class="line">    result = requests.get(API, params={</div><div class="line">        <span class="string">'key'</span>: KEY,</div><div class="line">        <span class="string">'location'</span>: location,</div><div class="line">        <span class="string">'language'</span>: LANGUAGE,</div><div class="line">        <span class="string">'unit'</span>: UNIT</div><div class="line">    }, timeout=<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> result.text</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    location = getLocation()</div><div class="line">    result = fetchWeather(location)</div><div class="line">    print(result)</div></pre></td></tr></table></figure></p>
<p>其中，<code>API</code> 是 API 的地址，逐日天气预报的 API 地址是 <a href="https://api.seniverse.com/v3/weather/daily.json" target="_blank" rel="external">https://api.seniverse.com/v3/weather/daily.json</a> ；<code>KEY</code> 则是心知天气的 API 密钥，每个注册账户都可以得到一个密钥；<code>location</code> 是城市名，例如深圳就是 <code>深圳</code> 或者 <code>shenzhen</code>；而 <code>language</code> 和 <code>unit</code> 分别表示语言和单位，由于是可选参数，这里不做详细介绍。有兴趣的朋友请阅读官方文档。</p>
<p>整段代码也没有什么特别好说的：先是定义了一个 <code>fetchWeather</code> 函数，该函数使用 requests 模块发起 API 请求，请求超时设置为 1 秒。之后调用这个函数并打印返回的结果。</p>
<h2 id="编写天气插件">编写天气插件</h2>
<p>了解了心知天气的 API 后，编写插件就是一件水到渠成的事情了。</p>
<p>编写插件主要要考虑以下几个问题：</p>
<ul>
<li>插件应该使用哪些关键词作为用户指令？</li>
<li>需要暴露哪些配置项？</li>
<li>如何处理用户的输入并得到需要的信息？</li>
</ul>
<p>下面我们将在编写这个插件的过程中解决这些问题。</p>
<h3 id="新建插件文件">新建插件文件</h3>
<p>首先在 <code>~/.dingdang/contrib</code> 中创建一个新的文件 <a href="http://Weather.py" target="_blank" rel="external">Weather.py</a> ：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8-*-                                                                                                                                                         # 天气插件</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Standard module stuff                                                                                                                                                     WORDS = []</span></div><div class="line">SLUG = <span class="string">"SLUG"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(text, mic, profile, wxbot=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Responds to user-input, typically speech text</div><div class="line">    Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">        mic -- used to interact with the user (for both input and output)</div><div class="line">        profile -- contains information related to the user (e.g., phone</div><div class="line">        number)</div><div class="line">        wxbot -- wechat bot instance</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        Returns True if the input is related to weather.</div><div class="line">        Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>这个是插件的模板文件。一个标准的插件至少包含 <code>WORDS</code>，<code>SLUG</code>，<code>isValid</code> 函数和 <code>handle</code> 函数四个部分。下面将一一介绍。</p>
<h3 id="关键词设置">关键词设置</h3>
<p><code>WORDS</code> 是一个关键词列表，用于存储这个插件的指令关键词（的拼音）。当 Active Listening 的 SST 引擎设置成离线引擎时，这里设置的关键词会被自动添加到 PocketSphinx 的语音指令集中，从而使得 PocketSphinx 能识别出这个指令。</p>
<p><code>WORDS</code> 的另一个作用是作为是否插件的判断标准。如果 contrib 目录中的某个 <code>.py</code> 文件没有 <code>WORDS</code> 变量，那么这个文件就会被当成无效插件，而不会响应它。</p>
<p>与关键词有关的还有 <code>isValid</code> 函数，该函数用于判断用户输入的指令是否要用这个插件来处理。如果 <code>isValid</code> 返回结果为 <code>true</code> ，<code>handle</code> 函数就会被调用，以处理指令。对于天气插件，关键词可以设置为天气，即只要包含“天气”的输入都使用本插件做处理。因此，可以将 <code>WORDS</code> 和 <code>isValid</code> 函数改写成：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">WORDS = [<span class="string">"TIANQI"</span>]</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        Returns True if the input is related to weather.</div><div class="line">        Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="string">u"天气"</span> <span class="keyword">in</span> text</div></pre></td></tr></table></figure></p>
<h3 id="slug-设置">SLUG 设置</h3>
<p><code>SLUG</code> 是该插件的标识符，它主要用作在 <code>profile.yml</code> 中标识该插件的配置头。例如，对于天气插件，可以设置 SLUG 为 “weather”，</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SLUG = <span class="string">'weather'</span></div></pre></td></tr></table></figure></p>
<p>那么在 profile.xml 中如果要添加天气插件的配置，就应该以 <code>weather</code> 字段开头添加配置信息：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="label">weather:</span></div><div class="line">   配置项<span class="number">1</span>：值</div><div class="line">   配置项<span class="number">2</span>：值</div></pre></td></tr></table></figure></p>
<p>每一个插件都有一个默认的可选配置项 <code>enable</code>，用来决定是否开启或关闭这个插件。默认值为 true ，即开启该插件。</p>
<h3 id="handle-函数实现">handle 函数实现</h3>
<p>接下来需要实现 <code>handle()</code> 函数。</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(text, mic, profile, wxbot=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Responds to user-input, typically speech text</div><div class="line">    Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">        mic -- used to interact with the user (for both input and output)</div><div class="line">        profile -- contains information related to the user (e.g., phone</div><div class="line">        number)</div><div class="line">        wxbot -- wechat bot instance</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>这个函数接收四个参数：</p>
<ul>
<li><code>text</code> 是STT识别到的用户指令；</li>
<li><code>mic</code> 是麦克风和喇叭模块，最常用的是通过调用 <code>mic.say()</code> 函数来让喇叭说话；</li>
<li><code>profile</code> 是用户配置信息，它是一个字典，记录了 <code>~/.dingdang/profile.yml</code> 的全部内容；</li>
<li><code>wxbot</code> 是一个微信机器人实例，可以利用它给用户发送微信消息。<a href="">Camera</a> 插件提供了通过微信发送照片给用户的例子。</li>
</ul>
<p>我们可以把心知的 Demo 给出的 <code>fetchWeather</code> 函数做一点调整，放进代码中方便复用：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_weather</span><span class="params">(api, key, location)</span>:</span></div><div class="line">    result = requests.get(api, params={</div><div class="line">    <span class="string">'key'</span>: key,</div><div class="line">        <span class="string">'location'</span>: location</div><div class="line">    }, timeout=<span class="number">3</span>)</div><div class="line">    res = json.loads(result.text, encoding=<span class="string">'utf-8'</span>)</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure></p>
<p>显然，<code>KEY</code> 和 <code>location</code> 应该作为用户的配置项，允许用户在配置文件中进行设置。因此我们可以在 profile.yml 配置文件中添加如下配置：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 天气</span></div><div class="line"><span class="preprocessor"># 使用心知天气的接口</span></div><div class="line"><span class="preprocessor"># https://www.seniverse.com/</span></div><div class="line">weather:</div><div class="line">    key: <span class="string">'etxzx9abupxplhic'</span> # 心知天气<span class="constant"> API </span>Key</div><div class="line">    location: <span class="string">'深圳'</span></div></pre></td></tr></table></figure></p>
<p>接下来在 <code>handle</code> 函数中调用 <code>fetch_weather</code> 函数，得到天气信息：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(text, mic, profile, wxbot=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Responds to user-input, typically speech text</div><div class="line">    Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">        mic -- used to interact with the user (for both input and output)</div><div class="line">        profile -- contains information related to the user (e.g., phone</div><div class="line">        number)</div><div class="line">        wxbot -- wechat bot instance</div><div class="line">    """</div><div class="line">    logger = logging.getLogger(__name__)</div><div class="line">    <span class="comment"># get config                                                                                                                                                                   if 'weather' not in profile or \</span></div><div class="line">       <span class="keyword">not</span> profile[SLUG].has_key(<span class="string">'key'</span>) <span class="keyword">or</span> \</div><div class="line">       <span class="keyword">not</span> profile[SLUG].has_key(<span class="string">'location'</span>):</div><div class="line">        mic.say(<span class="string">'天气插件配置有误，插件使用失败'</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    key = profile[SLUG][<span class="string">'key'</span>]</div><div class="line">    location = profile[SLUG][<span class="string">'location'</span>]</div><div class="line">    WEATHER_API = <span class="string">'https://api.seniverse.com/v3/weather/daily.json'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        weather = fetch_weather(WEATHER_API, key, location)</div><div class="line">        logger.debug(<span class="string">"Weather report: "</span>, weather)</div><div class="line">        <span class="keyword">if</span> weather.has_key(<span class="string">'results'</span>):</div><div class="line">            daily = weather[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'daily'</span>]</div><div class="line">            day_text = [<span class="string">u'今天'</span>, <span class="string">u'明天'</span>, <span class="string">u'后天'</span>]</div><div class="line">            responds = <span class="string">u'%s天气：'</span> % location</div><div class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> range(len(day_text)):</div><div class="line">                responds += <span class="string">u'%s：%s，%s到%s摄氏度。'</span> % (day_text[day], daily[day][<span class="string">'text_day'</span>], daily[day][<span class="string">'low'</span>], daily[day][<span class="string">'high'</span>])</div><div class="line">            mic.say(responds)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            mic.say(<span class="string">'抱歉，我获取不到天气数据，请稍后再试'</span>)</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        logger.error(e)</div><div class="line">        mic.say(<span class="string">'抱歉，我获取不到天气数据，请稍后再试'</span>)</div></pre></td></tr></table></figure></p>
<p>完成后，可以重启下叮当，看看插件是否能正常工作。</p>
<h2 id="发布插件">发布插件</h2>
<p>插件正常工作后，可以将该插件发布到 <a href="https://github.com/dingdang-robot/dingdang-contrib" target="_blank" rel="external">dingdang-contrib</a> ，让更多人用上您的插件。</p>
<p>首先先访问 <a href="https://github.com/dingdang-robot/dingdang-contrib" target="_blank" rel="external">dingdang-contrib 的 Github 主页</a> ，点击右上角的 【fork】 按钮，将仓库 fork 到自己的账户。如果之前已经 fork 过，这一步可以跳过。</p>
<p>fork 完仓库后，在您的账户下也会有一个 dingdang-contrib 项目，点击绿色的 【Clone or download】 按钮，记下新的仓库的地址。</p>
<p><img src="/images/how-to-write-dingdang-plugin/fork-repo.png" alt="复制新的仓库地址"></p>
<p>之后在树莓派中执行如下命令，添加新的仓库地址：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.dingdang/contrib</div><div class="line">git remote add mine 新的仓库地址</div></pre></td></tr></table></figure></p>
<p>将新建的插件提交推送到您的 dingdang-contrib 仓库中：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add Weather.py</div><div class="line">git commit -m <span class="string">"新增天气插件"</span></div><div class="line">git push -u mine master</div></pre></td></tr></table></figure></p>
<p>完成后访问您的 dingdang-contrib 仓库主页，可以看到一个创建 pull request 的提示：</p>
<p><img src="/images/how-to-write-dingdang-plugin/pull-request-hint.png" alt="创建pull request的提示"></p>
<p>点击 【compare and pull request】 按钮，进入 pull request 创建页面，申请将您的改动合并到 dingdang-contrib 项目中：</p>
<p><img src="/images/how-to-write-dingdang-plugin/pull-request.png" alt="创建一个 pull request"></p>
<p>在里头认真填写插件的用途、使用示例和配置项。完成后点击 【Create pull requset】 ，完成创建，等待 <a href="https://github.com/dingdang-robot" target="_blank" rel="external">dingdang-robot</a> 组织的审核。</p>
<p><img src="/images/how-to-write-dingdang-plugin/pull-request-created.png" alt="创建一个 pull request"></p>
<p>一旦审核通过，您的插件就发布成功了。</p>
<p>为了让更多人了解您的插件的用途，还应该到 <a href="https://github.com/dingdang-robot/dingdang-contrib/wiki" target="_blank" rel="external">dingdang-contrib 的 Wiki</a> 中添加该插件的用途。先在首页中增加一条插件记录：</p>
<p><img src="/images/how-to-write-dingdang-plugin/wiki-home-edit.png" alt="增加插件记录"></p>
<p>完成后首页就增加了您创建的插件的记录：</p>
<p><img src="/images/how-to-write-dingdang-plugin/wiki-home.png" alt="增加插件记录"></p>
<p>点击该插件的链接，进入插件详情页创建页面，填入和刚刚创建 pull request 时相同的内容，即插件的用途、使用示例和配置项即可（也可以根据需求增加更多信息）。</p>
]]></content>
    <category scheme="http://hahack.com/tags/dingdang/" term="dingdang"/>
    <category scheme="http://hahack.com/tags/Raspberry-Pi/" term="Raspberry Pi"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[叮当：一个开源的中文智能音箱项目]]></title>
    <link href="http://hahack.com/codes/dingdang-robot-intro/"/>
    <id>http://hahack.com/codes/dingdang-robot-intro/</id>
    <published>2017-05-22T05:43:21.000Z</published>
    <updated>2017-07-16T01:57:02.390Z</updated>
    <content type="html"><![CDATA[<p>这个项目其实来源于我生活中的一个需求：我每天晚上都会去厨房做一个面包当明天的早餐，当我把用料按顺序准备好放进面包机时，我需要准确预约到明天早上我吃早餐的时间。然而，几乎每次在这个时候我都没有带手机在身边，而是都放在客厅里充电，这时只能跑去客厅看时间。虽然厨房到客厅只有几步之遥，但自己又是懒癌患者，每天都要这么来回奔波就觉得很不方便。要解决这个问题当然有很多种方法，比如直接买个小时钟放在厨房。不过我更希望“连看都不用看”，直接有人告诉我时间。所以，我需要一个像 Amazon Echo 那样的智能音箱。</p>
<p>然而，不论是 Amazon Echo 、Google Home 还是微软 Cortana 音箱，在国内的使用都是个问题。虽然国内也有类似的智能音箱产品，但我没有用过这些产品，不知道可定制性如何。比如，如果我需要开发个功能让它告诉我某种面包的配方是什么，这些产品就不一定能做到了。考虑再三，我决定自己动手写一个。整个项目用了差不多三个星期的业余零碎时间。</p>
<p>先放上项目主页：<a href="http://dingdang.hahack.com" target="_blank" rel="external">http://dingdang.hahack.com</a></p>
<p>下面分享一下我在开发这个项目过程中的心得。</p>
<a id="more"></a>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>如果您在使用微信或者其他客户端程序阅读本文时发现视频无法播放，请改为在浏览器中打开。</p>
</div></p>
<h2 id="硬件">硬件</h2>
<p>首先要解决的是硬件问题。我选择在 Raspberry Pi 上开发。于是我买了块 Raspberry Pi 三代主板。麦克风和音响方面，出于美观的目的，买了个自带音响的 USB 全向会议麦克风。整套设备看起来就像这样：</p>
<p><img src="/images/dingdang-robot-intro/devices1.jpg" alt="简化体"></p>
<p>后面觉得这个麦克风自带的音响音质太一般了，所以我又外接了一个小音箱。然后再插了一个摄像头，用来实现拍照功能。最终的完全体进化成了这样：</p>
<p><img src="/images/dingdang-robot-intro/devices2.jpg" alt="完全体"></p>
<p>硬件有了，接下来就得开始写软件了。主要的框架借鉴了 <a href="jasperproject.github.io">Jasper 项目</a>，并加入了我自己的定制和想法。这里说说一些有意思的部分。</p>
<h2 id="指令接收">指令接收</h2>
<p>智能音箱要解决的一个最重要的问题就是如何接收指令。这里头主要涉及两个问题：</p>
<ol>
<li>被动唤醒（Passive Listening），即“什么时候开始听”。这个阶段只监听唤醒词。当听到唤醒词时，进入主动聆听。</li>
<li>主动聆听（Active Listening），即“什么时候结束听”。这个阶段主动聆听用户的任何语音指令，然后对听到的内容进行分析处理。</li>
</ol>
<p>被动唤醒阶段的基本策略是：每次以 16000 的采样率录制 1024 个采样作为一个采样集，然后对采样集进行信号强度估计，当某个采样集信号强度大于一个阈值时，就认为可能接受到了指令。然后持续录制多 1 秒时间，再转交给语音识别模块。当语音识别模块认为是唤醒词时，进入主动聆听阶段。</p>
<p>主动聆听的策略与被动唤醒基本相似，每次以 16000 的采样率录制 1024 个采样作为一个采样集，然后对采样集进行信号强度估计，当某个采样集信号强度低于一个阈值约 1 秒的时间时，就认为用户已说完了指令。当然还要考虑环境吵杂，一直处于聆听的可能。因此可以再加一个超时保护，超过 12 秒就结束聆听。</p>
<h2 id="语音处理">语音处理</h2>
<p>说说STT（语音识别）引擎和TTS（文本转文本）引擎的选择。由于被动唤醒会试图识别所有听到的内容，出于隐私保护的目的，应该使用离线的语音识别引擎，因此我选择的是 <a href="https://github.com/cmusphinx/pocketsphinx" target="_blank" rel="external">PocketSphinx</a> 。而对于主动聆听，由于是在唤醒阶段才会进行转换，进入主动聆听前会有蜂鸣提示，用户也会清楚此时叮当正在听他们说话，相对来说隐私泄露的可能性就比较低，因此我选择的是在线的百度 STT 语音识别服务，也省下了扩展语音识别模型的工夫，有利于更好地实现插件可扩展。TTS 引擎方面同样也先支持了百度的语音合成。</p>
<p>在实际测试中，PocketSphinx 的识别出乎意料的好。由于我的离线指令集只有几个候选唤醒词，PocketSphinx 对这些唤醒词的识别非常灵敏，甚至有时候其他声音也可能被误当成唤醒词而唤醒叮当。但即使被意外唤醒了，不去理会叮当就可以了。</p>
<p>相比之下，百度的语音识别就比较迟钝了。有时候明明我发音很清晰了，还是会识别成另外的含义。通过在百度的语音识别平台<a href="https://github.com/wzpan/dingdang-robot/wiki/configuration#%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%87%86%E7%A1%AE%E5%BA%A6" target="_blank" rel="external">上传自定义的语音识别词库</a> 可以提高识别的准确率。另外，由于我用的是 Restful API，网速比较差的时候响应也比较慢。我在家用的是 10M 带宽的网络，反应速度还算可以接受。我准备后面尝试接入更多的语音识别平台，看看识别速度和准确度方面能否有所提升。</p>
<p>下面这个视频是我与叮当对话的演示。我把唤醒词设置成了“小梅”：</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://www.miaopai.com/show/-yeEBNJlvrQ-UNZzaglxr2s9JQU8TZNy.htm" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<center>
<embed src="http://player.youku.com/player.php/sid/XMjg0OTQ1OTkxNg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</center><br>
<p>一个问题是当回答内容比较长（比如问叮当当天的新闻）时，合成语音的耗时会变得很长，给人的感受是叮当的响应很慢。所以我加了个 <code>read_long_content</code> 的选项。当内容过长时，改成发送到用户的邮箱或者微信。下面这段音频是一个例子：</p>
<p><i class="fa fa-music"></i><a href="http://onmw7y6f4.bkt.clouddn.com/%E9%95%BF%E5%86%85%E5%AE%B9%E5%8F%91%E5%BE%AE%E4%BF%A1.mp3" target="_blank"> 长内容发微信 (270.37KB) </a></p>
<p><img src="/images/dingdang-robot-intro/long_content.png" alt="微信接收长内容"></p>
<h2 id="插件">插件</h2>
<p>叮当最好玩的部分当然就是玩插件了，通过写插件可以让叮当接入各种各样的服务，完成各种各样的事情。我在叮当里也内置了几个插件<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。为了方便用户扩展，我把 <code>~/.dingdang/contrib</code> 设定为第三方插件目录，允许让用户在里头编写插件并提交到 <a href="https://github.com/wzpan/dingdang-contrib" target="_blank" rel="external">dingdang-contrib</a> 项目共享。</p>
<ul>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#time" target="_blank" rel="external">Time</a>：顾名思义就是询问时间的，先满足我的个人需求。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#echo" target="_blank" rel="external">Echo</a>：简单的回声/传话功能。当接入微信时，可以利用这个功能实现远程给家里发语音消息。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#email" target="_blank" rel="external">Email</a>：询问邮箱中有多少未读邮件。在这之前用户需要先配置好邮箱账户。另外，叮当还有个定期消息检查机制，每 30 秒会执行一次邮件检查，如果有未读邮件，将会在当次运行会话中给用户语音播报一次。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#camera" target="_blank" rel="external">Camera</a>：用于调起摄像头拍照（如果安装了摄像头的话）。如果接入了邮箱或微信，照片将发送到用户的邮箱或微信中（选择哪种取决于配置中 prefers_email 的值）。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#unclear" target="_blank" rel="external">Unclear</a>：用于处理未知的问题。如果接入了对话机器人（例如图灵机器人），将转交给对话机器人应答；否则将给予类似 “我没听清楚” 这样的回复。</li>
</ul>
<p>下面这个视频是 Camera 插件的演示<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://v.youku.com/v_show/id_XMjc3OTc0MDczMg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<center>
<embed src="http://player.youku.com/player.php/sid/XMjc3OTc0MDczMg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</center><br>
<p>另外，如果接入了微信，还可以让叮当安静地拍一张家里的照片，而不发出任何声音。下面这个视频演示了如何使用微信与家里的机器人交互，包括远程控制拍照。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://v.youku.com/v_show/id_XMjc3OTcyOTE1Mg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<center>
<embed src="http://player.youku.com/player.php/sid/XMjc3OTcyOTE1Mg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</center><br>
<p>这对于需要远程监控家里的情况的用户而言就非常方便了，比如家里有小孩的情况。</p>
<h2 id="音乐播放">音乐播放</h2>
<p>既然是智能音箱，当然少不了播放音乐的功能。所以我额外写了个播放网易云音乐的插件 <a href="https://github.com/wzpan/dingdang-contrib/wiki/neteasemusic" target="_blank" rel="external">NetEaseMusic</a> 。出于版权考虑，并不集成进官方插件中，而是放进 dingdang-contrib 里头。</p>
<p>这个插件的实现比较复杂。普通的插件接受到指令，响应完就退出了。而为了能支持各种指令控制音乐播放，这个插件在接收到播放控制指令后并不退出插件，而是进入一个播放器模式，这个模式主动聆听得到的指令只会在播放控制指令集中匹配，其他的插件指令都不起作用。只有当用户要求退出播放时才回到普通模式。NetEaseMusic 的播放控制指令如下：</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>相同指令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>播放音乐</td>
<td>-</td>
<td>进入音乐播放模式。在音乐播放模式下，其他的插件功能将不可用。</td>
</tr>
<tr>
<td>下一首</td>
<td>切歌, 下一首歌, 下首歌</td>
<td>切换到下一首歌。如果没有下一首歌，就回到列表中第一首歌</td>
</tr>
<tr>
<td>上一首</td>
<td>上一首歌，上首歌</td>
<td>切换到上一首歌。如果没有上一首歌，就跳到列表中最后一首歌</td>
</tr>
<tr>
<td>大声点</td>
<td>大点声，大声</td>
<td>调高播放音量</td>
</tr>
<tr>
<td>小声点</td>
<td>小点声，小声</td>
<td>降低播放音量</td>
</tr>
<tr>
<td>随机播放</td>
<td>-</td>
<td>随机播放列表中的音乐</td>
</tr>
<tr>
<td>顺序播放</td>
<td>-</td>
<td>顺序播放列表中的音乐</td>
</tr>
<tr>
<td>暂停播放</td>
<td>-</td>
<td>暂停音乐的播放</td>
</tr>
<tr>
<td>播放</td>
<td>继续</td>
<td>继续音乐的播放</td>
</tr>
<tr>
<td>榜单</td>
<td>-</td>
<td>播放推荐榜单</td>
</tr>
<tr>
<td>歌单</td>
<td>-</td>
<td>播放用户的歌单（如果有多张，将只播放第一张）</td>
</tr>
<tr>
<td>结束播放</td>
<td>退出播放，停止播放</td>
<td>退出音乐播放模式。</td>
</tr>
<tr>
<td>搜索</td>
<td>查找</td>
<td>搜索歌曲/歌手。将自动播放搜索结果。</td>
</tr>
<tr>
<td>什么歌</td>
<td>-</td>
<td>正在播放的是什么歌</td>
</tr>
</tbody>
</table>
<p>实现这个插件的过程中还参考了 Vellow 的 MusicBox 项目<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>以及 yaphone 的 <a href="https://github.com/yaphone/RasWxNeteaseMusic" target="_blank" rel="external">RasWxNeteaseMusic</a> 。为了方便重用，我把 MusicBox 的核心 API 抽离了出来封成了一个 <a href="https://github.com/wzpan/MusicBoxApi" target="_blank" rel="external">MusicBoxApi 库</a> 。比较坑爹的是就在我准备发布叮当的前几天，老的获取音乐地址的方式彻底不能用了，而<a href="https://github.com/darknessomi/musicbox/wiki/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%96%B0%E7%89%88WebAPI%E5%88%86%E6%9E%90%E3%80%82" target="_blank" rel="external">新的接口</a>批量获取的地址不知道为什么是乱序的，于是我只能在播放每首歌前都调用一下新版的获取地址的 POST 接口，又增加了一点响应时间<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>。</p>
<p>下面这段音频是使用叮当控制音乐播放的演示：</p>
<p><i class="fa fa-music"></i><a href="http://onmw7y6f4.bkt.clouddn.com/%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90.mp3" target="_blank"> 播放音乐 (2.3MB) </a></p>
<p>完成了音乐播放功能后，叮当的好玩程度提高了很多。以前要听歌，至少得把电脑或者手机打开。现在只需要喊一声叫叮当播放歌曲就可以了。想换歌、搜索歌曲、调节音量都是说句话就搞定的事情，生活幸福指数大幅提升 <code>^_^</code> 。</p>
<h2 id="总结和后续">总结和后续</h2>
<p>对于有 Coding 能力的 Hacker 而言，自己动手做一个智能音箱，不仅可以当做业余练手项目，还可以自由地定制硬件模块，并实现自己需要的各种功能，这远比直接购买一个 Amazon Echo 有趣得多。</p>
<p>后面我计划做的事情有：</p>
<ul>
<li>尝试接入更多的 STT / TTS 服务，优化叮当的响应时间；</li>
<li>结合 NLP 技术实现更复杂的指令识别，比如提醒功能；</li>
<li>加入人体感应模块等传感器，把它变得更加智能。</li>
</ul>
<p>更重要的，我更希望能有其他有兴趣的朋友参与进来，一同开发完善这个智能音箱项目。我相信，这种个性化服务的产品本身就应该是完全可定制的。而您的加入可以使叮当变得更智能！</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>完整的插件信息可以在<a href="https://github.com/wzpan/dingdang-robot/wiki/plugins" target="_blank" rel="external">这里</a>找到。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>能支持拍照的智能音箱估计没多少吧？这就是自己开发智能音箱的好处，想接什么模块就接什么模块。想实现什么功能就实现什么功能。 <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p>Github 上搜索关键词“musicbox” 可以找到好几个类似的仓库，其实都是基于 Vellow 最初的那个版本的修改。我实际上参考的是 <a href="https://github.com/darknessomi/musicbox/wiki" target="_blank" rel="external">darknessomi 的版本</a> ，但我认为最大的功劳还是该给 Vellow 。 <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p>如果您知道如何批量获取播放地址且保持原来的列表顺序，还请告诉我方法。 <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/dingdang/" term="dingdang"/>
    <category scheme="http://hahack.com/tags/Raspberry-Pi/" term="Raspberry Pi"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（五）：二进制大文件的版本控制]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-5/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-5/</id>
    <published>2017-04-19T09:22:53.000Z</published>
    <updated>2017-05-22T11:38:14.104Z</updated>
    <content type="html"><![CDATA[<p>毫无疑问，Git 非常适合用于代码文件的版本控制。对于纯代码仓库，由于每次实际提交都是增量内容，即使仓库经历了几十次提交，整个仓库的大小往往都不会大幅增加。</p>
<p>而对于存在二进制文件的仓库，情况就变了：Git 并不能很好地支持二进制文件的增量提交，每次更新一个二进制文件，就相当于把这份文件的完整内容再往仓库里扔。久而久之，这个仓库就会变得非常大，影响代码拉取速度。</p>
<p>举一个实际的例子，为了加快应用的构建速度，我们团队的框架先会编译成 SDK ，再交由上层构建应用。框架 SDK 也是一个独立的 Git 仓库，里头包含了大量的二进制包：</p>
<p><img src="/images/enterprise-class-git-version-control-5/framework.png" alt="Framework SDK"></p>
<p>由于框架也有多个分支，每个分支的迭代速度比较快，SDK 仓库的体积在三个月的时间内就膨胀到了 1G 。<a id="more"></a></p>
<p><img src="/images/enterprise-class-git-version-control-5/before.png" alt="改造前的framework仓库"></p>
<p>如此庞大的仓库体积让第一次拉代码的同事叫苦不迭。一次全新的 clone ，即使拉取速度达到了 5.01 MB/s，在 framework 这个模块上就需要花上大约 7 分钟的时间：</p>
<p><img src="/images/enterprise-class-git-version-control-5/http-clone.png" alt="HTTP拉取仓库"></p>
<p>当很多人同时拉代码时，还有很大概率因为 HTTP 超时而拉取失败：</p>
<p><img src="/images/enterprise-class-git-version-control-5/fail.png" alt="HTTP超时"></p>
<p>为了解决这个问题，我先后尝试了几种方案。</p>
<h2 id="方案一：改用-ssh">方案一：改用 SSH</h2>
<p>第一个思路非常 intuitive ：既然 HTTP 的拉取不稳定，那改成 SSH 如何呢？SSH 的长连接总比 HTTP 稳定吧？</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git remote remove origin  <span class="comment"># 删除原来的http仓库地址</span></div><div class="line"><span class="variable">$ </span>git remote add origin git<span class="variable">@your</span>-site.<span class="symbol">com:</span>your-group/your-repo.git  <span class="comment"># 改成新的ssh仓库地址</span></div></pre></td></tr></table></figure></p>
<p>这个思路被证实是有效的。通过修改这几个模块的仓库地址为 SSH ，仓库的拉取成功率提升了很多，出现 RPC Failed 的情况也变少了。</p>
<p>然而，这种方案依然无法解决拉取速度慢的问题，完整的拉取该模块的耗时并不比 HTTP 方式快（甚至可能更慢）：</p>
<p><img src="/images/enterprise-class-git-version-control-5/ssh-clone.png" alt="SSH拉取仓库"></p>
<p>另外，这种方式要求每个人都配好 SSH Keys ，否则拉取仓库时也会直接报错。这对于刚接触 Git 的同事而言又增加了一点 cognitive load 。</p>
<h2 id="方案二：单分支克隆">方案二：单分支克隆</h2>
<p>第二个思路是在初次拉取的时候不完整克隆整个工程，而是只克隆一个分支，这样也能减少 N 倍的时间。Git 允许带上 <code>--single-branch -b &lt;分支名&gt;</code> 选项，指定只拉取某一分支：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">$ git clone --single-branch -b &lt;分支名&gt;</span> <span class="symbol">http:</span>/<span class="regexp">/your-site.com/your</span>-group/your-repo.git</span></div></pre></td></tr></table></figure></p>
<p>用这种方法确实减少了一定的时间，但耗时依然可能很长。以我们的框架 SDK 仓库为例，单纯拉一个 master_dev 分支也要 3 分钟左右的时间。</p>
<p><img src="/images/enterprise-class-git-version-control-5/single-branch-clone.png" alt="单分支克隆"></p>
<p>没有数量级别的减少，也就意味着不久之后单个分支的拉取时间也会超过现在整个仓库的完整克隆时间。</p>
<h2 id="方案三：浅克隆">方案三：浅克隆</h2>
<p>大部分人使用 SDK 时并不需要检出历史版本，对这些人而言，只需要拿到需要的一个快照就可以满足构建需求了。因此方案三就是限定克隆时的深度来加快拉取速度。Git 允许带上 <code>--depth &lt;深度&gt;</code> 来指定拉取深度。例如只拉取分支最新的快照：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">$ git clone --single-branch -b &lt;分支名&gt;</span> --depth <span class="number">1</span> <span class="symbol">http:</span>/<span class="regexp">/your-site.com/your</span>-group/your-repo.git</span></div></pre></td></tr></table></figure></p>
<p>由于只拉取最新快照，用这种方式的拉取速度就快了很多。以我们的框架 SDK 仓库为例，拉 master_dev 最新的快照只需要不到 6 秒的时间。</p>
<p><img src="/images/enterprise-class-git-version-control-5/shallow-clone.png" alt="浅克隆"></p>
<p>浅克隆虽然能够解决代码拉取的问题，但可想而知这样拉取下来的仓库是不完整的，它缺失了所有历史记录，也不能在这个仓库上提交新的内容。对于框架的开发人员，为了能够提交新内容，依然需要花长时间去克隆完整的仓库。因此浅克隆依然不是一个完美的方案。</p>
<h2 id="方案四：使用-git-lfs">方案四：使用 Git-LFS</h2>
<p>虽然 Git 本身并不能很好地支持二进制大文件的版本控制，但幸运的是已经出现了一些扩展能够帮助 Git 胜任这些工作。我所选择的扩展就是由 Github 团队开发的 <a href="https://git-lfs.github.com" target="_blank" rel="external">Git-LFS</a> 。</p>
<p>Git-LFS 的原理并不复杂：大文件不再支持添加到仓库中，而是存储到另外的 LFS 服务器上。仓库中只保留这些文件的文本链接。当拉取仓库时，Git-LFS 的钩子将自动把这些文本链接恢复成 LFS 中的实际内容。一图胜千言：</p>
<p><img src="/images/enterprise-class-git-version-control-5/git-lfs.png" alt="Git-LFS原理"></p>
<h3 id="服务端配置">服务端配置</h3>
<p>选择 Git-LFS 的一个首要原因是 Gitlab 原生提供了对 Git-LFS 的支持<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>有趣的是，就在我写这篇文章的时候，<a href="https://git-lfs.coding.me/" target="_blank" rel="external">Coding 也宣布了对 Git LFS 的支持</a>。 </span></span></span> 。要在 Gitlab 中开启 Git-LFS 非常简单：</p>
<ol>
<li>编辑 /opt/gitlab/gitlab.rb 文件，找到 <code>Git LFS</code> 项目；</li>
<li>将 <code>gitlab_rails['lfs_enabled']</code> 项目设置成 <code>true</code>；</li>
<li>将 <code>gitlab_rails['lfs_storage_path']</code> 项目设置为本地的一个已存在目录。这个目录就是实际的 LFS 存储目录。</li>
<li>执行 <code>gitlab-ctl reconfigure</code> 重新配置 Gitlab；</li>
<li>执行 <code>gitlab-ctl restart</code> 重启 Gitlab ，使配置生效。</li>
</ol>
<p>至此服务端就配置完成了。</p>
<h3 id="工具安装">工具安装</h3>
<p><a href="https://github.com/git-lfs/git-lfs/releases/latest?utm_source=gitlfs_site&amp;utm_medium=downloads_link&amp;utm_campaign=gitlfs" target="_blank" rel="external">下载</a> Git LFS 。解压完后执行：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git lfs install</div></pre></td></tr></table></figure></p>
<p>完成工具的安装。这步骤只需要做一次。这个步骤实际做的事情是给 git 加上 lfs 命令，另外还创建了 post-checkout、post-commit、post-merge、pre-push 几个全局钩子。当我们在一个使用 LFS 的仓库执行诸如 <code>checkout</code>、<code>commit</code>、<code>merge</code>、<code>push</code> 的 Git 操作时，将触发这些钩子自动地维护用 LFS 管理的文件。</p>
<h3 id="仓库改造">仓库改造</h3>
<p>接下来就可以开始改造仓库，把大文件都改用 LFS 来管理。</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git lfs track <span class="string">"*.jar"</span></div><div class="line"><span class="variable">$ </span>git lfs track <span class="string">"*.so"</span></div><div class="line"><span class="variable">$ </span>git lfs track <span class="string">"*.aar"</span></div></pre></td></tr></table></figure></p>
<p>这几步执行完会在仓库中创建一个 .gitattribute 文件：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat <span class="string">.gitattributes</span></div><div class="line">*<span class="string">.jar</span> filter=<span class="keyword">lfs</span> diff=<span class="keyword">lfs</span> merge=<span class="keyword">lfs</span> -text</div><div class="line">*<span class="string">.so</span> filter=<span class="keyword">lfs</span> diff=<span class="keyword">lfs</span> merge=<span class="keyword">lfs</span> -text</div><div class="line">*<span class="string">.aar</span> filter=<span class="keyword">lfs</span> diff=<span class="keyword">lfs</span> merge=<span class="keyword">lfs</span> -text</div></pre></td></tr></table></figure></p>
<p>Git 的钩子就是根据这个文件来确定当前仓库是否有使用 LFS 管理的文件的。所以这个文件一定要确保添加进仓库中：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> .gitattributes</div></pre></td></tr></table></figure></p>
<p>完成后像往常一样暂存和提交文件即可：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git add foo.jar</div><div class="line"><span class="variable">$ </span>commit -m <span class="string">"Add jar file"</span></div><div class="line"><span class="variable">$ </span>git push origin master</div></pre></td></tr></table></figure></p>
<p>要注意的是，这个改造过程只会把当前这次 commit 的指定类型文件改成用 LFS 才存储，而不会影响所有历史记录。对于我们的 SDK 仓库，仓库本身已经非常庞大，直接这么改造是没有任何瘦身效果的。所以最好的做法就是重新创建一个仓库，把各个分支最新的快照同步过来。</p>
<p><img src="/images/enterprise-class-git-version-control-5/after.png" alt="改造后的SDK仓库"></p>
<p>由图可以看出，重新创建的这个仓库，把大部分的二进制大文件都改用了 LFS 来存储，整个仓库的大小从 1G 减小到 3M 不到！</p>
<p>测试对这个新的仓库进行克隆，由于本身仓库很小，一下子就克隆下来了。之后 Git LFS 的全局钩子将自动将当前仓库里的 LFS 链接文件恢复成真正的文件：</p>
<p><img src="/images/enterprise-class-git-version-control-5/lfs-clone.png" alt="克隆 Git LFS 仓库"></p>
<p>由于这个仓库的二进制包多达64个，整个克隆过程的时间主要花在下载这些二进制包，总耗时约为 43 秒。虽然没有浅克隆快，但这样的方式拉下来的仓库是完整的仓库，而且对普通开发者而言是完全透明的操作（他们甚至不需要知道 LFS 是什么），因此是更加理想的方案。</p>
<h3 id="git-lfs-的踩坑之旅">Git-LFS 的踩坑之旅</h3>
<p>虽然 Git-LFS 很好地解决了大文件的版本控制问题，但实际应用到实际团队中时也不见得能顺风顺水。在我将它推广到团队的项目中时，就遇到了几个水土不服的问题。下面整理一下，方便后来人。</p>
<h4 id="1-警惕钩子覆盖">1. 警惕钩子覆盖</h4>
<p>第一个遇到的问题就是钩子的覆盖问题。前面我们提到 Git-LFS 其实是利用全局钩子来关联 Git 与 LFS 的。当你的工程中也加了钩子时，这时候就要格外小心了。</p>
<p>以我们的工程为例，我给每个子模块都加了个 pre-push 钩子用来做 push 前检查：</p>
<ol>
<li>如果子模块接入了 Code Review，检查要 push 的提交是否都经过了 Code Review；</li>
<li>如果是 React Native 子模块，检查本地的 React Native 打包是否成功；</li>
<li>检查如果要推送到一个新分支，检查目标分支名是否包含非 ASCII 字符。</li>
</ol>
<p>问题来了，这个 pre-push 钩子的优先级会高于全局的那个 Git LFS 钩子，因此使得 Git LFS 的 pre-push 失去作用。而这个钩子非常重要：它的作用是在 push 的时候把用 Git LFS 跟踪管理的文件上传到 LFS 服务器上。如果这些文件没有上传成功，别人拉取仓库就会报如下错误：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Downloading hotfix/plugin/commons-io-2.4.jar (180.80 KB)</div><div class="line">Error downloading object: hotfix/plugin/commons-io-2.4.jar (cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581)</div><div class="line"></div><div class="line">Errors logged to /Users/xxxx/Desktop/App_Android_master_dev/.git/modules/framework/xxxx/xxxx/lfs/objects/logs/20170417T212952.282306976.log</div><div class="line">Use `git lfs logs last` to view the log.</div><div class="line">error: external filter git-lfs smudge -- %f failed 2</div><div class="line">error: external filter git-lfs smudge -- %f failed</div><div class="line">fatal: hotfix/plugin/commons-io-2.4.jar: smudge filter lfs failed</div></pre></td></tr></table></figure></p>
<p>解决办法就是将 Git LFS 钩子的内容与自定义钩子相结合。这是我对 Git LFS 的 pre-push 钩子的改写：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/sh</span></div><div class="line"></div><div class="line">basepath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</div><div class="line">command -v git-lfs &gt;/dev/null <span class="number">2</span>&gt;&<span class="number">1</span> || { <span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">"\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/pre-push.\n"</span>; <span class="keyword">exit</span> <span class="number">2</span>; }</div><div class="line">git lfs pre-push <span class="string">"<span class="variable">$@</span>"</span> && <span class="variable">$basepath</span>/pre-push-custom</div></pre></td></tr></table></figure></p>
<p>最后一行的作用就是先执行 git lfs pre-push 确保正确上传 LFS tracking 的文件，然后再执行 hooks 中的 pre-push-custom 钩子进行其他自定义的检查。</p>
<h4 id="2-zip-包下载的-bug">2. zip 包下载的 bug</h4>
<p>Gitlab 对 Git-LFS 也存在着不足。当我完成了几个大仓库的改造之后，我发现新的仓库在本地可以顺利编译，但在构建站却死活编译不了，报了类找不到的错误：</p>
<p><img src="/images/enterprise-class-git-version-control-5/compile-problem.jpeg" alt="编译问题"></p>
<p>本地构建和构建站构建在代码拉取上面有一个区别：为了加快代码拉取速度，我们在构建站并不使用克隆仓库的方式来拉取代码，而是采用下载 Zip 包的方式。所以我把这个仓库的 Zip 包下载了下来：</p>
<p><img src="/images/enterprise-class-git-version-control-5/download-zip.png" alt="下载zip包"></p>
<p>这个类是在其中一个 jar 包里定义的，而解压发现 jar 包明明已经下载下来了：</p>
<p><img src="/images/enterprise-class-git-version-control-5/problem-file.png" alt="问题jar包"></p>
<p>尝试使用 JD-Gui 打开这个 jar 包，发现这个包打不开。</p>
<p><img src="/images/enterprise-class-git-version-control-5/open-failed.png" alt="jar包无法打开"></p>
<p>那这个文件究竟是什么东西？打印它的内容，真相浮出水面：</p>
<p><img src="/images/enterprise-class-git-version-control-5/whats-this.png" alt="jar包只是个链接文本"></p>
<p>这是个链接文件！说明 Gitlab 并没有将它恢复成实际的文件内容！仔细观察这些二进制文件，我发现它们的大小全部都在 130 字节左右，这意味着这些文件全都没有被恢复。</p>
<p><img src="/images/enterprise-class-git-version-control-5/file-size.png" alt="全部文件都是链接"></p>
<p>不幸的是，由于下载下来的内容不再是个 Git 仓库，这些链接文件已无法恢复成实际的文件内容。</p>
<p><img src="/images/enterprise-class-git-version-control-5/cannot-restore.png" alt="文件无法恢复"></p>
<p>我认为这个是 Gitlab 的问题，于是给 Gitlab 提了一个 <a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/31082" target="_blank" rel="external">bug</a> ，而一个开发人员告诉我类似的问题在去年 3 月份<a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/14261" target="_blank" rel="external">已经有人提过</a>，而目前还未修复 <code>--bb</code> <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>Coding 也有相同的问题，哈哈。 </span></span></span> 。</p>
<p>找到这个原因后，对症下药就简单了：既然下载 Zip 包的方式没法恢复大文件的内容，那就改成用浅克隆。于是我改写了下构建站的代码拉取脚本，将使用 Git LFS 管理大文件的几个模块由下载 zip 的方式改成浅克隆，终于解决了编译问题！</p>
<h2 id="总结">总结</h2>
<p>本文列举了几种二进制大文件导致仓库过大的解决方案。其中，使用 Git-LFS 的方案是一种比较理想的选择。但在实际使用中，一定要小心处理 Git-LFS 可能带来的问题，希望本文的若干踩坑总结也能对读者有所帮助。</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/Gitlab/" term="Gitlab"/>
    <category scheme="http://hahack.com/tags/LFS/" term="LFS"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（四）：多 Gitlab 数据同步]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-4/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-4/</id>
    <published>2017-04-12T07:45:29.000Z</published>
    <updated>2017-05-22T11:38:14.104Z</updated>
    <content type="html"><![CDATA[<h2 id="需求描述">需求描述</h2>
<p>在继续写数学系列前，我想切回去之前的 Git 系列写点东西。我想写系列文章也可以像操作系统的进程调度一样，一个系列暂时写不动了，先 <q>保存现场</q> 跳去另一个 topic 写点东西，同时也给自己留点 buffer 再酝酿一下这个暂时 <q>中断</q> 的系列。等这个系列酝酿够了，再 <q>恢复现场</q> ，继续还这个系列的技术债。</p>
<p>对于一个规模较大的企业，存在多个 Gitlab 站点是很常见的事情。</p>
<p>比如，我们团队在公司发布统一的 Gitlab 之前早已经搭了一个团队用的 Gitlab ，当公司开始推 Git 时，由于我们已经对自己团队的 Gitlab 做了大量的定制，因此并不打算迁移到公司的 Gitlab 。</p>
<p>自己搭建 Gitlab 的好处是可以随心所欲的进行定制，像加远程钩子之类的东西想加就加。但缺点就是平台的维护成本也落到了自己身上。相比之下，公司 Gitlab 则没有什么维护成本，服务的稳定性由更专业的运维人员保证，也不用考虑扩容的问题，但灵活定制就别想了。如果能够实现 Gitlab 间的数据自动同步，我们可以没有顾忌的使用自己的 Gitlab 平台，一旦出现问题，再无痛迁移到公司的 Gitlab 。这样一方面避免了单点问题，节省了维护成本；另一方面也能尽可能保证灵活可定制。本文想讨论的就是多个 Gitlab 站点间的数据同步问题。</p>
<a id="more"></a>
<p>要实现数据同步，Gitlab 官方提供了一套 <a href="https://docs.gitlab.com/omnibus/settings/backups.html" target="_blank" rel="external">备份恢复机制</a> 。但这套机制并不能很好地满足我们的需求：</p>
<ol>
<li>需要两台机器的管理员权限。进行备份和恢复的机器都需要能 SSH 进去执行操作。而我们是不可能拥有公司 Gitlab 的管理员权限的；</li>
<li>会覆盖目标站点的数据。在恢复数据时，目标站点原有的一切数据都会被覆盖。而公司的 Gitlab 有很多个团队的数据，我们的同步不能影响到其他团队的数据；</li>
<li>Gitlab 版本兼容问题。Gitlab 的备份机制要求原站点和目标站点的 Gitlab 版本兼容，否则将恢复失败。而我们的 Gitlab 版本和公司的 Gitlab 版本并不相同，日后存在一方升级导致无法同步的可能。</li>
</ol>
<p>出于以上的考虑，我们自己设计了一套同步工具。与 Gitlab 官方的备份恢复机制相比，它具有以下一些优点：</p>
<ol>
<li>无需 ssh 账户权限。所有操作都通过 Gitlab API 和 Git 操作完成，不用 ssh 登录到机器进行操作；</li>
<li>同步数据类型灵活。可以选择同步组织、仓库代码、wiki、组织成员关系、权限控制信息等类型的数据；</li>
<li>不覆盖目标站点数据。只对目标站点相同组织内的数据进行同步，不影响其他团队的数据；</li>
<li>没有 Gitlab 版本兼容问题。同步过程利用了 Gitlab API ，而 Gitlab API 比 Gitlab 稳定，因此版本兼容问题比较少见。即使出现 API 接口的变更，也可以通过升级工具的接口调用来实现兼容。</li>
</ol>
<p>下面将逐步说明整套同步的方案。为了方便描述，我把同步原 Gitlab 站点称为 A Gitlab，把同步目标站点称为 B Gitlab 。</p>
<p>数据的自动同步主要经历如下几步：</p>
<ol>
<li>同步所有组织，如果建立了新组织，将自动给 B Gitlab 添加该组织；</li>
<li>同步所有组织的所有仓库的代码和 wiki 到 B Gitlab 。</li>
<li>同步所有用户的组织关系。</li>
<li>同步所有仓库的权限控制信息。</li>
</ol>
<h2 id="组织同步">组织同步</h2>
<p>利用 Gitlab API 列举出 A Gitlab 中的所有 groups，然后在 B Gitlab 中自动新建不存在的组织。</p>
<p>列举 Gitlab 的所有组织：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> /groups</div></pre></td></tr></table></figure></p>
<p>返回示例：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">1</span></span>,</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"Foobar Group"</span></span>,</div><div class="line">    "<span class="attribute">path</span>": <span class="value"><span class="string">"foo-bar"</span></span>,</div><div class="line">    "<span class="attribute">description</span>": <span class="value"><span class="string">"An interesting group"</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>根据这个可以获取组织名（name）、组织路径（path）和组织描述（description）。</p>
<p>同样使用类似接口获取 B Gitlab 的所有组织。如果发现 A Gitlab 的某个组织在 B Gitlab 里不存在，可以在 B Gitlab 新增一个组织：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">POST</span> /groups</div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>name（必须）- 组织名</li>
<li>path（必须）- 组织路径</li>
<li>description（可选）- 可选组织描述</li>
</ul>
<h2 id="仓库代码同步">仓库代码同步</h2>
<p>同步所有组织的所有仓库的代码和 wiki 文档到 B Gitlab 。</p>
<p>获取一个组织的所有仓库信息接口：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /groups/<span class="symbol">:id/projects</span></div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>archived (可选) - 只找出已被归档的项目</li>
<li>order_by (可选) - 选择基于 <code>id</code>, <code>name</code>, <code>path</code>, <code>created_at</code>, <code>updated_at</code> 或 <code>last_activity_at</code> 字段来排序。默认使用 <code>created_at</code> 。</li>
<li>sort (可选) - 选择升序还是降序排列。默认为降序。</li>
<li>search (可选) - 构造一个搜索条件过滤数据。</li>
<li>ci_enabled_first (可选) - 将结果根据是否带有 <code>ci_enabled</code> 字段来排序。</li>
</ul>
<p>返回示例：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">4</span></span>,</div><div class="line">    "<span class="attribute">description</span>": <span class="value"><span class="literal">null</span></span>,</div><div class="line">    "<span class="attribute">default_branch</span>": <span class="value"><span class="string">"master"</span></span>,</div><div class="line">    "<span class="attribute">public</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">visibility_level</span>": <span class="value"><span class="number">0</span></span>,</div><div class="line">    "<span class="attribute">ssh_url_to_repo</span>": <span class="value"><span class="string">"git@example.com:diaspora/diaspora-client.git"</span></span>,</div><div class="line">    "<span class="attribute">http_url_to_repo</span>": <span class="value"><span class="string">"http://example.com/diaspora/diaspora-client.git"</span></span>,</div><div class="line">    "<span class="attribute">web_url</span>": <span class="value"><span class="string">"http://example.com/diaspora/diaspora-client"</span></span>,</div><div class="line">    "<span class="attribute">tag_list</span>": <span class="value">[</span></div><div class="line">      <span class="string">"example"</span>,</div><div class="line">      <span class="string">"disapora client"</span></div><div class="line">    ],</div><div class="line">    "<span class="attribute">owner</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="number">3</span></span>,</div><div class="line">      "<span class="attribute">name</span>": <span class="value"><span class="string">"Diaspora"</span></span>,</div><div class="line">      "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"Diaspora Client"</span></span>,</div><div class="line">    "<span class="attribute">name_with_namespace</span>": <span class="value"><span class="string">"Diaspora / Diaspora Client"</span></span>,</div><div class="line">    "<span class="attribute">path</span>": <span class="value"><span class="string">"diaspora-client"</span></span>,</div><div class="line">    "<span class="attribute">path_with_namespace</span>": <span class="value"><span class="string">"diaspora/diaspora-client"</span></span>,</div><div class="line">    "<span class="attribute">issues_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">merge_requests_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">builds_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">wiki_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">snippets_enabled</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span>,</div><div class="line">    "<span class="attribute">last_activity_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span>,</div><div class="line">    "<span class="attribute">creator_id</span>": <span class="value"><span class="number">3</span></span>,</div><div class="line">    "<span class="attribute">namespace</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span>,</div><div class="line">      "<span class="attribute">description</span>": <span class="value"><span class="string">""</span></span>,</div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="number">3</span></span>,</div><div class="line">      "<span class="attribute">name</span>": <span class="value"><span class="string">"Diaspora"</span></span>,</div><div class="line">      "<span class="attribute">owner_id</span>": <span class="value"><span class="number">1</span></span>,</div><div class="line">      "<span class="attribute">path</span>": <span class="value"><span class="string">"diaspora"</span></span>,</div><div class="line">      "<span class="attribute">updated_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">archived</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">avatar_url</span>": <span class="value"><span class="string">"http://example.com/uploads/project/avatar/4/uploads/avatar.png"</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>之后利用同个接口结合 <code>search</code> 参数判断 B Gitlab 上的该组织是否存在同名项目。</p>
<p>如果不存在该项目，可以导入该项目：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">POST</span> /projects</div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>name (必须) - 项目名</li>
<li>path (可选) - 仓库的路径。默认和项目名相同。</li>
<li>namespace_id (可选) - 新项目的所属的id。这里设为A Gitlab中拥有该项目的id。</li>
<li>description (可选) - 项目的描述。这里设为A Gitlab中该项目的描述。</li>
<li>issues_enabled (可选) - 是否开启 issue 。</li>
<li>merge_requests_enabled (可选)</li>
<li>builds_enabled (可选)</li>
<li>wiki_enabled (可选)</li>
<li>snippets_enabled (可选)</li>
<li>public (可选) - 如果为 <code>true</code> ，相当于设置 <code>visibility_level</code> 为 20</li>
<li>visibility_level (可选) - 项目可见度。这里设为A Gitlab中该项目的可见度。</li>
<li>import_url (optional) - 导入地址。这里设为A Gitlab中该项目的 http 地址。</li>
</ul>
<p>完成后 B Gitlab 即会导入 A Gitlab 中的对应仓库。</p>
<p>如果该项目已存在，可以利用我开源的一个 <a href="https://github.com/wzpan/git-repo-sync" target="_blank" rel="external">代码同步工具</a> 来实现两个仓库之间所有分支的同步。</p>
<h2 id="用户组织关系同步">用户组织关系同步</h2>
<p>根据 A Gitlab ，将 B Gitlab 的已激活用户添加到组织中。并从 B Gitlab 删除 A Gitlab 中已 block 或者已移除的用户。</p>
<p>这里要注意的是两个站点间的用户的关联问题。我们的 Gitlab 在一开始就要求使用公司邮箱注册，而公司的 Gitlab 同样也是使用邮箱的 LDAP 账户体系，因此可以利用邮箱来关联两个站点间的账户。</p>
<p>获取 Gitlab 某个组织的所有用户：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /groups/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>返回结果示例：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">1</span></span>,</div><div class="line">    "<span class="attribute">username</span>": <span class="value"><span class="string">"raymond_smith"</span></span>,</div><div class="line">    "<span class="attribute">email</span>": <span class="value"><span class="string">"ray@smith.org"</span></span>,</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"Raymond Smith"</span></span>,</div><div class="line">    "<span class="attribute">state</span>": <span class="value"><span class="string">"active"</span></span>,</div><div class="line">    "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2012-10-22T14:13:35Z"</span></span>,</div><div class="line">    "<span class="attribute">access_level</span>": <span class="value"><span class="number">30</span></span></div><div class="line">  },</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">2</span></span>,</div><div class="line">    "<span class="attribute">username</span>": <span class="value"><span class="string">"john_doe"</span></span>,</div><div class="line">    "<span class="attribute">email</span>": <span class="value"><span class="string">"joh@doe.org"</span></span>,</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"John Doe"</span></span>,</div><div class="line">    "<span class="attribute">state</span>": <span class="value"><span class="string">"active"</span></span>,</div><div class="line">    "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2012-10-22T14:13:35Z"</span></span>,</div><div class="line">    "<span class="attribute">access_level</span>": <span class="value"><span class="number">30</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>找出两个 Gitlab 上用户的差异，并执行如下操作：</p>
<ol>
<li>如果 B Gitlab 比 A Gitlab 多出了一些成员，将该成员删除；</li>
<li>如果 A Gitlab 的某个用户 <code>state</code> 字段为 <code>blocked</code> ，则该成员可能已离职或 transfer，将该成员从 B Gitlab 中删除；</li>
<li>如果 A Gitlab 上某个用户在 B Gitlab 上不存在，则可能是新成员，尝试添加该成员。</li>
<li>如果某一用户在两个 Gitlab 上的权限等级不一样，则该用户的等级可能经过修改，需要同步该权限等级到 B Gitlab 。</li>
</ol>
<p>添加组织成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">POST</span> /groups/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>id (必须) - 组织的 id ，也可以是路径；</li>
<li>user_id (必须) - 用户的 ID ，即 UM 账号</li>
<li>access_level (必须) - 权限等级</li>
</ul>
<p>删除组织成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">DELETE</span> /groups/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<p>编辑组织成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /groups/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<p>另外还需要考虑 B Gitlab 不存在该用户的情况，需做容错处理。</p>
<h2 id="项目权限控制信息同步">项目权限控制信息同步</h2>
<p>项目的权限控制信息主要包括项目成员设定及分支保护设定。</p>
<h3 id="项目成员同步">项目成员同步</h3>
<p>项目成员的同步与组织成员的同步大同小异。</p>
<p>获取项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /projects/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>添加项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">POST</span> /projects/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>删除项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">DELETE</span> /projects/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<p>编辑项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /projects/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<h3 id="分支保护同步">分支保护同步</h3>
<p>首先获取 A Gitlab 中一个仓库的所有分支：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /projects/<span class="symbol">:id/repository/branches</span></div></pre></td></tr></table></figure></p>
<p>返回示例：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"async"</span></span>,</div><div class="line">    "<span class="attribute">commit</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="string">"a2b702edecdf41f07b42653eb1abe30ce98b9fca"</span></span>,</div><div class="line">      "<span class="attribute">parents</span>": <span class="value">[</span></div><div class="line">        {</div><div class="line">          "<span class="attribute">id</span>": <span class="value"><span class="string">"3f94fc7c85061973edc9906ae170cc269b07ca55"</span></span></div><div class="line">        }</div><div class="line">      ],</div><div class="line">      "<span class="attribute">tree</span>": <span class="value"><span class="string">"c68537c6534a02cc2b176ca1549f4ffa190b58ee"</span></span>,</div><div class="line">      "<span class="attribute">message</span>": <span class="value"><span class="string">"give Caolan credit where it's due (up top)"</span></span>,</div><div class="line">      "<span class="attribute">author</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">committer</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">authored_date</span>": <span class="value"><span class="string">"2010-12-08T21:28:50+00:00"</span></span>,</div><div class="line">      "<span class="attribute">committed_date</span>": <span class="value"><span class="string">"2010-12-08T21:28:50+00:00"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">protected</span>": <span class="value"><span class="literal">false</span></span></div><div class="line">  },</div><div class="line">  {</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"gh-pages"</span></span>,</div><div class="line">    "<span class="attribute">commit</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="string">"101c10a60019fe870d21868835f65c25d64968fc"</span></span>,</div><div class="line">      "<span class="attribute">parents</span>": <span class="value">[</span></div><div class="line">        {</div><div class="line">          "<span class="attribute">id</span>": <span class="value"><span class="string">"9c15d2e26945a665131af5d7b6d30a06ba338aaa"</span></span></div><div class="line">        }</div><div class="line">      ],</div><div class="line">      "<span class="attribute">tree</span>": <span class="value"><span class="string">"fb5cc9d45da3014b17a876ad539976a0fb9b352a"</span></span>,</div><div class="line">      "<span class="attribute">message</span>": <span class="value"><span class="string">"Underscore.js 1.5.2"</span></span>,</div><div class="line">      "<span class="attribute">author</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">committer</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">authored_date</span>": <span class="value"><span class="string">"2013-09-07T12: 58: 21+00: 00"</span></span>,</div><div class="line">      "<span class="attribute">committed_date</span>": <span class="value"><span class="string">"2013-09-07T12: 58: 21+00: 00"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">protected</span>": <span class="value"><span class="literal">false</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>其中 <code>protected</code> 表示该分支是否受到保护。</p>
<p>根据分支的保护情况修改 B Gitlab 上的分支。</p>
<p>保护某个分支：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /projects/<span class="symbol">:id/repository/branches/</span><span class="symbol">:branch/protect</span></div></pre></td></tr></table></figure></p>
<p>取消某个分支的保护：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /projects/<span class="symbol">:id/repository/branches/</span><span class="symbol">:branch/unprotect</span></div></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2>
<p>对于同时搭建了多个 Gitlab 的团队，多个 Gitlab 间的数据同步是值得去实现的事情。它一方面能避免单点问题，降低小团队的维护成本，一方面也能尽量保证小团队的定制灵活性。因此，文本列举了组织同步、仓库代码和wiki同步、组织关系同步、权限控制信息同步等四大方面的同步的方案。我将这四个类型的同步可以写成了三个工具：</p>
<ul>
<li><code>group_sync</code> - 处理组织同步</li>
<li><code>project_sync</code> - 处理项目代码、wiki同步</li>
<li><code>member_sync</code> - 处理组织关系、权限控制信息的同步</li>
</ul>
<p>设定每天自动按顺序执行这几个工具的同步，完成后邮件汇报同步结果。作为实例，这是我们每天都会收到的同步结果邮件（出于保护隐私的考虑，我修改了部分隐私信息）：</p>
<iframe src="http://onmw7y6f4.bkt.clouddn.com/log.html" width="100%" height="360" frameborder="0"></iframe>
<p>由于项目变动、成员变动比较频繁，当希望在计划任务之前进行某方面同步，仍然可以单独手动运行以上工具完成所需方面的同步。对于一些同步及时性要求更高的仓库，则可以通过加 post-receive 钩子调用 <a href="https://github.com/wzpan/git-repo-sync" target="_blank" rel="external">代码同步工具</a> 来实现 push 后即时同步。</p>
<p>要注意的是，这个同步方案并没有保证 A Gitlab 的所有数据都能被完整地同步。在设计同步策略的时候，我跳过了下述类型的同步：</p>
<ol>
<li>用户私有仓库。这些仓库只是个人仓库，不会对组织财产造成影响。且如果要同步私有仓库，则要求两个 Gitlab 站点的账户都为管理员，因为只有管理员才能访问所有用户的私有仓库。</li>
<li>SSH key。用户添加的所有 SSH key 无法同步。</li>
<li>头像。组织、用户、仓库的头像未做同步。</li>
<li>issue。由于我们的 Gitlab 并不用来进行 bug 跟踪管理，所以我跳过了这方面的同步。读者也可以利用 Gitlab API 实现 issue 的同步。</li>
<li>附件。Wiki 中的附件是独立于仓库之外的，需要单独备份。例如使用 <a href="http://rsync.samba.org/" target="_blank" rel="external">rsync</a> 。</li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/Gitlab/" term="Gitlab"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[机器学习的数学基础：线性代数进阶篇]]></title>
    <link href="http://hahack.com/math/math-linear-algebra-graded/"/>
    <id>http://hahack.com/math/math-linear-algebra-graded/</id>
    <published>2017-02-12T13:42:05.000Z</published>
    <updated>2017-02-18T11:52:12.314Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在前面两篇文章中，我简要概括了线性代数中两个最基本的数据表达方式：<a href="/math/math-matrix/">矩阵</a> 和 <a href="/math/math-vector/">向量</a>。有了这两个数学工具作为基础，我们可以再进一步，讨论下面一些内容：</p>
<ol>
<li>如何求解线性空间的基？</li>
<li>向量的子空间、零空间、列空间、行空间、左零空间都是什么东西？怎么求解？</li>
<li>如何用线性代数的知识来拟合数据？</li>
<li>机器学习、图像处理中常见的“特征向量”究竟是什么东西？它和变换矩阵有什么联系？</li>
</ol>
<p>本篇文章将作为线性代数子系列的最终篇。</p>
<a id="more"></a>
<h2 id="阶梯形矩阵">阶梯形矩阵</h2>
<p>阶梯形矩阵是一类非常实用的工具，可以帮助我们求解出线性空间的基，这就能用在诸如计算解不唯一的方程组之类的问题上。</p>
<h3 id="阶梯形矩阵-v2">阶梯形矩阵</h3>
<p>若矩阵 \(\mathbf{A}\) 满足两条件：</p>
<ol>
<li>若有零行（元素全为0的行），则零行应在最下方；</li>
<li>非零首元（即非零行的第一个不为零的元素）的列标号随行标号的增加而严格递增。</li>
</ol>
<p>则称此矩阵 \(\mathbf{A}\) 为阶梯形矩阵。</p>
<p>示例：</p>
<p>\[
\begin{bmatrix}
2 &amp; 0 &amp; 2 &amp; 1 \\
0 &amp; 5 &amp; 2 &amp; -2 \\
0 &amp; 0 &amp; 3 &amp; 2 \\
0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<h3 id="行简化阶梯形矩阵">行简化阶梯形矩阵</h3>
<p>若矩阵 \(\mathbf{A}\) 满足两条件：</p>
<ol>
<li>它是阶梯形矩阵；</li>
<li>非零首元所在的列除了非零首元外，其余元素全为0。</li>
</ol>
<p>则称此矩阵 \(\mathbf{A}\) 为行简化阶梯形矩阵。</p>
<p>示例：</p>
<p>\[
\begin{bmatrix}
2 &amp; 0 &amp; 2 &amp; 1 \\
0 &amp; 5 &amp; 2 &amp; -2 \\
0 &amp; 0 &amp; 3 &amp; 2 \\
0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<h3 id="行最简形矩阵">行最简形矩阵</h3>
<p>若矩阵 \(\mathbf{A}\) 满足两条件：</p>
<ol>
<li>它是行简化阶梯形矩阵；</li>
<li>非零首元都为1</li>
</ol>
<p>则称此矩阵 \(\mathbf{A}\) 为行最简形矩阵。</p>
<h3 id="将矩阵化简成行最简阶梯形">将矩阵化简成行最简阶梯形</h3>
<p>对如下矩阵</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
1 &amp; 2 &amp; 2 &amp; -1 &amp; 12\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\]</p>
<p>，使用初等变换可以将这个矩阵转换成如下的形式：</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
1 &amp; 2 &amp; 2 &amp; -1 &amp; 12\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; -2 &amp; 4 &amp; -10
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 0 &amp; 3 &amp; 2\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<p>行最简形非常实用。例如，对于下面的方程组：</p>
<p>\[\left\{ 
\begin{eqnarray} 
x_1 + 2x_2 + x_3 + x_4 &amp;=&amp; 7 \\\
x_1 + 2x_2 + 2x_3 - x_4 &amp;=&amp; 12 \\\
2x_1 + 4x_2 + 6x_4 &amp;=&amp; 4
\end{eqnarray}
\right.
\]</p>
<p>只有三个方程，肯定无法求解出四个未知数（此时如果在用 <code>numpy.linalg.solve</code> 求解这个矩阵会引发 <code>LinAlgError</code> ），但是通过化成行最简形，我们可以进一步找出变量的限制关系。先将方程组表达成增广矩阵形式：</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
1 &amp; 2 &amp; 2 &amp; -1 &amp; 12\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\]</p>
<p>这个矩阵和完全和我们上一步给出的矩阵相同，因此其行简化阶梯性就是</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 0 &amp; 3 &amp; 2\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<p>对于方程组，非0首元位置对应的变量就叫做<strong>主元变量</strong>，其他的变量就叫做<strong>自由变量</strong>。例如上面的行最简形，\(x_1\) 和 \(x_3\) 是首元变量，\(x_2\) 和 \(x_4\) 就是自由变量。我们可以将方程改写成下面的形式：</p>
<p>\[
\left\{ 
\begin{eqnarray} 
x_1 &amp;=&amp; 2 - 2x_2 - 3x_4 \\\
x_3 &amp;=&amp; 5 + 2x_4
\end{eqnarray}
\right.
\]</p>
<p>然后可以得到：</p>
<p>\[
\begin{bmatrix} x_{ 1 } \\ x_{ 2 } \\ x_{ 3 } \\ x_{ 4 } \end{bmatrix}=\begin{bmatrix} 2 \\ 0 \\ 5 \\ 0 \end{bmatrix}+x_{ 2 }\underbrace { \begin{bmatrix} -2 \\ 1 \\ 0 \\ 0 \end{bmatrix} }_{ \vec{\mathbf{a}} } +x_{ 4 }\underbrace{\begin{bmatrix} -3 \\ 0 \\ 2 \\ 1 \end{bmatrix}}_{\vec{\mathbf{b}}}
\]</p>
<p>观察这个结果，方程组的解集就是向量 \(\vec{\mathbf{a}}\) 和向量 \(\vec{\mathbf{b}}\) 的线性组合。这两个向量张成了 \(\mathbb{R}^1\) 中的一个平面。</p>
<h2 id="线性子空间">线性子空间</h2>
<p>在前面的内容中我们已经多少涉及到了一些关于空间、张成空间的知识了。有时候我们需要从一个空间 \(K\) 里头挑出一些向量张成一个新的空间 \(\mathbf{W}\) ，这个空间 \(\mathbf{W}\) 就是原来的向量 \(\mathbf{K}\) 的子空间。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p><strong>定理</strong>：设 \(\mathbf{V}\) 是在域 \(\mathbf{K}\) 上的向量空间，并设 \(\mathbf{W}\) 是 \(\mathbf{V}\) 的子集。则 \(\mathbf{W}\) 是个子空间，当且仅当它满足下列三个条件:</p>
<ol>
<li>零向量 0 在 \(\mathbf{W}\) 中。</li>
<li>加法封闭：如果 \(\vec{\mathbf{u}}\) 和 \(\vec{\mathbf{v}}\) 是 \(\mathbf{W}\) 的元素，则向量和 \(\mathbf{\vec{\mathbf{u}}+\vec{\mathbf{v}}}\) 是 \(\mathbf{W}\) 的元素。</li>
<li>标量乘法封闭：如果 \(\vec{\mathbf{u}}\) 是 \(\mathbf{W}\) 的元素而 \(c\) 是标量，则标量积 \(c\vec{\mathbf{u}}\) 是 \(\mathbf{W}\) 的元素。</li>
</ol>
</div></p>
<p>子空间的引入有助于我们更专注于某类线性组合，从中找出这些子空间的特点，以及与原来的空间的关系。下面将列举几种典型的子空间。</p>
<h3 id="零空间">零空间</h3>
<p>矩阵 \(\mathbf{A}\) 的零空间 \(N(\mathbf{A})\) 就是由满足 \(\mathbf{A}\vec{\mathbf{x}}=0\) 的所有向量 \(\vec{\mathbf{x}}\) 的集合。</p>
<p>要求解一个矩阵的零空间，可以先将其化简成行最简形。例如矩阵 $\mathbf{A} = \begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\ 4 &amp; 3 &amp; 2 &amp; 1 \end{bmatrix} $，为了计算零空间，可以写出如下的等式：</p>
<p>\[\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\ 4 &amp; 3 &amp; 2 &amp; 1 \end{bmatrix} \begin{bmatrix} x_1 \\ x_2 \\ x_3 \\ x_4 \end{bmatrix} = \begin{bmatrix} 0 \\ 0 \\ 0 \end{bmatrix}\]</p>
<p>展开得到如下的方程组：</p>
<p>\[
\left\{ 
\begin{eqnarray} 
x_1 + x_2 + x_3 + x_4 &amp;=&amp; 0 \\\
x_1 + 2x_2 + 3x_3 + 4x_4 &amp;=&amp; 0 \\\
4x_1 + 3x_2 + 2x_4 + x_4 &amp;=&amp; 0
\end{eqnarray}
\right.
\]</p>
<p>参考 <a href="#%E5%8C%96%E7%AE%80%E6%88%90%E8%A1%8C%E6%9C%80%E7%AE%80%E9%98%B6%E6%A2%AF%E5%BD%A2">化简成行最简阶梯形</a> 一节里介绍的方法，先把上面的方程组表示成增广矩阵：</p>
<p>\[
\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 \\ 1 &amp; 2 &amp; 3 &amp; 4 &amp; 0 \\ 4 &amp; 3 &amp; 2 &amp; 1 &amp; 0 \end{bmatrix}
\]</p>
<p>然后将其转换成行最简形：</p>
<p>\[
\begin{bmatrix} 1 &amp; 0 &amp; -1 &amp; -2 &amp; 0 \\ 0 &amp; 1 &amp; 2 &amp; 3 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \end{bmatrix}
\]</p>
<p>最终求解得到：</p>
<p>\[
\begin{bmatrix} x_{ 1 } \\ x_{ 2 } \\ x_{ 3 } \\ x_{ 4 } \end{bmatrix}=x_{ 3 }\underbrace { \begin{bmatrix} 1 \\ -2 \\ 1 \\ 0 \end{bmatrix} }_{ \vec{\mathbf{a}} } +x_{ 4 }\underbrace{\begin{bmatrix} 2 \\ -3 \\ 0 \\ 1 \end{bmatrix}}_{\vec{\mathbf{b}}}
\]</p>
<p>因此矩阵 \(\mathbf{A}\) 的零空间就是由上式中的 \(\vec{\mathbf{a}}\) 向量和 \(\vec{\mathbf{b}}\) 向量张成的空间。即</p>
<p>\[N(\mathbf{A}) = span\left(\begin{bmatrix} 1 \\ -2 \\ 1 \\ 0 \end{bmatrix} \begin{bmatrix} 2 \\ -3 \\ 0 \\ 1 \end{bmatrix}\right)\]</p>
<p>另外，上面得到的这个行最简形有两个自由变量，就称矩阵 \(\mathbf{A}\) 的 <strong>零度</strong> 为 2。零度等于 \(\mathbf{A}\vec{\mathbf{x}} = 0\) 化成行最简形后自由变量的个数。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>零空间其实和线性无关其实有很大的联系。一个矩阵的零空间为 \(\vec{\mathbf{0}}\) 的充分必要条件是这个矩阵的所有列线性无关。</p>
</div></p>
<h3 id="列空间">列空间</h3>
<p>矩阵的列空间就是由每一列的向量张成的空间。对于矩阵 \(\underset { m\times n }{ \mathbf{A} } =\begin{bmatrix} \underbrace { \begin{bmatrix} a_{ 11 } \\ a_{ 21 } \\ \ldots \\ a_{ m1 } \end{bmatrix} }_{ \vec { \mathbf{ V }_{ 1 } }  }  &amp; \underbrace { \begin{bmatrix} a_{ 12 } \\ a_{ 22 } \\\ldots  \\ a_{ m2 } \end{bmatrix} }_{ \vec { \mathbf{ V_{ 2 } } }  } &amp; \ldots &amp; \underbrace { \begin{bmatrix} a_{ 1n } \\ a_{ 2n } \\ \ldots \\ a_{ mn } \end{bmatrix} }_{ \vec { \mathbf{ V_{ n } } }  }  \end{bmatrix}\)，那么矩阵 \(\mathbf{A}\) 的列空间就是</p>
<p>\[C(\mathbf{A}) = span(\vec{v_1}, \vec{v_2}, \ldots, \vec{v_n})\]</p>
<p>例如，矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\4 &amp; 3 &amp; 2 &amp; 1\end{bmatrix}\) 的列空间是 \(C(\mathbf{A}) = span\left(\begin{bmatrix}1 \\ 1 \\ 4\end{bmatrix}\begin{bmatrix}1 \\ 2 \\ 3\end{bmatrix}\begin{bmatrix}1 \\ 3 \\ 2\end{bmatrix}\begin{bmatrix}1 \\ 4 \\ 1\end{bmatrix}\right)\)</p>
<p>把一个矩阵化成行最简形后，这个矩阵的不相关主列（基底）的个数就称为矩阵的<strong>秩</strong>（Rank），或者叫维数。</p>
<p>例如，上面的矩阵 \(\mathbf{A}\) 化成最简形矩阵是（参考上节的化简结果）：</p>
<p>\[
\begin{bmatrix} 1 &amp; 0 &amp; -1 &amp; -2  \\ 0 &amp; 1 &amp; 2 &amp; 3  \\ 0 &amp; 0 &amp; 0 &amp; 0 \end{bmatrix}
\]</p>
<p>从结果可以看出这个矩阵的主列有 2 个，而且是线性无关的。所以矩阵 \(\mathbf{A}\) 的秩为 2 ，即 \(rank(\mathbf{A}) = 2\)。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>矩阵的秩有一个特性：矩阵 \(\mathbf{A}\) 的秩等于矩阵 \(\mathbf{A}\) 的转置的秩。即 \(Rank(\mathbf{A}) = Rank(\mathbf{A^T})\)</p>
</div></p>
<p>在 Python 中，可以使用 Numpy 包中的 <code>linalg.matrix_rank</code> 方法计算矩阵的秩：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = np.matrix(<span class="string">'1 1 1 1;1 2 3 4;4 3 2 1'</span>)</div><div class="line"><span class="keyword">print</span> np.linalg.matrix_rank(a)  <span class="comment"># 2</span></div></pre></td></tr></table></figure></p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p><strong>注意</strong> 在 Numpy 中的秩和线性代数里的秩是不同的概念。在NumPy中维度（dimensions）叫做轴（axes），轴的个数叫做秩。</p>
<pre><code class="language-python">import numpy as np
a = np.matrix('1 1 1 1;1 2 3 4; 0 0 1 0')
print a.ndim  # 2（维度）
print np.rank(a)  # 2（a.ndim 的别名，已经过时）
print np.linalg.matrix_rank(a)  # 3（秩）
</code></pre>
</div></p>
<h3 id="行空间">行空间</h3>
<p>有了列空间的定义，行空间顾名思义就是矩阵的每一行转置得到的向量张成的子空间，也就是矩阵的转置的列空间，记为 \(R(\mathbf{A}) = C(\mathbf{A}^T)\)。</p>
<p>例如，矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\4 &amp; 3 &amp; 2 &amp; 1\end{bmatrix}\) 的行空间是 \(R(\mathbf{A}) = C(\mathbf{A}^T) = span\left(\begin{bmatrix}1 \\ 1 \\ 1 \\ 1\end{bmatrix}\begin{bmatrix}1 \\ 2 \\ 3 \\ 4\end{bmatrix}\begin{bmatrix}4 \\ 3 \\ 2 \\ 1\end{bmatrix}\right)\)。</p>
<h3 id="左零空间">左零空间</h3>
<p>矩阵 \(\mathbf{A}\) 的左零空间是 \(\mathbf{A}\) 的转置的零空间。即：</p>
<p>\[N(\mathbf{A}^T) = \left\{ \vec{\mathbf{x}} | \mathbf{A}^{T} \vec{\mathbf{x}} = \vec{\mathbf{0}} \right\} = \left\{ \vec{\mathbf{x}} | \vec{\mathbf{x}}^{T} \mathbf{A} = \vec{\mathbf{0}}^{T} \right\}\]</p>
<p>例如，矩阵 \(\mathbf{B} = \begin{bmatrix}1 &amp; 1 &amp; 4 \\ 1 &amp; 2 &amp; 3 \\1 &amp; 4 &amp; 2\\ 1 &amp; 3 &amp; 1\end{bmatrix}\) 的转置是矩阵 \(\mathbf{A} = \mathbf{A} = \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\4 &amp; 3 &amp; 2 &amp; 1\end{bmatrix}\) ，因此左零空间是 \(N(\mathbf{B^T}) = N(\mathbf{A}) = span\left(\begin{bmatrix} 1 \\ -2 \\ 1 \\ 0 \end{bmatrix} \begin{bmatrix} 2 \\ -3 \\ 0 \\ 1 \end{bmatrix}\right)\)</p>
<p>由于转置是对称的，所以矩阵 \(\mathbf{A}\) 的转置的左零空间也是矩阵 \(\mathbf{A}\) 的零空间。</p>
<h3 id="子空间的正交补">子空间的正交补</h3>
<p>假设 \(\mathbf{V}\) 是 \(\mathbb{R}^n\) 的一个子空间，那么 \(\mathbf{V}\) 的正交补 \(\mathbf{V}^{\bot}\) 也是一个子空间，定义为 \(\left\{\vec{\mathbf{x}} | \vec{\mathbf{x}} \vec{\mathbf{v}}=0\right\}\)，也即是 \(\mathbb{R}^{n}\) 中所有正交于 \(\mathbf{V}\) 的向量所组成的子空间。</p>
<p>由于正交是对称的，所以正交补也是对称的。一个子空间的正交补的正交补依然等于这个子空间。</p>
<p>矩阵的零空间是行空间的正交补<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，即 \(N(\mathbf{A}) = R(\mathbf{A})^{\bot}\)。反过来，矩阵的左零空间是列空间的正交补，即  \(N(\mathbf{B}^T) = C(\mathbf{B})^{\bot}\)。</p>
<h2 id="最小二乘逼近">最小二乘逼近</h2>
<p>最小二乘法是一个实用的数学工具，利用它可以在方程无解的情况下给出近似解。在机器学习中，最小二乘逼近也是一个重要的拟合方法。</p>
<p>假设有一个方程</p>
<p>\[
\underset{n\times k}{\mathbf{A}}\vec{\mathbf{x}} = \vec{\mathbf{b}}
\]</p>
<p>无解。把上式写成：</p>
<p>\[
\vec{a_1}\vec{\mathbf{x}} + \vec{a_2}\vec{\mathbf{x}} + \ldots + \vec{a_k}\vec{\mathbf{x}} = \vec{\mathbf{b}}
\]</p>
<p>无解就意味着 \(\mathbf{A}\) 的所有列向量的张成空间不包括向量 \(\vec{\mathbf{b}}\) 。即 \(\vec{\mathbf{b}} \notin span(C(\mathbf{A}))\)。</p>
<p>我们可以通过最小二乘法求解出近似解。即是要让找出一些向量 \(\vec{\mathbf{x}^*}\) 使得 \(\left\|\vec{\mathbf{b}}-\mathbf{A}\vec{\mathbf{x}^*}\right\|\) 最小。用向量 \(\vec{\mathbf{V}}\) 代表 \(\mathbf{A}\vec{\mathbf{x}^*}\) ，有：</p>
<p>\[
\left\|
\begin{bmatrix}
\vec{b_1}-\vec{v_1}\\
\vec{b_2}-\vec{v_2}\\
\ldots\\
\vec{b_n}-\vec{v_n}\\
\end{bmatrix}
\right\|^2
= 
(b_1-v_1)^2 + (b_2-v_2)^2 + \ldots + (b_n-v_n)^2
\]</p>
<p>把这个值最小化的过程就叫做<strong>最小二乘逼近</strong>。</p>
<p>如何求出 \(\mathbf{A}\vec{\mathbf{x}^*}\) 这个近似值呢？从几何上考虑，列空间可以看成空间中张成的一个平面，而向量 \(\vec{\mathbf{b}}\) 并不落在这个平面上。但我们知道，在这个平面上与向量 \(\vec{\mathbf{b}}\) 最接近的向量就是它的<a href="/math/math-vector/#%E5%90%91%E9%87%8F%E7%82%B9%E7%A7%AF">投影</a>！所以，</p>
<p>\[
\mathbf{A}\vec{\mathbf{x}^*} = Proj_{C(\mathbf{A})}\vec{\mathbf{b}}
\]</p>
<p>直接计算 \(Proj_{C(\mathbf{A})}\vec{\mathbf{b}}\) 并不简单。不过，\(\vec{\mathbf{b}}-\mathbf{A}\vec{\mathbf{x}}\) 其实就是 \(\mathbf{A}\vec{\mathbf{x}}\) 的正交补，所以一个简单的求解方法是将原来无解的方程左乘一个 \(\mathbf{A}\) 的转置再求解：</p>
<p>\[
\mathbf{A}^T\mathbf{A}\vec{\mathbf{x}^*} = \mathbf{A}^T\vec{\mathbf{b}}
\]</p>
<p>得出的解就是原方程的近似解。</p>
<h3 id="实例1：求解方程">实例1：求解方程</h3>
<p>问题：求解如下方程组</p>
<p>\[
\left\{ 
\begin{eqnarray} 
x + y &amp;=&amp; 3 \\\
x - y &amp;=&amp; -2 \\\
y &amp;=&amp; 1
\end{eqnarray}
\right.
\]</p>
<p>将三个方程表示的直线画出来，可以看出这三条直线并没有交点：</p>
<p><img src="/images/math-linear-algebra/fig8.png" alt=""></p>
<p>如何找出一个与三条直线距离最近的一个点呢？这时候我们的最小二乘逼近就派上用场了。</p>
<p>先将方程写成矩阵和向量的形式：</p>
<p>\[
\underbrace{
\begin{bmatrix}
1 &amp; 1 \\
1 &amp; -1 \\
0 &amp; 1
\end{bmatrix}
}_{\mathbf{A}}
\underbrace{
\begin{bmatrix}
x \\
y
\end{bmatrix}
}_{\vec{\mathbf{x}}}
=
\underbrace{
\begin{bmatrix}
3 \\
-2 \\
1
\end{bmatrix}
}_{\vec{\mathbf{b}}}
\]</p>
<p>这个等式的最小二乘逼近就是：</p>
<p>\[
\begin{align}
\begin{bmatrix}
1 &amp; 1 &amp; 0 \\
1 &amp; -1 &amp; 1\\
\end{bmatrix}
\begin{bmatrix}
1 &amp; 1 \\
1 &amp; -1 \\
0 &amp; 1
\end{bmatrix}
\begin{bmatrix}
x^* \\
y^*
\end{bmatrix}
&amp; = 
\begin{bmatrix}
1 &amp; 1 &amp; 0 \\
1 &amp; -1 &amp; 1\\
\end{bmatrix}
\begin{bmatrix}
3 \\
-2 \\
1
\end{bmatrix}
\\\
\begin{bmatrix}
2 &amp; 0 \\
0 &amp; 3
\end{bmatrix}
\begin{bmatrix}
x^* \\
y^*
\end{bmatrix}
&amp; =
\begin{bmatrix}
1 \\
6
\end{bmatrix}
\end{align}
\]</p>
<p>由于是二阶方程，可以很容易求出矩阵 \(\begin{bmatrix}2 &amp; 0 \\ 0 &amp; 3\end{bmatrix}\) 的逆是 \(\begin{bmatrix}\frac{1}{2} &amp; 0 \\ 0 &amp; \frac{1}{3}\end{bmatrix}\)，所以：</p>
<p>\[
\begin{bmatrix}
x^* \\
y^*
\end{bmatrix}
=
\begin{bmatrix}\frac{1}{2} &amp; 0 \\ 0 &amp; \frac{1}{3}\end{bmatrix}
\begin{bmatrix}
1 \\
6
\end{bmatrix}
=
\begin{bmatrix}
\frac{1}{2} \\
2
\end{bmatrix}
\]</p>
<p>因此 \(\begin{bmatrix}\frac{1}{2} \\ 2 \end{bmatrix}\) 就是方程组的近似解。</p>
<p><img src="/images/math-linear-algebra/fig9.png" alt=""></p>
<p>在 Python 中，可以使用 <code>numpy.linalg.lstsq</code> 方法来求解最小二乘逼近。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.array([<span class="number">3</span>, -<span class="number">2</span>, <span class="number">1</span>])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>x = np.linalg.lstsq(a,b)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> x</div><div class="line">(array([ <span class="number">0.5</span>,  <span class="number">2.</span> ]), array([ <span class="number">1.5</span>]), <span class="number">2</span>, array([ <span class="number">1.73205081</span>,  <span class="number">1.41421356</span>]))</div></pre></td></tr></table></figure></p>
<p><code>numpy.linalg.lstsq</code> 的返回包括四个部分：</p>
<ol>
<li>最小二乘逼近解。如果 <code>b</code> 是二维的，那么这个逼近的结果有多个列，每一列是一个逼近解。对于上例，逼近解就是 \(\begin{bmatrix}0.5 \\  2 \end{bmatrix}\) 。</li>
<li>残差。即每一个 <code>b - a*x</code> 的长度的和。对于上例，残差是 1.5 。</li>
<li>矩阵 <code>a</code> 的秩。对于上例，矩阵 <code>a</code> 的秩为 2 。</li>
<li>矩阵 <code>a</code> 的奇异值。对于上例，矩阵 <code>a</code> 的奇异值为 \(\begin{bmatrix}1.73205081 \\  1.41421356\end{bmatrix}\)</li>
</ol>
<h3 id="实例2：线性回归">实例2：线性回归</h3>
<p>问题：给定4个坐标点 \((-1, 0)\), \((0, 1)\), \((1, 2)\), \((2, 1)\) ，求一条经过这些点的直线 \(y=mx+b\)。</p>
<p>将四个点画图如下：</p>
<p><img src="/images/math-linear-algebra/fig10.png" alt=""></p>
<p>显然这样的直线并不存在。然而我们能够使用最小二乘逼近，找到一条尽可能接近这些点的直线。将四个点表示成方程组的形式：</p>
<p>\[
\left\{
\begin{eqnarray}
f(-1) &amp;= -m + b = 0\\\
f(0) &amp;= 0 + b  = 1\\\
f(1) &amp;= m + b = 2\\\
f(2) &amp;= 2m + b = 1
\end{eqnarray}
\right.
\]</p>
<p>还是那个套路，将方程组表示成矩阵和向量的形式：</p>
<p>\[
\underbrace{
\begin{bmatrix}
-1 &amp; 1 \\
0 &amp; 1 \\
1 &amp; 1 \\
2 &amp; 1
\end{bmatrix}
}_{\mathbf{A}}
\underbrace{
\begin{bmatrix}
m\\
b
\end{bmatrix}
}_{\vec{\mathbf{x}}}
=
\underbrace{
\begin{bmatrix}
0\\
1\\
2\\
1
\end{bmatrix}
}_{\vec{\mathbf{b}}}
\]</p>
<p>这个等式的最小二乘逼近就是：</p>
<p>\[
\begin{align}
\begin{bmatrix}
-1 &amp; 0 &amp; 1 &amp; 2 \\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
\begin{bmatrix}
-1 &amp; 1 \\
0 &amp; 1 \\
1 &amp; 1 \\
2 &amp; 1
\end{bmatrix}
\begin{bmatrix}
m^*\\
b^*
\end{bmatrix}
&amp;=
\begin{bmatrix}
-1 &amp; 0 &amp; 1 &amp; 2 \\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
\begin{bmatrix}
0\\
1\\
2\\
1
\end{bmatrix}\\\
\begin{bmatrix}
6 &amp; 2 \\
2 &amp; 4
\end{bmatrix}
\begin{bmatrix}
m^*\\
b^*
\end{bmatrix}
&amp;=
\begin{bmatrix}
4\\
4
\end{bmatrix}
\end{align}
\]</p>
<p>容易求得 \(\begin{bmatrix}6 &amp; 2\\2 &amp; 4\end{bmatrix}\) 的逆为 \(\frac{1}{20}\begin{bmatrix}4 &amp; -2\\-2 &amp; 6\end{bmatrix}\)，因此</p>
<p>\[\begin{bmatrix}m^*\\b^*\end{bmatrix} = \frac{1}{20}\begin{bmatrix}4 &amp; -2\\-2 &amp; 6\end{bmatrix}\begin{bmatrix}4 \\ 4\end{bmatrix} = \frac{1}{20}\begin{bmatrix}8 \\ 16\end{bmatrix} = \begin{bmatrix}\frac{2}{5} \\ \frac{4}{5}\end{bmatrix}\]</p>
<p>将直线 \(y = \frac{2}{5}x + \frac{4}{5}\) 绘图如下所示：</p>
<p><img src="/images/math-linear-algebra/fig11.png" alt=""></p>
<p>这就是所求的直线的近似解。</p>
<p>Python 示例如下：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'-1 1;0 1;1 1;2 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>x = np.linalg.lstsq(a, b)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> x</div><div class="line">(array([ <span class="number">0.4</span>,  <span class="number">0.8</span>]), array([ <span class="number">1.2</span>]), <span class="number">2</span>, array([ <span class="number">2.68999405</span>,  <span class="number">1.66250775</span>]))</div></pre></td></tr></table></figure></p>
<h2 id="特征向量">特征向量</h2>
<p>“特征”在模式识别和图像处理中是非常常见的一个词汇。我们要认识和描绘一件事物，首先得找出这个事物的特征。同样的道理，要让计算机识别一件事物，首先就要让计算机学会理解或者抽象出事物的特征。什么样的东西能当成特征呢？那必须是能“放之四海皆准”的依据，不论个体如何变换，都能从中找到这类群体共有的特点。例如，计算机视觉中常用的 <a href="/wiki/opencv-video.html#sift-%E7%89%B9%E5%BE%81%E7%82%B9">SIFT 特征点</a> 是一种很经典的用于视觉跟踪的特征点，即使被跟踪的物体的尺度、角度发生了变化，这种特征点依然能够找到关联。在机器学习中， 特征向量选取也是整个机器学习系统中非常重要的一步。</p>
<p>在线性代数中，“特征” 就是一种更抽象的描述。我们知道，矩阵乘法对应了一个变换，是把任意一个向量变成另一个方向或长度都大多不同的新向量。在这个变换的过程中，原向量主要发生旋转、伸缩的变化。如果矩阵对某一个向量或某些向量只发生伸缩（尺度）变换，而没有产生旋转的效果（也就意味着张成的子空间没有发生改变），这样的向量就认为是特征向量。</p>
<p>\[\mathbf{T}(\vec{\mathbf{v}}) = \underbrace{\mathbf{A}}_{n\times n}\vec{\mathbf{v}} = \underbrace{\lambda}_{特征值} \overbrace{\vec{\mathbf{v}}}^{特征向量}\]</p>
<p>其中， \(T\) 是一种线性变换，我们知道线性变换可以用矩阵向量积来表示，因此可以表示成 \(\mathbf{A}\vec{\mathbf{v}}\) 。\(\mathbf{A}\) 是一个 \(n\times n\) 的方阵。\(\vec{\mathbf{v}}\) 就是特征向量（Eigen Vector），也就是<q>能被伸缩的向量</q>（要求是非 \(\mathbf{0}\) 向量），而 \(\lambda\) 是特征向量 \(\vec{\mathbf{v}}\) 所对应的特征值，也就是<q>伸缩了多少</q>。如果特征值是负数，那说明了矩阵不但把向量拉长（缩短）了，而且让向量指向了相反的方向。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>简而言之，特征向量就是在线性变化当中不变的向量。</p>
</div></p>
<p>听起来很抽象，放个例子就清楚了。下图出自 wikipedia的《<a href="http://zh.wikipedia.org/wiki/%C3%A7%C2%89%C2%B9%C3%A5%C2%BE%C2%81%C3%A5%C2%90%C2%91%C3%A9%C2%87%C2%8F" target="_blank" rel="external">特征向量</a>》一文：</p>
<p><img src="/images/math-linear-algebra/eigen.jpg" alt=""></p>
<p>在这个仿射变换中，蒙娜丽莎的图像被变形，但是中心的纵轴在变换下保持不变。（注意：角落在右边的图像中被裁掉了。）蓝色的向量，从胸部到肩膀，其方向改变了，但是红色的向量，从胸部到下巴，其方向不变。因此红色向量是该变换的一个特征向量，而蓝色的不是。因为红色向量既没有被拉伸又没有被压缩，其特征值为1。所有沿着垂直线的向量也都是特征向量，它们的特征值相等。它们构成这个特征值的特征空间。</p>
<h3 id="求解特征值">求解特征值</h3>
<p>非 \(\mathbf{0}\) 向量 \(\vec{\mathbf{v}}\) 是线性变化矩阵 \(\mathbf{A}\) 的特征向量，需要满足如下条件<div class="label-anchor"><span>eq: 1 »</span></div>：</p>
<p>\[det(\lambda \mathbf{I}_n - \underbrace{\mathbf{A}}_{n\times n}) = 0\]</p>
<p>其中，\(det\) 表示矩阵行列式，\(\lambda\) 是特征值，\(\mathbf{I}\) 是单位矩阵。</p>
<p>例如矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 2 \\ 4 &amp; 3\end{bmatrix}\) ，代入公式 2 得：</p>
<p>\[
\begin{align} det\left( \lambda \begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 1 \end{bmatrix}-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right)  &amp;=0 \\ det\left( \begin{bmatrix} \lambda  &amp; 0 \\ 0 &amp; \lambda  \end{bmatrix}-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right)  &amp;=0 \\ det\left( \begin{bmatrix} \lambda -1 &amp; -2 \\ -4 &amp; \lambda -3 \end{bmatrix} \right)  &amp;=0 \end{align}
\]</p>
<p>所以有：</p>
<p>\[\begin{align} (\lambda -1)(\lambda -3)-8 &amp; =0 \\ \lambda ^{ 2 }-4\lambda -5 &amp;=0 \\ (\lambda - 5)(\lambda +1) &amp;= 0\end{align}\]</p>
<p>因此 \(\lambda\) 的值为 5 或者 -1 。</p>
<p>在 Python 中，可以使用 <code>numpy.linalg.eigvals</code> 方法求解一个方阵的特征值：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 2;4 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> np.linalg.eigvals(a)</div><div class="line">[-<span class="number">1.</span>  <span class="number">5.</span>]</div></pre></td></tr></table></figure></p>
<p>前面说了变换矩阵必须是方阵，所以如果用在其他形状的矩阵上就会抛出 <code>LinAlgError</code> 错误：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'1 2 3;4 3 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> np.linalg.eigvals(b)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/numpy/linalg/linalg.py"</span>, line <span class="number">902</span>, <span class="keyword">in</span> eigvals</div><div class="line">    _assertNdSquareness(a)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/numpy/linalg/linalg.py"</span>, line <span class="number">212</span>, <span class="keyword">in</span> _assertNdSquareness</div><div class="line">    <span class="keyword">raise</span> LinAlgError(<span class="string">'Last 2 dimensions of the array must be square'</span>)</div><div class="line">numpy.linalg.linalg.LinAlgError: Last <span class="number">2</span> dimensions of the array must be square</div></pre></td></tr></table></figure></p>
<h3 id="求解特征向量">求解特征向量</h3>
<p>变换矩阵 \(\mathbf{A}\) 的特征空间（特征向量张成的空间）可以用下面的等式来求解： <div class="label-anchor"><span>eq: 2 »</span></div></p>
<p>\[\mathbf{E}_{\lambda}=N(\lambda I_n - \mathbf{A})\]</p>
<p>例如上面的变换矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 2 \\ 4 &amp; 3\end{bmatrix}\) ，代入公式 3 得：</p>
<p>\[{ E }_{ \lambda  }=N\left( \lambda I_{ n }-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right) =N\left( \lambda \begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 1 \end{bmatrix}-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right) =N\left( \begin{bmatrix} \lambda -1 &amp; -2 \\ -4 &amp; \lambda -3 \end{bmatrix} \right) \]</p>
<p>当 \(\lambda = 5\) 时，</p>
<p>\[{ E }_{ 5  }=N\left( \begin{bmatrix} 4 &amp; -2 \\ -4 &amp; 2 \end{bmatrix} \right) \]</p>
<p>利用前面所学的 <a href="#%E9%9B%B6%E7%A9%BA%E9%97%B4">零空间的求解方法</a> ，得</p>
<p>\[{ E }_{ 5  }= span\left(\begin{bmatrix}\frac{1}{2} \\ 1 \end{bmatrix}\right) \]</p>
<p>同样地，当 \(\lambda = -1\) 时，</p>
<p>\[{ E }_{ -1  }= span\left(\begin{bmatrix}1 \\ -1 \end{bmatrix}\right) \]</p>
<p>在 Python 中，可以使用 <code>numpy.linalg.eig</code> 方法来求解方阵的特征值和特征向量：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 2;4 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> np.linalg.eig(a)</div><div class="line">(array([-<span class="number">1.</span>,  <span class="number">5.</span>]), matrix([[-<span class="number">0.70710678</span>, -<span class="number">0.4472136</span> ],</div><div class="line">        [ <span class="number">0.70710678</span>, -<span class="number">0.89442719</span>]]))</div></pre></td></tr></table></figure></p>
<p>得到的元组中，第一部分是特征值，和前面使用 <code>numpy.linalg.eigvals</code> 得到的结果完全一样；第二部分是特征向量，乍一看好像和我们上面求解的结果不一样，但如果我们这么写就完全一样了：\(\begin{bmatrix}-0.70710678\begin{bmatrix}1 \\ -1\end{bmatrix} &amp; -0.89442719\begin{bmatrix}\frac{1}{2} \\ 1\end{bmatrix} \end{bmatrix}\)</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>变换矩阵线性无关的特征向量特别适合作为空间的基，因为在这些方向上变换矩阵可以拉伸向量而不必扭曲和旋转它，使得计算大为简单。我们把这种基称为 <strong>特征基</strong> 。</p>
</div></p>
<h2 id="小结">小结</h2>
<p>终于完成了线性代数的系列。作为保研党，真正系统学习线性代数也就是在大一的时期，然后大学四年也没怎么用到数学，渐渐地就忘得差不多了。后来读研的时候虽然也用到些线性代数，但都是用到啥补啥，跟其他考研上来的同学比起来，心里面总是缺少一点底气。在中科院实习结束的时候，陈宝权老师和 Andrei 一直劝我读博，最后我婉拒了，其中一个原因也和这个“没底气”有关吧。而今我也工作快两年了，虽然还是没有读博的念头，但还是希望把数学捡起来，让自己也有底气一些。</p>
<p>读者也许会发现最近我很喜欢写系列文章。我倒不是为了要出书啦。只是我觉得既然博客的文章不止是写给我一个人看的，那么也得考虑读者的感受。如果把一篇文章写得太长，那就很难让人坚持读完，更别说这种公式很多的文章了；而如果写得太短，又不够完整，读得不够尽兴，于我也没有多少益处。</p>
<p>写系列文章其实最大的难点在于把握好 tradeoff 。像线性代数的知识点，两三篇文章的篇幅肯定是讲不完的，有些知识点如果再深入一下，就又拔出萝卜带出泥。比如最后一节提到特征向量，其实我还可以继续讨论特征值分解，然后又可以扯到奇异值分解。这样就很容易把整个系列写成像裹脚布一样了。所以，我只讲最基础的知识点，而且是可能对机器学习有帮助的，目的是让自己今后读相关的文章时有底气一些，至少不会在“秩”、“转置矩阵”这种最基础的知识点上犯晕。有了这个基础后，再去学习像奇异值分解之类的其他知识也会轻松很多。如果这个系列也能对读者们有所帮助，那就再好不过了。</p>
<p>如果您希望将这个线性代数子系列保存为书签，作为后面的工具文来查阅，我建议您保存我在wiki上的线性代数笔记（<a href="/wiki/math-linear-algebra.html">跳转入口</a>）。因为我的 wiki 的更新频率会更频繁一些。且日后随着我的学习还可能继续添加一些新的内容。</p>
<p>下篇文章我将继续从一个机器学习工程师的角度，开始回顾微积分的基础知识点。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>证明过程视频：<a href="http://open.163.com/movie/2011/6/E/M/M82ICR1D9_M83HEAPEM.html" target="_blank" rel="external">http://open.163.com/movie/2011/6/E/M/M82ICR1D9_M83HEAPEM.html</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/categories/math/" term="math"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[机器学习的数学基础：向量篇]]></title>
    <link href="http://hahack.com/math/math-vector/"/>
    <id>http://hahack.com/math/math-vector/</id>
    <published>2017-02-06T13:47:43.000Z</published>
    <updated>2017-02-18T10:40:10.964Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在 <a href="http://hahack.com/math/math-matrix/" target="_blank" rel="external">上文</a> 中我简单概括了矩阵的基本运算，并给出了两个应用实例。这篇文章我们继续谈谈向量。</p>
<p>向量是线性代数中的基本概念，也是机器学习的基础数据表示形式。例如计算机阅读文本的过程首先就会将文本分词，然后用向量表示<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。这是因为向量很适合在高维空间中表达和处理。在机器学习中会接触到的诸如投影、降维的概念，都是在向量的基础上做的。</p>
<a id="more"></a>
<p>在 \(\mathbb{R}^{n}\) <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>空间中定义的向量 \(\vec{\mathbf{V}}\)，可以用一个包含 n 个实数的有序集来表示，即 \(\vec{\mathbf{V}} = \begin{bmatrix}v_1 \\ v_2 \\ \ldots \\ v_n\end{bmatrix}\)，这个有序集里的每个元素称为向量的 <strong>分量</strong> 。例如一个 \(\mathbb{R}^{2}\) 空间中的向量 \(\begin{bmatrix}2 \\ 1\end{bmatrix}\) ，有些地方也会用 \((2, 1)\) 或 \(&lt;2, 1>\) 这样的形式来表示。</p>
<p>绘图表示这个变量：</p>
<p><img src="/images/math-linear-algebra/fig5.png" alt=""></p>
<p>向量的长度被定义为 \[\left\| \vec{\mathbf{v}} \right\| = \sqrt{v_{1}^{2} + v_{2}^{2} + \ldots + v_{n}^{2}}\]，和我们以往所接触的距离公式一模一样。长度为 1 的向量称为 <strong>单位向量</strong> 。</p>
<h2 id="基本运算">基本运算</h2>
<h3 id="加">加</h3>
<p>向量 \(\mathbf{a}\) 与向量 \(\mathbf{b}\) 的加法定义为:</p>
<p>\[
\mathbf{a} + \mathbf{b} = \begin{bmatrix} a_1 + b_1 \\ a_2 + b_2 \\ \ldots \\ a_n + b_n \end{bmatrix}
\]</p>
<p>绘图示意向量 \(\mathbf{a} = \begin{bmatrix}-1 \\ 2\end{bmatrix}\) 与 \(\mathbf{b} = \begin{bmatrix}3 \\ 1\end{bmatrix}\) 的相加，值为 \(\begin{bmatrix}2 \\ 3\end{bmatrix}\) ：</p>
<p><img src="/images/math-linear-algebra/fig3.png" alt=""></p>
<p>在 Python 中，可以直接用 Numpy 的 ndarray 来表示向量。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([-<span class="number">1</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">3</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">print</span> a + b <span class="comment"># [2 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="减">减</h3>
<p>\[
\mathbf{a} - \mathbf{b} = \begin{bmatrix} a_1 - b_1 \\ a_2 - b_2 \\ \ldots \\ a_n - b_n \end{bmatrix}
\]</p>
<p>从几何角度讲，向量减相当于加上一个反向的向量。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([-<span class="number">1</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">3</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">print</span> a - b  <span class="comment"># [-4,  1]</span></div></pre></td></tr></table></figure></p>
<h3 id="乘">乘</h3>
<h4 id="标量乘向量">标量乘向量</h4>
<p>标量 \(c\) 乘以向量 \(\mathbf{a}\) 定义为：</p>
<p>\[
c \cdot \mathbf{a} = \begin{bmatrix} c \cdot a_1 \\ c \cdot a_2 \\ \ldots \\ c \cdot a_n \end{bmatrix} = \begin{bmatrix} a_1 \cdot c \\ a_2 \cdot c \\ \ldots \\ a_n \cdot c \end{bmatrix}
\]</p>
<p>绘图示意向量 \(\mathbf{a} = \begin{bmatrix} -1 \\ 2 \end{bmatrix}\) 乘以一个标量 3 得到 \(\begin{bmatrix} -3 \\ 6 \end{bmatrix}\) ：</p>
<p><img src="/images/math-linear-algebra/fig4.png" alt=""></p>
<p>Python 实现：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([-<span class="number">1</span>, <span class="number">2</span>])</div><div class="line"><span class="keyword">print</span> a * <span class="number">3</span> <span class="comment">#[-3,  6]</span></div></pre></td></tr></table></figure></p>
<h4 id="向量点积">向量点积</h4>
<p>向量的点积（又叫点乘）定义如下：</p>
<p>\[\vec{\mathbf{a}}\cdot \vec{\mathbf{b}} = \begin{bmatrix} a_1 \\ a_2 \\ \ldots \\ a_n\end{bmatrix} \cdot \begin{bmatrix} b_1 \\ b_2 \\ \ldots \\ b_n \end{bmatrix} = a_{1}b_{1} + a_{2}b_{2} + \ldots + a_{n}b_{n}\]</p>
<p>可见点积得到的是一个标量。</p>
<p>例如：</p>
<p>\[\begin{bmatrix} 3 \\ 5 \\ 2 \end{bmatrix} \cdot \begin{bmatrix} 1 \\ 4 \\ 7 \end{bmatrix} = 3 \cdot 1 + 5 \cdot 4 + 2 \cdot 7 = 37\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>])</div><div class="line"><span class="keyword">print</span> a.dot(b)  <span class="comment"># 37</span></div><div class="line"><span class="keyword">print</span> np.dot(a, b)  <span class="comment"># 37（另一种等价写法）</span></div></pre></td></tr></table></figure></p>
<p>容易证明点积满足乘法交换律、分配律和结合律。</p>
<p>我们 <a href="#%E5%89%8D%E8%A8%80">前面</a> 知道向量的长度定义为 \(\left\| \vec{\mathbf{v}} \right\| = \sqrt{v_{1}^{2} + v_{2}^{2} + \ldots + v_{n}^{2}}\)，联立点积的定义，可以得出：</p>
<p><div class="label-anchor"><span>eq: 1 »</span></div>
\[\left\| \vec{\mathbf{v}} \right\| = \sqrt{v_{1}^{2} + v_{2}^{2} + \ldots + v_{n}^{2}} = \sqrt{\vec{\mathbf{v}} \cdot \vec{\mathbf{v}}}\]</p>
<p>关于点积还有一个非常重要的性质，称为 <strong>柯西不等式</strong> <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>：</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <ul>
<li>对两个非 0 向量 \(\vec{\mathbf{x}}, \vec{\mathbf{y}} \in \mathbb{R}^{n}\)，\(|\vec{\mathbf{x}} \cdot \vec{\mathbf{y}}| \le \left\|\vec{\mathbf{x}}\right\|\left\|\vec{\mathbf{y}}\right\|\)。</li>
<li>当且仅当 \(\vec{\mathbf{x}} = c\vec{\mathbf{y}}\) 时，等式成立。</li>
</ul>
</div></p>
<p>虽然受限于篇幅不去证明它，但这个性质非常重要，后面会有很多向量的理论都建立在它的基础之上。例如，对一个向量 \((\vec{\mathbf{x}} + \vec{\mathbf{y}})\) ,利用这个性质，结合公式 1，我们可以得到</p>
<p>\[
\begin{align}
\left\|\vec{\mathbf{x}} + \vec{\mathbf{y}}\right\|^2 &amp; = (\vec{\mathbf{x}} + \vec{\mathbf{y}})\cdot (\vec{\mathbf{x}} + \vec{\mathbf{y}}) \\\
 &amp; = \left\|\vec{\mathbf{x}}\right\|^2 + 2\vec{\mathbf{x}}\vec{\mathbf{y}} + \left\|\vec{\mathbf{y}}\right\|^2 \\\
&amp; \le 
\left\|\vec{\mathbf{x}}\right\|^2 + 2\left\|\vec{\mathbf{x}}\right\|\left\|\vec{\mathbf{y}}\right\| + \left\|\vec{\mathbf{y}}\right\|^2
\end{align}
\]</p>
<p>所以：</p>
<p>\[
\left\|\vec{\mathbf{x}} + \vec{\mathbf{y}}\right\|^2 
\le 
(\left\|\vec{\mathbf{x}}\right\| + \left\|\vec{\mathbf{y}}\right\|)^2
\]</p>
<p>两边开平方得到：</p>
<p>\[
\left\|\vec{\mathbf{x}} + \vec{\mathbf{y}}\right\| 
\le 
\left\|\vec{\mathbf{x}}\right\| + \left\|\vec{\mathbf{y}}\right\|
\]</p>
<p>这就得到了三角不等式。</p>
<p>从几何的角度来说，向量的点积与向量间夹角 \(\theta\) 的余弦有关：\[\vec{\mathbf{a}}\cdot\vec{\mathbf{b}} = \left\|\vec{\mathbf{a}}\right\|\left\|\vec{\mathbf{b}}\right\|cos\theta\]，这意味着向量的点积其实反映了向量 \(\vec{\mathbf{a}}\) 在向量 \(\vec{\mathbf{b}}\) 上的 <strong>投影</strong> ，即两个向量在同个方向上的相同程度。当两向量正交时，\(cos\theta\) 的值为0，点积的值为0，投影最小。当两向量平行时，\(cos\theta\) 的值为1，点积值最大，投影也最大。</p>
<p><img src="/images/math-linear-algebra/fig7.png" alt=""></p>
<p>观察上图，\(L\) 是 \(\vec{\mathbf{v}}\) 向量两端延伸出来的直线，即 \(L={c\vec{\mathbf{v}}|c\in \mathbb{R}}\)。记向量 \(\vec{\mathbf{x}}\) 在 \(L\) 上的投影为 \(Proj_L(\vec{\mathbf{x}})\)。根据点积的性质，可得：</p>
<p>\[
\begin{align}
(\vec{\mathbf{x}}-\underbrace {  c\vec{\mathbf{v}}}_{ Proj_L({\vec{\mathbf{x}}})  } )\cdot \vec{\mathbf{v}} &amp;= 0 \\\
\vec{\mathbf{x}}\cdot \vec{\mathbf{v}} -c\vec{\mathbf{v}}\cdot \vec{\mathbf{v}} &amp;= 0\\\
c\cdot \vec{\mathbf{v}} \cdot \vec{\mathbf{v}} &amp;= \vec{\mathbf{x}}\cdot \vec{\mathbf{v}}\\\
c &amp;= \frac{\vec{\mathbf{x}}\cdot \vec{\mathbf{v}}}{\vec{\mathbf{v}}\cdot \vec{\mathbf{v}}}
\end{align}
\]</p>
<p>有了 \(c\)， 我们就可以求出投影 \(Proj_L({\vec{\mathbf{x}}})\) 为：</p>
<p>\[Proj_L({\vec{\mathbf{x}}}) =  c\vec{\mathbf{v}} = (\frac{\vec{\mathbf{x}}\cdot \vec{\mathbf{v}}}{\vec{\mathbf{v}}\cdot \vec{\mathbf{v}}})\vec{\mathbf{v}}\]</p>
<p>例如，向量 \(\vec{\mathbf{a}} = \begin{bmatrix}1 \\ 2\end{bmatrix}\)，向量 \(\vec{\mathbf{b}} = \begin{bmatrix}1 \\ 1\end{bmatrix}\)，那么 \(\vec{\mathbf{a}}\) 在 \(\vec{\mathbf{b}}\) 方向 \(L\) 上的投影为：</p>
<p>\[Proj_L({\vec{\mathbf{a}}}) = c\vec{\mathbf{b}} = (\frac{\vec{\mathbf{a}}\cdot \vec{\mathbf{b}}}{\vec{\mathbf{b}}\cdot \vec{\mathbf{b}}})\vec{\mathbf{b}} = \frac{3}{2}\vec{\mathbf{b}}\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_projection</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> a.dot(b)*<span class="number">1.0</span>*b/b.dot(b)</div><div class="line"></div><div class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">2</span>, <span class="number">2</span>])</div><div class="line"><span class="keyword">print</span> get_projection(a, b)  <span class="comment"># [1.5  1.5]</span></div></pre></td></tr></table></figure></p>
<h4 id="向量外积">向量外积</h4>
<p>向量的（又叫叉乘、向量积、叉积）只在 \(\mathbb{R}^{2}\) 和 \(\mathbb{R}^{3}\) 中定义：</p>
<p>\(\mathbb{R}^{2}\) 的向量外积：</p>
<p>\[\begin{bmatrix} a_1 \\ a_2\end{bmatrix} \times \begin{bmatrix} b_1 \\ b_2 \end{bmatrix} = \begin{bmatrix} a_1 \cdot b_2 - a_2 \cdot b_1\end{bmatrix}\]</p>
<p>例如：</p>
<p>\[
\begin{bmatrix} 1 \\ 2 \end{bmatrix} \times \begin{bmatrix} 3 \\ 4 \end{bmatrix} 
=
\begin{bmatrix} 1 \cdot 4 - 3 \cdot 2 \end{bmatrix}
= 
\begin{bmatrix}-2\end{bmatrix} 
\]</p>
<p>\(\mathbb{R}^{3}\) 的向量外积：</p>
<p>\[\begin{bmatrix} a_1 \\ a_2 \\ a_3\end{bmatrix} \times \begin{bmatrix} b_1 \\ b_2 \\ b_3 \end{bmatrix} = \begin{bmatrix} a_2 \cdot b_3 - a_3 \cdot b_2 \\ a_3 \cdot b_1 - a_1 \cdot b_3 \\ a_1 \cdot b_2 - a_2 \cdot b_1\end{bmatrix}\]</p>
<p>例如：</p>
<p>\[
\begin{bmatrix} 3 \\ 5 \\ 2 \end{bmatrix} \times \begin{bmatrix} 1 \\ 4 \\ 7 \end{bmatrix} 
=
\begin{bmatrix} 5 \cdot 7 - 2 \cdot 4 \\ 2 \cdot 1 - 3 \cdot 7 \\ 3 \cdot 4 - 5 \cdot 1\end{bmatrix}
= 
\begin{bmatrix} 27 \\ -19 \\ 7\end{bmatrix} 
\]</p>
<p>可见向量间外积的结果会得到一个新的向量。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>])</div><div class="line"><span class="keyword">print</span> np.cross(a, b)  <span class="comment"># [27, -19, 7]</span></div></pre></td></tr></table></figure></p>
<p>外积的一个重要作用是可以得到一个和 \(\vec{\mathbf{a}}\) 、\(\vec{\mathbf{b}}\) 两个原向量正交的新向量 \(\vec{\mathbf{c}}\) ，且可以通过右手法则来确定新向量的方向（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从 \(\vec{\mathbf{a}}\) 以不超过180度的转角转向 \(\vec{\mathbf{b}}\) 时，竖起的大拇指指向是 \(\vec{\mathbf{c}}\) 的方向）。</p>
<p><img src="/images/math-linear-algebra/fig6.jpeg" alt=""></p>
<p>从几何的角度来说，向量的外积与向量间夹角 \(\theta\) 的正弦有关：\[\left\|\vec{\mathbf{a}}\times\vec{\mathbf{b}}\right\| = \left\|\vec{\mathbf{a}}\right\|\left\|\vec{\mathbf{b}}\right\|sin\theta\]，这意味着向量的外积反映了向量 \(\vec{\mathbf{a}}\) 与向量 \(\vec{\mathbf{b}}\) 的正交程度。当两向量平行时，\(sin\theta\) 的值为0，外积的值为0，正交程度最小。当两向量正交时，\(sin\theta\) 的值为1，外积值最大，正交程度最大。</p>
<h4 id="矩阵向量积">矩阵向量积</h4>
<p>当矩阵 \(\mathbf{A}\) 的列数与向量 \(\vec{\mathbf{x}}\) 的分量数相同时，矩阵和向量的积有定义：</p>
<p>\[\underset{m\times n}{A}\vec{\mathbf{x}}=\begin{bmatrix}a_{11} &amp; a_{12} &amp; \ldots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \ldots &amp; a_{2n} \\ \ldots \\ a_{m1} &amp; a_{m2} &amp; \ldots &amp; a_{mn}\end{bmatrix}\begin{bmatrix}x_1 \\ x_2 \\ \ldots \\ x_n \end{bmatrix} = \begin{bmatrix}a_{11}x_1 + a_{12}x_2 + \ldots + a_{1n}x_n \\ a_{21}x_1 + a_{22}x_2 + \ldots + a_{2n}x_n \\ \ldots \\ a_{m1}x_1 + a_{m2}x_2 + \ldots + a_{mn}x_n \\ \end{bmatrix}
\]</p>
<p>例如矩阵 \(\mathbf{A} = \begin{bmatrix}4 &amp; 3 &amp; 1 \\ 1 &amp; 2 &amp; 5\end{bmatrix}\) 乘以向量 \(\vec{\mathbf{x}} = \begin{bmatrix}5 \\ 2 \\ 7\end{bmatrix}\) 的结果为：</p>
<p>\[\begin{bmatrix}4\cdot 5 + 3\cdot 2 + 1\cdot 7 \\ 1 \cdot 5 + 2 \cdot 2 + 5 \cdot 7\end{bmatrix} = \begin{bmatrix}33 \\ 44\end{bmatrix}\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = np.matrix(<span class="string">'4 3 1;1 2 5'</span>)</div><div class="line">x = np.array([[<span class="number">5</span>], [<span class="number">2</span>], [<span class="number">7</span>]])</div><div class="line"><span class="keyword">print</span> a*x  <span class="comment"># [[33] [44]]</span></div></pre></td></tr></table></figure></p>
<p>矩阵的向量积可以当成是矩阵的所有列向量的线性组合：</p>
<p>\[\underset { m\times n }{ \mathbf{A} } \vec { \mathbf{x} } =\begin{bmatrix} \underbrace { \begin{bmatrix} a_{ 11 } \\ a_{ 21 } \\ \ldots \\ a_{ m1 } \end{bmatrix} }_{ \vec { \mathbf{ V }_{ 1 } }  }  &amp; \underbrace { \begin{bmatrix} a_{ 12 } \\ a_{ 22 } \\\ldots  \\ a_{ m2 } \end{bmatrix} }_{ \vec { \mathbf{ V_{ 2 } } }  } &amp; \ldots &amp; \underbrace { \begin{bmatrix} a_{ 1n } \\ a_{ 2n } \\ \ldots \\ a_{ mn } \end{bmatrix} }_{ \vec { \mathbf{ V_{ n } } }  }  \end{bmatrix}\begin{bmatrix} x_{ 1 } \\ x_{ 2 } \\ \ldots \\ x_{ n } \end{bmatrix}=x_1\vec{\mathbf{V}_1}+x_2\vec{\mathbf{V}_2}+\ldots+x_n\vec{\mathbf{V}_n}\]</p>
<p>而向量 \(\vec{\mathbf{x}}\) 的每一个分量可以看成是 \(\mathbf{A}\) 的每个列向量的加权。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>一个矩阵其实就是一个线性变换。一个矩阵乘以一个向量后得到的向量，其实就相当于将这个向量进行了线性变换。</p>
</div></p>
<h2 id="向量的转置">向量的转置</h2>
<p>向量 \(\vec{\mathbf{V}} = \underbrace{\begin{bmatrix}v_1 \\ v_2 \\ \ldots \\ v_n \end{bmatrix}}_{n\times 1}\) 的转置定义为 \(\vec{\mathbf{V}}^T = \underbrace{\begin{bmatrix}v_1 &amp; v_2 &amp; \ldots &amp; v_n \end{bmatrix}}_{1 \times n}\)</p>
<p>例如向量 \(\vec{\mathbf{A}} = \begin{bmatrix} 2 &amp; 4 \end{bmatrix}\) 的转置就是 \(\vec{\mathbf{A}}^T = \begin{bmatrix} 2 \\ 4\end{bmatrix}\)。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.array([[<span class="number">2</span>, <span class="number">4</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.T</div><div class="line">array([[<span class="number">2</span>],</div><div class="line">       [<span class="number">4</span>]])</div></pre></td></tr></table></figure></p>
<p>注意上面声明 <code>a</code> 时用了两对 <code>[]</code> ，以生成一个二维向量。一维的向量转置结果是不会变化的：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.array([<span class="number">2</span>, <span class="number">4</span>])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b.T</div><div class="line">array([<span class="number">2</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure></p>
<p>向量的转置有一个性质：一个向量 \(\vec{\mathbf{v}}\) 点乘另一个向量 \(\vec{\mathbf{w}}\) ，其结果和向量 \(\vec{\mathbf{v}}\) 转置后和向量 \(\vec{\mathbf{w}}\) 做矩阵乘法相同。即 \(\vec{\mathbf{v}} \cdot \vec{\mathbf{w}} = \vec{\mathbf{v}}^T \vec{\mathbf{w}}\) 。</p>
<h2 id="线性无关">线性无关</h2>
<h3 id="张成空间">张成空间</h3>
<p>一组向量的张成空间说白了就是指这些向量随便线性组合后能够表示多少个向量。记为 \(span(\vec{\mathbf{a}}, \vec{\mathbf{b}})\)。</p>
<p>例如，对于 \(\mathbb{R}^{2}\) 空间中两个不平行的非0向量 \(\vec{\mathbf{a}} = \begin{bmatrix}2 \\ 1\end{bmatrix}\) 和向量 \(\vec{\mathbf{b}} = \begin{bmatrix} 0 \\ 3 \end{bmatrix}\) ，不难发现这两个向量能够表示二维空间中任一其他向量，即 \(span(\vec{\mathbf{a}}, \vec{\mathbf{b}}) = \mathbb{R}^{2}\)。证明如下：</p>
<p>对于 \(\mathbb{R}^{2}\) 中任一向量 \(\begin{bmatrix}x \\y \end{bmatrix}\) ，假设可以由 \(\vec{\mathbf{a}}\) 和 \(\vec{\mathbf{b}}\) 线性组合而成，那么有：</p>
<p>\[
c_1 \begin{bmatrix}2 \\ 1\end{bmatrix} + c_2 \begin{bmatrix} 0 \\ 3 \end{bmatrix} = \begin{bmatrix} x \\ y \end{bmatrix}
\]</p>
<p>即：</p>
<p>\[
\left\{
\begin{align}
c_1 \cdot 2 &amp; + c_2 \cdot 0 &amp;= x\\\
c_1 \cdot 1 &amp; + c_2 \cdot 3 &amp;= y
\end{align}
\right.
\]</p>
<p>求解该方程得：</p>
<p>\[
\left\{
\begin{align}
c_1 &amp;= \frac{x}{2}\\
c_2 &amp;= \frac{y}{3} - \frac{x}{6}
\end{align}
\right.
\]</p>
<p>由于 \(x\)、\(y\) 的值已确定，所以 \(c_1\)、\(c_2\) 的值也必然唯一。</p>
<h3 id="线性相关和线性无关">线性相关和线性无关</h3>
<p>当一个向量集合里的每个向量都对张成的空间有贡献时，称这个向量集合线性无关。反之称为线性相关。能够表示一个空间的最少向量组合称为空间的基。</p>
<p>听起来有点难理解，其实就是非常简单的道理：假如一个向量集合中存在某个向量能由集合里的其他向量线性组合而成，那这个集合对于张成空间而言就存在多余的向量。此时就是线性相关；反之，假如集合里每一个元素都没法由其他元素组合而成，那么这个集合每个元素都对张成空间有贡献，这个集合就是线性无关的。</p>
<p>例如，对于上述的例子，如果再增加一个向量 \(\vec{\mathbf{c}} = \begin{bmatrix} 5 \\ 2\end{bmatrix}\) ，由于 \(\vec{\mathbf{c}}\) 可以由 \(\vec{\mathbf{a}}\) 和 \(\vec{\mathbf{b}}\) 线性组合而成，由 \(\mathbf{a}\) 、\({\mathbf{b}}\) 和 \({\mathbf{c}}\) 共同张成的空间并没有变化，仍然是 \(\mathbb{R}^{2}\)，因此称集合 \(\left\{\vec{\mathbf{a}}, \vec{\mathbf{b}}, \vec{\mathbf{c}}\right \}\) 线性相关。</p>
<h3 id="判断是否线性相关">判断是否线性相关</h3>
<p>一个向量集合 \(s = {v_1, v_2, \ldots, v_n}\) 线性相关的充分必要条件是存在一部分非0系数使得 \(c_1 v_1 + c_2 v_2 + \ldots + c_n v_n = \mathbf{0} = \begin{bmatrix} 0 \\ 0 \\ \ldots \\ 0\end{bmatrix}\) 。</p>
<p>例如有向量 \(\begin{bmatrix}2 \\ 1\end{bmatrix}\) 和 \(\begin{bmatrix}3 \\ 2\end{bmatrix}\)，则可以先写出如下的等式：</p>
<p>\[c_1 \begin{bmatrix}2 \\ 1\end{bmatrix} + c_2 \begin{bmatrix}3 \\ 2\end{bmatrix} = \begin{bmatrix}0 \\ 0\end{bmatrix}\]</p>
<p>容易求解得 \(\begin{bmatrix}c_1 \\ c_2\end{bmatrix} = \begin{bmatrix}0 \\ 0\end{bmatrix}\)，说明两个向量线性无关。也说明这两个向量可以张成 \(\mathbb{R}^{2}\)。</p>
<p>类似地，对于三个 \(\mathbb{R}^{3}\) 中的向量 \(\begin{bmatrix}2 \\ 0 \\ 0\end{bmatrix}\)、\(\begin{bmatrix}0 \\ 1 \\ 0\end{bmatrix}\) 和 \(\begin{bmatrix}0 \\ 0 \\ 7\end{bmatrix}\)，不难判断这三个向量是线性无关的，他们共同张成了 \(\mathbb{R}^3\) 空间。</p>
<p>而对于向量集合 \(\left\{\begin{bmatrix}2 \\ 1\end{bmatrix}, \begin{bmatrix}3 \\ 2\end{bmatrix}, \begin{bmatrix}1 \\ 2 \end{bmatrix}\right\}\) ，不难算出存在非 0 的系数 \(\begin{bmatrix}c_1 \\ c_2 \\ c_3\end{bmatrix} = \begin{bmatrix}-4 \\ 3 \\ -1\end{bmatrix}\) 使得 \(c1 \begin{bmatrix}2 \\ 1\end{bmatrix} + c_2 \begin{bmatrix}3 \\ 2\end{bmatrix} + c_3 \begin{bmatrix}1 \\ 2 \end{bmatrix} = \begin{bmatrix}0 \\ 0\end{bmatrix}\)。因此集合 \(\left\{\begin{bmatrix}2 \\ 1\end{bmatrix}, \begin{bmatrix}3 \\ 2\end{bmatrix}, \begin{bmatrix}1 \\ 2 \end{bmatrix}\right\}\) 线性相关。</p>
<p>下篇文章将进阶讨论线性子空间和特征向量。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://acl-arc.comp.nus.edu.sg/archives/acl-arc-090501d4/data/pdf/anthology-PDF/W/W04/W04-3252.pdf" target="_blank" rel="external">TextRank: Bring Order Into Texts</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>\(\mathbb{R}^{n}\) ：表示 n 个有序实数二元组构成的空间。例如 \(\mathbb{R}^2\) 表示有序实数二元组 \((x_1, x_2)\) 构成的空间，即\(\mathbb{R}^n = \left\{ (x_1, \ldots, x_n) | x_1, \ldots, x_n \in \mathbb{R} \right\}\) 。 <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p>从历史的角度讲，该不等式应当称为Cauchy-Buniakowsky-Schwarz不等式【柯西-布尼亚科夫斯基-施瓦茨不等式】，因为，正是后两位数学家彼此独立地在积分学中推而广之，才将这一不等式应用到近乎完善的地步。 <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/Linear-Algebra/" term="Linear Algebra"/>
    <category scheme="http://hahack.com/tags/Math/" term="Math"/>
    <category scheme="http://hahack.com/tags/Vector/" term="Vector"/>
    <category scheme="http://hahack.com/categories/math/" term="math"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[机器学习的数学基础：矩阵篇]]></title>
    <link href="http://hahack.com/math/math-matrix/"/>
    <id>http://hahack.com/math/math-matrix/</id>
    <published>2017-01-31T14:33:04.000Z</published>
    <updated>2017-03-25T03:23:31.818Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>机器学习如火如荼，要学习机器学习，数学基础少不了。所以本系列将对机器学习所用到的线性代数、微积分和概率统计的基础知识做一个简单的概括。</p>
<p>本文将总结线性代数中矩阵的基本知识点。同时理论结合实践，使用 Python 来进行实践。如果需要跟着进行编程实践，请先确保下列环境已安装：</p>
<ul>
<li><a href="https://www.python.org/" target="_blank" rel="external">Python</a> - 编程实践所使用的语言；</li>
<li><a href="https://pypi.python.org/pypi/numpy" target="_blank" rel="external">Numpy</a> - Python 的数值计算库。</li>
</ul>
<p>矩阵（Matrix）是人为约定的一种数据的表示方法，在图像处理、人工智能等领域，使用矩阵来表示和处理数据非常常见。<a id="more"></a>一个矩阵的举例：</p>
<p>\[\mathbf{A}_{2 \times 3}=\begin{bmatrix} 5 &amp; 2 &amp; 7 \\ 1 &amp; 3 &amp; 4  \end{bmatrix}\]</p>
<p>其中，矩阵 \(\mathbf{A}\) 的下标 \(2 \times 3\) 表示 \(\mathbf{A}\) 是一个 2 行 3 列的矩阵。类似的，另一个示例：</p>
<p>\[\mathbf{ B }_{ 4 \times 4 }=\begin{bmatrix} 5 &amp; 2 &amp; 7 &amp; 6 \\ 1 &amp; 3 &amp; 4 &amp; 2 \\ 7 &amp; -1 &amp; 9 &amp; 0 \\ 8  &amp; 2 &amp; -2 &amp; 3 \end{bmatrix}\]</p>
<p>再看回矩阵 \(\mathbf{A}\) ，如果要表示第 2 行的第 2 个元素 3 ，可以使用 \(\mathbf{A}[2, 2]\) 或 \(a_{2,2}\)。</p>
<p>Python 的 Numpy 库提供了 ndarray 类用于存储高维数组及普通的数组运算，另外提供 matrix 类用来支持矩阵运算。使用 Python 创建矩阵很简单：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.matrix(<span class="string">'5 2 7;1 3 4'</span>)</div><div class="line">b = np.matrix(<span class="string">'5 2 7 6;1 3 4 2;8 2 -2 3'</span>)</div></pre></td></tr></table></figure></p>
<p>也可以用下面这种形式：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.matrix([[<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]])</div><div class="line">b = np.matrix([[<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">8</span>,<span class="number">2</span>,-<span class="number">2</span>,<span class="number">3</span>]])</div></pre></td></tr></table></figure></p>
<p>两种形式完全等效。但第一种更简明直观，不容易犯错。因此推荐第一种方式。</p>
<p>要把一个 matrix 对象转换为 ndarray 对象，可以直接用 <code>getA()</code> 方法。而把 ndarray 对象转成 matrix 对象可以用 <code>asmatrix()</code> 方法。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = a.getA()</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> b</div><div class="line">[[<span class="number">5</span> <span class="number">2</span> <span class="number">7</span>]</div><div class="line"> [<span class="number">1</span> <span class="number">3</span> <span class="number">4</span>]]</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>type(b)</div><div class="line">&lt;type <span class="string">'numpy.ndarray'</span>&gt;</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c = np.asmatrix(b)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> c</div><div class="line">[[<span class="number">5</span> <span class="number">2</span> <span class="number">7</span>]</div><div class="line"> [<span class="number">1</span> <span class="number">3</span> <span class="number">4</span>]]</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>type(c)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">matrixlib</span>.<span class="title">defmatrix</span>.<span class="title">matrix</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>要取出矩阵中的某个值，可以使用类似数组的下标运算符。但要注意的是，计算机是以 0 开始计数的。例如，要取出 \(\mathbf{A}[2,2]\) ，应该使用：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a[<span class="number">1</span>,<span class="number">1</span>]</div><div class="line">a[<span class="number">1</span>,<span class="number">1</span>]</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="基本运算">基本运算</h2>
<h3 id="加">加</h3>
<p>矩阵加法的定义非常符合直觉。假设有 \(\mathbf{ A }_{ 3 \times 3 }=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}\) ， \(\mathbf{ B }_{ 3 \times 3 }=\begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix}\) ，则:</p>
<p>\[\mathbf{A}+\mathbf{B} = \begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix} + \begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix} = \begin{bmatrix} 1+2 &amp; 0+1 &amp; 1+(-1) \\ 1+ 0 &amp; 2+(-1) &amp; 1+2 \\ 2+2 &amp; 1+(-1) &amp; 1+0 \end{bmatrix} = \begin{bmatrix} 3 &amp; 1 &amp; 0 \\ 1 &amp; 1 &amp; 3 \\ 4 &amp; 0 &amp; 1 \end{bmatrix} \]</p>
<p>要注意两个矩阵的行数和列数必须相同，否则无定义。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 0 1;1 2 1;2 1 1'</span>)</div><div class="line">a = np.matrix(<span class="string">'1 0 1;1 2 1;2 1 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'2 1 -1;0 -1 2;2 -1 0'</span>)</div><div class="line">b = np.matrix(<span class="string">'2 1 -1;0 -1 2;2 -1 0'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a + b</div><div class="line">a + b</div><div class="line">matrix([[<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>],</div><div class="line">        [<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>]])</div></pre></td></tr></table></figure></p>
<p>很容易看出，矩阵的加法满足交换律和结合律，即 \(\mathbf{A} + \mathbf{B} = \mathbf{B} + \mathbf{A}\)， \((\mathbf{A} + \mathbf{B}) + \mathbf{C} = \mathbf{A} + (\mathbf{B} + \mathbf{C})\)。</p>
<h3 id="减">减</h3>
<p>矩阵减法也和加法一样简单。对于上面给出的 \(\mathbf{A}\) 和 \(\mathbf{B}\)，有：</p>
<p>\[\mathbf{A}-\mathbf{B}=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}-\begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix}=\begin{bmatrix} 1-2 &amp; 0-1 &amp; 1-(-1) \\ 1-0 &amp; 2-(-1) &amp; 1-2 \\ 2-2 &amp; 1-(-1) &amp; 1-0 \end{bmatrix}=\begin{bmatrix} -1 &amp; -1 &amp; 2 \\ 1 &amp; 3 &amp; -1 \\ 0 &amp; 2 &amp; 1 \end{bmatrix}\]</p>
<p>同样，相减的两个矩阵行数和列数必须完全相同，否则无定义。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a - b</div><div class="line">a - b</div><div class="line">matrix([[-<span class="number">1</span>, -<span class="number">1</span>,  <span class="number">2</span>],</div><div class="line">        [ <span class="number">1</span>,  <span class="number">3</span>, -<span class="number">1</span>],</div><div class="line">        [ <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">1</span>]])</div></pre></td></tr></table></figure></p>
<h3 id="乘">乘</h3>
<p>矩阵乘法的定义是 \(\mathbf{A}_{i \times j}\) 矩阵的每一行的元素分别与 $\mathbf{B}_{j \times k} $ 矩阵的每一列的元素两两相乘并相加，从而得到一个新的矩阵 \(\mathbf{C}_{i \times k}\) 。两个矩阵能相乘的充分必要条件是第一个矩阵的列数与第二个矩阵的行数相等，否则无定义。例如，对于上面给出的 \(\mathbf{A}\) 和 \(\mathbf{B}\)，有：</p>
<p>\[\begin {aligned} 
\mathbf{A} \times \mathbf{B} &amp;=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}\times \begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix} \\\ &amp;=\begin{bmatrix} 1\cdot 2+0\cdot 0+1\cdot 2 &amp; 1\cdot 1+0\cdot (-1)+1\cdot (-1) &amp; 1\cdot (-1)+0\cdot 2+1\cdot 0 \\ 1\cdot 2+2\cdot 0+1\cdot 2 &amp; 1\cdot 1+2\cdot (-1)+1\cdot (-1) &amp; 1\cdot (-1)+2\cdot 2+1\cdot 0 \\ 2\cdot 2+1\cdot 0+1\cdot 2 &amp; 2\cdot 1+1\cdot (-1)+1\cdot (-1) &amp; 2\cdot (-1)+1\cdot 2+1\cdot 0 \end{bmatrix}\\\ &amp;=\begin{bmatrix} 4 &amp; 0 &amp; -1 \\ 4 &amp; -2 &amp; 3 \\ 6 &amp; 0 &amp; 0 \end{bmatrix}
\end {aligned} \]</p>
<p>再举一个行列数不同的例子， 假设有 \(\mathbf{C}_{2 \times 3} = \begin{bmatrix} 5 &amp; 7 &amp; 2 \\ 4 &amp; 3 &amp; 1 \end{bmatrix}\) 和 \(\mathbf{D}_{3 \times 1} = \begin{bmatrix} 1 \\ 5 \\ 6 \end{bmatrix}\)，则可以得出：</p>
<p>\[
\mathbf{C}\times \mathbf{D} = \begin{bmatrix} 5 &amp; 7 &amp; 2 \\ 4 &amp; 3 &amp; 1 \end{bmatrix}\times \begin{bmatrix} 1 \\ 5 \\ 6 \end{bmatrix}
 =\begin{bmatrix} 5 \cdot 1+ 7 \cdot 5+ 2\cdot 6 \\ 4\cdot 1+3\cdot 5+1\cdot 6  \end{bmatrix} =\begin{bmatrix} 52 \\ 25 \end{bmatrix}
\]</p>
<p>与初等代数的乘法不同，矩阵的乘法并不满足交换律，即 \(\mathbf{A} \times \mathbf{B} \ne \mathbf{B} \times \mathbf{A}\)。但满足分配律，即 \((\mathbf{A} \times \mathbf{B}) \times \mathbf{C} = \mathbf{A} \times (\mathbf{B} \times \mathbf{C})\)。</p>
<p>再介绍两个特殊的矩阵：</p>
<ol>
<li>单元矩阵 \(\mathbf{I}\) 。它的特点是行数列数相等，且在对角线上值为 1，其他地方值为 0 。它的一个特性是与其他矩阵相乘都等于那个矩阵本身。一个 \(3\times 3\) 的单元矩阵示例：\[\mathbf{I}_{3 \times 3} = \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\]</li>
<li>零矩阵。顾名思义就是全部元素都是 0 的矩阵。零矩阵乘以任何矩阵都为零矩阵，与任何矩阵相加都等于那个矩阵。</li>
</ol>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * b</div><div class="line">a * b</div><div class="line">matrix([[ <span class="number">4</span>,  <span class="number">0</span>, -<span class="number">1</span>],</div><div class="line">        [ <span class="number">4</span>, -<span class="number">2</span>,  <span class="number">3</span>],</div><div class="line">        [ <span class="number">6</span>,  <span class="number">0</span>,  <span class="number">0</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b * a</div><div class="line">b * a</div><div class="line">matrix([[ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">2</span>],</div><div class="line">        [ <span class="number">3</span>,  <span class="number">0</span>,  <span class="number">1</span>],</div><div class="line">        [ <span class="number">1</span>, -<span class="number">2</span>,  <span class="number">1</span>]])        </div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c = np.matrix(<span class="string">'5 7 2;4 3 1'</span>)</div><div class="line">c = np.matrix(<span class="string">'5 7 2;4 3 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>d = np.matrix(<span class="string">'1;5;6'</span>)</div><div class="line">d = np.matrix(<span class="string">'1;5;6'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c*d</div><div class="line">c*d</div><div class="line">matrix([[<span class="number">52</span>],</div><div class="line">        [<span class="number">25</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * b * d</div><div class="line">a * b * d</div><div class="line">matrix([[-<span class="number">2</span>],</div><div class="line">        [<span class="number">12</span>],</div><div class="line">        [ <span class="number">6</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * (b * d)</div><div class="line">a * (b * d)</div><div class="line">matrix([[-<span class="number">2</span>],</div><div class="line">        [<span class="number">12</span>],</div><div class="line">        [ <span class="number">6</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>I = np.eye(<span class="number">3</span>)  <span class="comment"># 创建一个3阶单元矩阵</span></div><div class="line">I = np.np.eye(<span class="number">3</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * I</div><div class="line">a * I</div><div class="line">matrix([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>I * a</div><div class="line">I * a</div><div class="line">matrix([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * z</div><div class="line">a * z</div><div class="line">matrix([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b * z</div><div class="line">b * z</div><div class="line">matrix([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c * z</div><div class="line">c * z</div><div class="line">matrix([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div></pre></td></tr></table></figure></p>
<p>注意上面创建单元矩阵用了 ‘eye()’ 函数，它等同于下面的写法：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>I = np.matrix(<span class="string">'1 0 0;0 1 0;0 0 1'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="除-求逆">除（求逆）</h3>
<p>矩阵并没有一个直接叫除法的操作。但有个与之相似的运算，叫做求逆运算。</p>
<p>矩阵 \(\mathbf{A}\) 的逆 \(\mathbf{A}^{-1}\) 被定义为一个与 \(\mathbf{A}\) 相乘后能得到一个单元矩阵的矩阵。即：\(\mathbf{A} \times \mathbf{A}^{-1} = \mathbf{I}\)。求逆这个操作本身是可逆的，一个矩阵的逆的逆也是这个矩阵本身。因此 \(\mathbf{A}^{-1} \times \mathbf{A} = \mathbf{I}\)。根据这个特点我们可以推断出能求逆的矩阵，其行数和列数也必然相同。</p>
<p>为什么说这个求逆操作很像除等代数的除法呢？因为矩阵的逆很像数的倒数，一个数乘以它的倒数等于 1。而拿倒数与其他数相乘，就相当于被其他数除。</p>
<p>矩阵的求逆有很多种方法。常见的有伴随阵法、初等变换法、分块矩阵求逆法等。</p>
<h4 id="伴随阵法">伴随阵法</h4>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p><strong>定理</strong> \(n\) 阶矩阵 \(\mathbf{A}=\begin{bmatrix}a_{ij}\end{bmatrix}\) 为可逆的充分必要条件是 \(\mathbf{A}\) 非奇异。且</p>
<p>\[\mathbf{A}^{-1}=\frac{1}{|\mathbf{A}|}\begin{bmatrix}A_{11} &amp; A_{21} &amp; \ldots &amp; A_{n1} \\ A_{12} &amp; A_{22} &amp; \ldots &amp; A_{n2} \\ \ldots &amp; \ldots &amp; \ldots &amp; \ldots \\ A_{1n} &amp; A_{2n} &amp; \ldots &amp; A_{nn} \end{bmatrix}\]</p>
<p>其中 \(\mathbf{A}_{ij}\) 是 \(|\mathbf{A}|\) 中元素 \(a_{ij}\) 的代数余子式。</p>
</div></p>
<p>矩阵 \(\begin{bmatrix}A_{11} &amp; A_{21} &amp; \ldots &amp; A_{n1} \\ A_{12} &amp; A_{22} &amp; \ldots &amp; A_{n2} \\ \ldots &amp; \ldots &amp; \ldots &amp; \ldots \\ A_{1n} &amp; A_{2n} &amp; \ldots &amp; A_{nn} \end{bmatrix}\) 称为矩阵 \(\mathbf{A}\) 的伴随矩阵，记作 \(\mathbf{A}^{*}\) ，于是有 \(\mathbf{A}^{-1}=\frac{1}{|\mathbf{A}|}\mathbf{A}^{*}\)。</p>
<p>对于二阶矩阵，使用伴随阵法比较简单。</p>
<p>假定一个矩阵 \(\mathbf{M}=\begin{bmatrix} a &amp; b \\ c &amp; d \end{bmatrix}\)，则</p>
<p>\[\mathbf{M}^{-1}=\frac{1}{|\mathbf{M}|}\begin{bmatrix} d &amp; -b \\ -c &amp; a \end{bmatrix}\]</p>
<p>，其中 \(|\mathbf{M}|\) 称为矩阵 \(\mathbf{M}\) 的行列式：</p>
<p>\[|\mathbf{M}| = ad - bc\]</p>
<p>，而 \(\begin{bmatrix} d &amp; -b \\ -c &amp; a \end{bmatrix}\) 就是矩阵 \(\mathbf{M}\) 的伴随矩阵。</p>
<p>例如，对于矩阵 \(A = \begin{bmatrix} 5 &amp; 7 \\ 3 &amp; 2 \end{bmatrix}\)，那么有：</p>
<p>\[|\mathbf{A}|=5\cdot 2-7\cdot 3=-11\]</p>
<p>，则</p>
<p>\[\mathbf{A}^{ -1 }=\frac { 1 }{ -11 } \begin{bmatrix} 2 &amp; -7 \\ -3 &amp; 5 \end{bmatrix}=\begin{bmatrix} -\frac { 2 }{ 11 }  &amp; \frac { 7 }{ 11 }  \\ \frac { 3 }{ 11 }  &amp; -\frac { 5 }{ 11 }  \end{bmatrix}\]</p>
<p>验证一下 \(\mathbf{A} \times \mathbf{A}^{-1}\) 的值是否等于 \(\mathbf{I}\) ，有：</p>
<p>\[\mathbf{A}\times \mathbf{A}^{ -1 }=\begin{bmatrix} 5 &amp; 7 \\ 3 &amp; 2 \end{bmatrix}\times \begin{bmatrix} -\frac { 2 }{ 11 }  &amp; \frac { 7 }{ 11 }  \\ \frac { 3 }{ 11 }  &amp; -\frac { 2 }{ 11 }  \end{bmatrix}=\begin{bmatrix} 5\cdot \left( -\frac { 2 }{ 11 }  \right) +7\cdot \frac { 3 }{ 11 }  &amp; 5\cdot \frac { 7 }{ 11 } +\left( -7\cdot \frac { 5 }{ 11 }  \right)  \\ 3\cdot \left( -\frac { 2 }{ 11 }  \right) +2\cdot \frac { 3 }{ 11 }  &amp; 3\cdot \frac { 7 }{ 11 } +2\cdot \left( -\frac { 5 }{ 11 }  \right)  \end{bmatrix}=\begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 1 \end{bmatrix} = \mathbf{I}\]</p>
<h4 id="初等变换法">初等变换法</h4>
<p>求元素为具体数字的矩阵的逆矩阵，常用初等变换法（又称为高斯·约当消去法）。用矩阵表示 $(\mathbf{A} \mathbf{I})\xrightarrow [  ]{ 初等变换 } (\mathbf{I} \mathbf{A}^{-1}) $ ，就是求逆矩阵的初等行变换法。\((\mathbf{A} \mathbf{I})\) 被称为矩阵 \(\mathbf{A}\) 的增广矩阵。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>矩阵的初等行变换和初等列变换，统称矩阵的初等变换。下面的三种变换称为矩阵的初等行变换：</p>
<ol>
<li>对调两行；</li>
<li>以数 \(k \ne 0\) 乘某一行的所有元素；</li>
<li>把某一行所有元素的 \(k\) 倍加到另一行对应的元素上去。</li>
</ol>
</div></p>
<p>把上面定义中的“行”换成“列”，既得矩阵的初等列变换的定义。如果矩阵A经过有限次初等变换变成矩阵B，就称矩阵A与B等价。</p>
<p>三阶以上的伴随矩阵如果使用伴随阵法求逆，需要求9个或9个以上的代数余子式，以及一个三阶或三阶以上的行列式，过程比较繁琐。相比之下，使用初等变换就简单很多。</p>
<p>假定有三阶矩阵 \({ \mathbf{A} }_{ 3 \times 3 }=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}\) ，则：</p>
<p>\[
\begin{aligned}
\begin{bmatrix}\mathbf{A} \mathbf{I}\end{bmatrix} 
&amp; \rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
1 &amp; 2 &amp; 1 &amp; 0 &amp; 1 &amp; 0 \\
2 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 2 &amp; 0 &amp; -1 &amp; 1 &amp; 0 \\
2 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
2 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}\\
&amp; \rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
1 &amp; 1 &amp; 0 &amp; -1 &amp; 0 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
1 &amp; 0 &amp; 0 &amp; -0.5 &amp; -0.5 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
0 &amp; 0 &amp; 1 &amp; 1.5 &amp; 0.5 &amp; -1 \\
0 &amp; 1 &amp; 0 &amp; 0 &amp; 0.5 &amp; 0 \\
1 &amp; 0 &amp; 0 &amp; -0.5 &amp; -0.5 &amp; 1
\end{bmatrix}\\
&amp;\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 0 &amp; -0.5 &amp; -0.5 &amp; 1 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
0 &amp; 0 &amp; 1 &amp; 1.5 &amp; 0.5 &amp; -1
\end{bmatrix}
\end{aligned}
\]</p>
<p>因此</p>
<p>\[\mathbf{A}^{-1}=\begin{bmatrix}-0.5 &amp; -0.5 &amp; 1 \\ -0.5 &amp; 0.5 &amp; 0 \\ 1.5 &amp; 0.5 &amp; -1\end{bmatrix}\]</p>
<h4 id="奇异矩阵">奇异矩阵</h4>
<p>要注意的是，<strong>矩阵并不一定都可逆的</strong>。从定义来看，只要矩阵 \(\mathbf{M}\) 的行列式 \(|\mathbf{M}|\) 为 0 ，则 \[\mathbf{M}^{-1}=\frac{1}{|\mathbf{M}|}\begin{bmatrix} d &amp; -b \\ -c &amp; a \end{bmatrix}\] 的值就无定义。我们把这种矩阵叫做 <strong>奇异矩阵</strong> 。</p>
<p>例如矩阵 \(\begin{bmatrix}0 &amp; 0\\ 0 &amp; 1\end{bmatrix}\) ，其行列式的值为 \(0 \cdot 1 - 0 \cdot 0 = 0\) ，因此无法求逆。</p>
<p>Python 求逆示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 0 1; 1 2 1; 2 1 1'</span>)</div><div class="line">a = np.matrix(<span class="string">'1 0 1; 1 2 1; 2 1 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.I</div><div class="line">a.I</div><div class="line">matrix([[-<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.</span> ],</div><div class="line">        [-<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.</span> ],</div><div class="line">        [ <span class="number">1.5</span>,  <span class="number">0.5</span>, -<span class="number">1.</span> ]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * a.I</div><div class="line">a * a.I</div><div class="line">matrix([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]]</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.I * a</div><div class="line">a.I * a</div><div class="line">matrix([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>f = np.matrix(<span class="string">'0 1;0 0'</span>)</div><div class="line">f = np.matrix(<span class="string">'0 1;0 0'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>f.I</div><div class="line">f.I</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/Library/Python/2.7/site-packages/numpy/matrixlib/defmatrix.py"</span>, line <span class="number">972</span>, <span class="keyword">in</span> getI</div><div class="line">    <span class="keyword">return</span> asmatrix(func(self))</div><div class="line">  File <span class="string">"/Library/Python/2.7/site-packages/numpy/linalg/linalg.py"</span>, line <span class="number">526</span>, <span class="keyword">in</span> inv</div><div class="line">    ainv = _umath_linalg.inv(a, signature=signature, extobj=extobj)</div><div class="line">  File <span class="string">"/Library/Python/2.7/site-packages/numpy/linalg/linalg.py"</span>, line <span class="number">90</span>, <span class="keyword">in</span> _raise_linalgerror_singular</div><div class="line">    <span class="keyword">raise</span> LinAlgError(<span class="string">"Singular matrix"</span>)</div><div class="line">numpy.linalg.linalg.LinAlgError: Singular matrix</div></pre></td></tr></table></figure></p>
<h3 id="矩阵的转置">矩阵的转置</h3>
<p>矩阵 \(\underset{m\times n}{\mathbf{A}} = \begin{bmatrix}a_{11} &amp; a_{12} &amp; \ldots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \ldots &amp; a_{2n} \\ \ldots \\ a_{m1} &amp; a_{m2} &amp; \ldots &amp; a_{mn}\end{bmatrix}\) 的转置定义为 \(\underset{n\times n}{A^{T}} = \begin{bmatrix}a_{11} &amp; a_{21} &amp; \ldots &amp; a_{m1} \\ a_{12} &amp; a_{22} &amp; \ldots &amp; a_{m2} \\ \ldots \\ a_{1n} &amp; a_{2n} &amp; \ldots &amp; a_{mn}\end{bmatrix}\)</p>
<p>例如矩阵 \(\mathbf{A} = \begin{bmatrix} 2 &amp; 4 \\ 1 &amp; 3\end{bmatrix}\) 的转置矩阵就是 \(\mathbf{A}^T = \begin{bmatrix} 2 &amp; 1 \\ 4 &amp; 3\end{bmatrix}\)；矩阵 \(\mathbf{B} = \begin{bmatrix} 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \end{bmatrix}\) 的转置矩阵就是 \(\mathbf{B}^T = \begin{bmatrix} 1 &amp; 4 \\ 2 &amp; 5 \\ 3 &amp; 6\end{bmatrix}\)。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'2 4;1 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.T</div><div class="line">matrix([[<span class="number">2</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">4</span>, <span class="number">3</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'1 2 3;4 5 6'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b.T</div><div class="line">matrix([[<span class="number">1</span>, <span class="number">4</span>],</div><div class="line">        [<span class="number">2</span>, <span class="number">5</span>],</div><div class="line">        [<span class="number">3</span>, <span class="number">6</span>]])</div></pre></td></tr></table></figure></p>
<p>矩阵的转置有一个性质：矩阵乘积的转置等于矩阵调换后分别做转置的乘积，即 \[(\mathbf{A}\cdot \mathbf{B})^T = \mathbf{B}^T\cdot \mathbf{A}^T\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'2 4;1 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'1 6;2 5'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a*b</div><div class="line">matrix([[<span class="number">10</span>, <span class="number">32</span>],</div><div class="line">        [ <span class="number">7</span>, <span class="number">21</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b.T*a.T</div><div class="line">matrix([[<span class="number">10</span>,  <span class="number">7</span>],</div><div class="line">        [<span class="number">32</span>, <span class="number">21</span>]])</div></pre></td></tr></table></figure></p>
<h2 id="应用举例">应用举例</h2>
<p>矩阵是一种非常通用的数据表示方法，只要能用矩阵来表示数据，就能够用矩阵的这套运算来解决问题。下面列举几种常见的数学问题，它们都能够使用矩阵的思路来解决。</p>
<h3 id="求解方程组">求解方程组</h3>
<p>例如一个二元方程组</p>
<p>\[\left\{ \begin{eqnarray} 3x+2y &amp; = &amp; 7 \\ -x+y &amp; = &amp; 1 \end{eqnarray} \right. \]</p>
<p><img src="/images/math-linear-algebra/fig1.png" alt=""></p>
<p>可以用矩阵表示成：</p>
<p>\[\begin{bmatrix}
3 &amp; 2 \\
-1 &amp; 1
\end{bmatrix}
\begin{bmatrix}
x \\
y
\end{bmatrix}
=
\begin{bmatrix}
7\\
1
\end{bmatrix}
\]</p>
<p>设公式里的 \(\begin{bmatrix} 3 &amp; 2 \\ -1 &amp; 1\end{bmatrix}\) 为矩阵 \(A\)，将等式两边左乘一个 \(A\) 的逆得到：</p>
<p>\[
\begin{aligned}
A^{-1}A
\begin{bmatrix}
x \\ y
\end{bmatrix}
&amp;= 
A^{-1}
\begin{bmatrix}
7\\
1
\end{bmatrix}\\\
&amp;=
\frac{1}{|A|}\begin{bmatrix}1 &amp; -2 \\ 1 &amp; 3\end{bmatrix}
\begin{bmatrix}
7\\
1
\end{bmatrix}\\\
&amp;=
\frac{1}{5}\begin{bmatrix}1 &amp; -2 \\ 1 &amp; 3\end{bmatrix}
\begin{bmatrix}
7\\
1
\end{bmatrix}\\\
&amp;=
\frac{1}{5}\begin{bmatrix}5 \\ 10\end{bmatrix}
\end{aligned}
\]</p>
<p>因此：
\(\begin{bmatrix}x \\ y\end{bmatrix}=\begin{bmatrix}1 \\ 2\end{bmatrix}\)</p>
<p><img src="/images/math-linear-algebra/fig1-answer.png" alt=""></p>
<p>虽然这个例子给出的方法用于二元一次矩阵求解还不如直接用初中就学到的消元法，但矩阵的好处在于对于更高维的数据，比如有成百上千个未知数，这个解法依然有效。</p>
<p>在 Python 中，可以使用 Numpy 的线性代数算法库 <code>linalg</code> 提供的 <code>solve</code> 方法求解方程组。示例如下：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'3 2; -1 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'7; 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>np.linalg.solve(a, b)</div><div class="line">matrix([[ <span class="number">1.</span>],</div><div class="line">        [ <span class="number">2.</span>]])</div></pre></td></tr></table></figure></p>
<h3 id="求向量组合">求向量组合</h3>
<p>假设有向量 \(\vec { a }  =  \begin{bmatrix} 3 \\ -1 \end{bmatrix}\) ，\(\vec { b }  =  \begin{bmatrix} 2 \\ 1 \end{bmatrix}\) ，求二者如何组合成向量 \(\vec { c }  =  \begin{bmatrix} 7 \\ 1 \end{bmatrix}\) ？</p>
<p><img src="/images/math-linear-algebra/fig2.png" alt=""></p>
<p>如果用 \(x\) 和 \(y\) 分别表示两个向量的倍数，这个问题就同样可以用矩阵表示成：</p>
<p>\[\begin{bmatrix}
3 \\
-1 
\end{bmatrix}
x + 
\begin{bmatrix}
2 \\
1
\end{bmatrix}
y
=
\begin{bmatrix}
7\\
1
\end{bmatrix}
\]</p>
<p>这样就得到了一个和上一个问题完全同构的问题，使用相同解法解决得出
\(\begin{bmatrix}x \\ y\end{bmatrix}=\begin{bmatrix}1 \\ 2\end{bmatrix}\)。</p>
<p><img src="/images/math-linear-algebra/fig2-answer.png" alt=""></p>
<h2 id="深入阅读">深入阅读</h2>
<ol>
<li><a href="http://www.doc88.com/p-086655362651.html" target="_blank" rel="external">逆矩阵的几种求法与解析</a></li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/Linear-Algebra/" term="Linear Algebra"/>
    <category scheme="http://hahack.com/tags/Math/" term="Math"/>
    <category scheme="http://hahack.com/tags/Matrix/" term="Matrix"/>
    <category scheme="http://hahack.com/categories/math/" term="math"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（三）：分支管理策略]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-3/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-3/</id>
    <published>2016-04-29T07:45:29.000Z</published>
    <updated>2017-02-11T04:41:08.099Z</updated>
    <content type="html"><![CDATA[<p>说到版本控制，就不得不提到分支管理策略。就像学开车必须学学交通规则。分支管理策略是代码版本控制的基础组成部分。为团队定制一套合适的分支管理策略，就好比制定了一套合理的交通规则，可以让团队的代码的更加有序地演进，尽可能降低多分支带来的复杂度，并避免由于分支混乱引发的各种“车祸”。本文将简单讨论下我们在开发过程中尝试的各种分支管理策略，在面对各种复杂场景下呈现的优势与不足，以及我们的妥协和后续期望。</p>
<h2 id="github-flow">Github-Flow</h2>
<p>作为 Github 的重度用户，我首先考虑的当然是 <a href="https://guides.github.com/introduction/flow/index.html" target="_blank" rel="external">Github-Flow</a> 。</p>
<p><img src="/images/enterprise-class-git-version-control-3/github-flow.png" alt="Github-Flow"></p>
<p>Github-Flow 是一种非常简单的分支管理方案。它的流程只有如下几步：</p>
<ol>
<li>拉出一个新分支；</li>
<li>在新分支上进行修改，并提交和推送你的改动；</li>
<li>发起一个 Pull Request ，向代码管理员申请将你提交的分支合并到原来的分支；</li>
<li>讨论并接受 Code Review。在这个过程中，你依然可以继续推送新的代码到你的开发分支上，并且新的提交在推送后会出现在未完成合并的 Pull Request 页面中；</li>
<li>合并和发布。Review 通过后，代码管理员将该分支合并到原来的主分支上。</li>
</ol>
<a id="more"></a>
<p>在 Gitlab 中同样可以使用 Github-Flow，唯一的区别是叫法从 <q>Pull Request</q> 变成了 <q>Merge Request</q> 。下图是一个被成功合并的 Merge Request：</p>
<p><img src="/images/enterprise-class-git-version-control-3/merge-request.png" alt="Gitlab 中的 Merge Request"></p>
<p>Github-Flow 有如下几个让人着迷的优点：</p>
<ol>
<li>简单好操作。只有主分支和开发分支。不像 Git-Flow 那样需要引入一堆的辅助分支。</li>
<li>推动 Code Review 。通过 Pull Request 的方式，使得 Code Review 成为了日常开发的必经流程，有助于。</li>
<li>确保可编译。所有 Pull Request 都会触发持续集成测试，只有通过测试的才允许并入主分支。这就杜绝了代码编译不过的情况。</li>
</ol>
<p>然而，面对复杂的项目，Github-Flow 暴露出了如下的不足：</p>
<ol>
<li>解决冲突困难。多人协作的项目难免会出现冲突，一旦遇到冲突，Merge Request 就没法被直接被合并了。这个时候只能再从目标分支拉出一个分支→合并这个分支→解决完冲突→推上远程仓库再次发起 Merge Request 。对于大多数习惯了用 Merge Request 合并分支的人来说，这个过程一下子复杂了起来。
<img src="/images/enterprise-class-git-version-control-3/conflict.png" alt="存在冲突的 Merge Request"></li>
<li>Code Review 容易流于形式。虽然 Github-Flow 加入了 Code Review 的过程，但这依然取决于双方对待 Code Review 的积极性。如果没有充分的讨论代码的细节，仍然无法保证代码的质量。实际团队开发中，我们发现在线进行的 Code Review 并不如面对面讨论高效。更严重的是一旦双方没有 keep moving 的意识，大量 Merge Request 被积压，而这些 Merge Request 会不断包含新的 commit 进来，这就会使得 Merge Request 更加难以合并。</li>
<li>持续集成测试无法保证子模块可编译。持续集成可以作为 Merge Request 的准入条件，但这仅仅只是主工程的“福利”。而如<a href="/work/enterprise-class-git-version-control-2/">上一篇文章</a>所说，子模块的持续集成远比主工程复杂得多，难以直接在 Merge Request 页面中给出持续集成测试结果。而对于我们的项目，主工程基本没有多少业务代码，大部分的功能开发都是在子模块上，这就使得 Merge Request 的持续集成功能显得鸡肋了。</li>
<li>还有一些 Gitlab 的交互问题。在 Gitlab 中，默认的合并目标分支是 master 分支：
<img src="/images/enterprise-class-git-version-control-3/default-branch.png" alt="">
当你花上一分钟填完合并描述，选完指派人后，发现目标分支忘了改。此时就只能点击页面下方的 “Change Branches” 链接进入分支选择页重新选择分支。回来后你会发现你所填写的所有内容，包括指派人都被清空了：
<img src="/images/enterprise-class-git-version-control-3/empty.png" alt="">
不细心的人往往没注意到这个问题，于是提交了一个没有指派人的 Merge Request ，这带来的后果是这个 Merge Request 永远没人关注和合并。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/enterprise-class-git-version-control-3/Cathedral-and-the-Bazaar-book-cover.jpg" alt=" 《大教堂与集市》这本书讨论了两种软件开发模式及背后的哲学。"><b>图 1</b>  《大教堂与集市》这本书讨论了两种软件开发模式及背后的哲学。</span></span></span></li>
</ol>
<p>综上所述，Github-Flow 更适用于那些只以 master 分支为主分支，更注重迅速发布的简单项目。这使其非常适合用在维护 Github 上的这些<q>集市型</q>的的开源项目，而不适用于<q>大教堂型</q>的企业级项目。正如 Github 的 <a href="http://scottchacon.com/" target="_blank" rel="external">Scott Chancon</a> 大神所说：</p>
<blockquote>
<p>For teams that have to do formal releases on a longer term interval (a few weeks to a few months between releases), and be able to do hot-fixes and maintenance branches and other things that arise from shipping so infrequently, git-flow makes sense and I would highly advocate it’s use.</p>
<p>For teams that have set up a culture of shipping, who push to production every day, who are constantly testing and deploying, I would advocate picking something simpler like GitHub Flow.</p>
<p><strong>Scott Chancon</strong>, <a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank" rel="external"><em>Issues with git-flow</em></a></p>
</blockquote>
<h2 id="git-flow">Git-Flow</h2>
<p>Git-Flow 是由 <a href="http://nvie.com/about/" target="_blank" rel="external">Vincent Driessen</a> 在他的一篇文章 《<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A successful Git branching model</a>》 中提出的分支管理策略。</p>
<p><img src="/images/enterprise-class-git-version-control-3/git-flow.png" alt="Git-Flow"></p>
<p>与 Github-Flow 相比，Git-Flow 拥有更多的分支：</p>
<ul>
<li><strong>master</strong>：可以提供给用户使用的正式版本；</li>
<li><strong>develop</strong>：用来生成代码的隔夜版本（nightly）；</li>
<li>feature：用于开发某个功能；</li>
<li>hotfix：用于修复线上代码的 bug；</li>
<li>release：用于正式发布版本前的测试分支。</li>
</ul>
<p>Git-Flow 提出的分支管理策略完整而实用，它甚至已经成为了一个通用开发流程标准。开发者们可以在多个团队和项目中遵守同一套流程。但 Git-Flow 也不是万金油。遇到复杂的项目，它也未必能完全适用：</p>
<ol>
<li>
<p>容易出现冲突。Git-Flow 设计了多个分支各司其职，但多分支带来的苦恼是容易出现冲突。最常见的问题是，由于我们实现了<a href="/work/enterprise-class-git-version-control-2/">子模块 commit id 的自动更新</a>，主分支与开发分支的子模块 commit id 经常变动，导致 develop 分支向 master 分支合并的时候出现大量冲突，阻塞发版进度。</p>
</li>
<li>
<p>多产品线的问题。</p>
<p>我们的主工程存在多条产品线：master 分支仅仅维护一个基础模板，而 jilin 、taishan 等分支才是用于产出真正产品的分支。每条产品线的各自有一套 Git-Flow 分支体系，并用前缀区分产品线。例如 jilin 的 develop 分支就叫 jilin-dev 。而子模块既可能和主工程一样多个产品分支，也可能是一个通用模块。对于通用模块，只需要维护一套 Git-Flow 分支体系。例如 common 子模块就只有标准的 master、dev 等分支。</p>
<p>对于多产品分支的主工程和子模块，当改动了某个分支的代码，你就要非常慎重的考虑这部分改动是否通用，是否需要并入其他产品线的分支。而 Git-Flow 并没有探讨多个产品线并存情况下的代码合并方案。</p>
<p>对于通用的子模块，拉 release 分支时又存在<q>锁</q>的问题。比如，负责 jilin 产品线的同事即将发版，于是把 common 子模块拉出了一个 release 分支。其他产品线的同事依然可以继续为 common 子模块的 develop 分支提交 feature 。但还没等 jilin 产品线完成发版。taishan 产品线的同事也准备发版了，此时 release 分支早已经被 jilin 的同事拉出来，而这个 release 分支却没有 taishan 产品线要发版需要的 feature 。这就阻碍了 taishan 产品线的发版。</p>
</li>
</ol>
<h2 id="妥协与期望">妥协与期望</h2>
<p>为了化繁为简，我们做了些妥协：</p>
<ol>
<li>产品线取消 develop 分支。每条产品线取消 develop 分支，并放开产品线的主分支的提交权限。这种方案大幅减少了合并冲突的苦恼，避免发版受阻，而稳定性依然可以通过 feature 分支来保证。我们相信只要日后我们的模板足够完善，产品线的开发成本会越来越低，稳定性也会越来越强。</li>
<li>用 cherry-pick 来同步多条产品线的代码改动。对于通用的改动，可以使用 cherry-pick 来将改动同步到其他分支上。我们扩展了 <a href="/work/enterprise-class-git-version-control-1/#%E9%80%A0%E4%B8%AA%E8%BD%AE%E5%AD%90%EF%BC%9Afmanager">fmanager</a> 的功能，为其实现一个 cherry-pick 命令：</li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fmanager cherry-pick &lt;commit id&gt; &lt;分支列表&gt;</div></pre></td></tr></table></figure></p>
<p>例如，假如希望把 weihai 分支上的一个提交同步到其他分支，可以使用如下命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fmanager cherry-pick <span class="number">023</span>e937d master,jilin,taishan</div></pre></td></tr></table></figure></p>
<ol start="3">
<li>
<p>通用的子模块发版时，始终拉出产品 release 分支。</p>
<p>例如，jilin 产品线需要发版了，于是从 common 模块的 master_dev 拉出了 jilin-release 分支：</p>
<p><img src="/images/enterprise-class-git-version-control-3/common-1.png" alt=""></p>
<p>拉出分支后，与 jilin 分支有关的临时改动可以在 jilin-release 中进行。同时 common 模块依然可以给负责其他产品线的同事提交新 feature 。此时 taishan 产品线的同事如果要发版，可以拉出 taishan-release 分支：</p>
<p><img src="/images/enterprise-class-git-version-control-3/common-2.png" alt=""></p>
<p>之后，如果 jilin 产品线的同事修改了一个通用的 bug，同样可以将这个提交 cherry-pick 到其他分支：</p>
<p><img src="/images/enterprise-class-git-version-control-3/common-3.png" alt=""></p>
</li>
</ol>
<p>其实，与其说是 Github-Flow 和 Git-Flow 的问题，不如说是现阶段我们的产品架构的问题。用分支来实现产品线的差异化使得一个仓库出现了多个主分支，而这种复杂的模式已经超出了通用的分支管理流程所能解决的范畴。另外，现阶段子模块的不稳定也导致开发过程中不断需要跨产品线同步代码，给产品线的开发造成负担。</p>
<p>日后我们希望对工程的架构进行调整，通过配置文件来实现产品差异化，而不再创建产品分支。另外，子模块也会越来越稳定，可以低成本接入到各个产品线中，而不再需要频繁迭代。到了那一天，我们的项目就能够重新回归到严格的 Git-Flow ，将 <q>化繁为简</q> 做到极致。</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（二）：多分支子模块持续集成]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-2/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-2/</id>
    <published>2016-04-20T16:00:00.000Z</published>
    <updated>2017-02-11T04:41:08.099Z</updated>
    <content type="html"><![CDATA[<h2 id="需求描述">需求描述</h2>
<p>在 <a href="/work/enterprise-class-git-version-control-1/">上一篇文章</a> 中，我简单描述了我们一个项目的复杂程度：子模块、嵌套子模块、多分支。除了工程分支切换上的复杂，我们还遇到另一个问题：子模块持续集成。</p>
<h2 id="主工程持续集成">主工程持续集成</h2>
<p>先说说主工程如何做持续集成。我们使用 Gitlab 自带的 <a href="https://about.gitlab.com/gitlab-ci/" target="_blank" rel="external">Gitlab-Ci</a> 作为我们的持续集成系统。Android 端的主工程的持续集成脚本如下：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">build:</div><div class="line">  tags:</div><div class="line">    -<span class="ruby"> android</span></div><div class="line">  script:</div><div class="line">    -<span class="ruby"> ./fmanager checkout -f <span class="variable">$CI_BUILD_REF_NAME</span></span></div><div class="line">    -<span class="ruby"> ./fmanager update</span></div><div class="line">    -<span class="ruby"> gradle clean</span></div><div class="line">    -<span class="ruby"> gradle aR</span></div></pre></td></tr></table></figure></p>
<p>其中， <code>CI_BUILD_REF_NAME</code> 指定要编译哪个分支的主工程。当我们推送代码到某个分支时，该分支下的持续集成脚本就会被调用，<code>CI_BUILD_REF_NAME</code> 变量就会是那个分支的名字。在执行构建前，先用 fmanager 完成主工程和所有模块的分支切换 ，之后再用 fmanager 更新整个项目的代码。最后再执行编译指令。 <a id="more"></a></p>
<p>主工程的持续集成就是这么简单。然而这远远不能满足我们的需求：我们的工程有多个子模块。一个子模块的某个分支可能被多个父模块的多个分支依赖。例如，common 模块的 master_dev 分支可能被 framework 模块的 master_dev、jilin_dev、taishan_dev 分支依赖。在这样的情况下，任何一个子模块如果不注意提交前自测，都有可能导致多个分支的整个工程编译失败，阻塞多个分支的开发进度。比这更困难的是，对某个模块的修改也许可以保证在当前主工程分支上编译通过，但却意外导致了另外一个依赖该子模块的主工程分支的编译失败。</p>
<p>因此，我们除了要对主工程进行持续集成测试之外，也不得不对子模块做持续集成测试：任何一个子模块某个分支一旦推送了代码，就触发所有依赖它的主工程的分支的持续集成测试。为了实现这个目标，我们尝试了三种方案。</p>
<h2 id="方案一：trigger">方案一：trigger</h2>
<p>第一种方案是利用 Gitlab-Ci 的 <a href="http://doc.gitlab.com/ce/ci/triggers/README.html" target="_blank" rel="external">trigger</a> 机制。trigger 提供了直接在脚本中触发任何一个仓库的持续集成的方法。利用 trigger，我们可以为子模块也写一份持续集成脚本，而它仅仅用来触发依赖它的所有主工程的分支的持续集成。例如，假如主工程的 master_dev 分支和 jilin_dev 分支都依赖了 framework 子模块的 master_dev 分支，那么可以为 framework 的 master_dev 编写一个持续集成脚本：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">build:</div><div class="line">  stage: deploy</div><div class="line">  script:</div><div class="line">    -<span class="ruby"> <span class="string">"curl -X POST -F token=3ef8939a8e50c5e98f459789b966a4 -F ref=refs/heads/master_dev http://yourcompany.com/api/v3/projects/10/trigger/builds"</span></span></div><div class="line">    -<span class="ruby"> <span class="string">"curl -X POST -F token=3ef8939a8e50c5e98f459789b966a4 -F ref=refs/heads/jilin_dev http://yourcompany.com/api/v3/projects/10/trigger/builds"</span></span></div></pre></td></tr></table></figure></p>
<p>其中，<code>ref</code> 参数指定了要触发持续集成测试的项目的分支。这样，当中央仓库上 framework 模块的 master_dev 分支有新的代码推送时，主工程的 master_dev 分支和 jilin_dev 分支就会触发构建：</p>
<p><img src="/images/enterprise-class-git-version-control-2/trigger.png" alt=""></p>
<p>使用 trigger 虽然能有效触发所依赖的主工程的分支，但它有很多不足之处：</p>
<p>1、维护成本高。每个子模块都需要编写持续集成脚本，且由于主工程经常需要新增新业务分支，需要频繁维护每个子模块的持续集成脚本，添加依赖它的分支。
2、无法跟踪。子模块的持续集成脚本的作用仅仅只是触发了主工程的持续集成，而当次触发的结果并不会返回给子模块作为子模块持续集成的结果：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">gitlab-ci-multi-runner 1.0.4 (014aa8c)</div><div class="line">Using Shell executor...</div><div class="line">Running on appdevdeiMac.local...</div><div class="line">Fetching changes...</div><div class="line">HEAD is now at 826d126 <span class="operator"><span class="keyword">Merge</span> branch <span class="string">'master_dev'</span> <span class="keyword">of</span> http://yourcompany.com/yourgroup/framework_android <span class="keyword">into</span> master_dev</span></div><div class="line"><span class="keyword">From</span> http://yourcompany.com/FFProject/appframework_android</div><div class="line">   <span class="number">826</span>d126.<span class="number">.13</span>ba8f3  master_dev -&gt; origin/master_dev</div><div class="line">Checking out <span class="number">13</span>ba8f33 <span class="keyword">as</span> master_dev...</div><div class="line">Previous HEAD <span class="keyword">position</span> was <span class="number">826</span>d126... <span class="keyword">Merge</span> branch <span class="string">'master_dev'</span> <span class="keyword">of</span> http://yourcompany.com/yourgroup/framework <span class="keyword">into</span> master_dev</div><div class="line">HEAD <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> <span class="number">13</span>ba8f3... [master_dev][bank][c:panweizhou][r:chendingyi]<span class="keyword">update</span> ci script.</div><div class="line">$ curl -X POST -F token=<span class="number">2587402741</span>a9ef3a09d0dd64f83b90 -F ref=$CI_BUILD_REF_NAME http://yourcompany.com/api/v3/projects/<span class="number">11</span>/<span class="keyword">trigger</span>/builds</div><div class="line">  % Total    % Received % Xferd  Average Speed   <span class="keyword">Time</span>    <span class="keyword">Time</span>     <span class="keyword">Time</span>  <span class="keyword">Current</span></div><div class="line">                                 Dload  Upload   Total   Spent    <span class="keyword">Left</span>  Speed</div><div class="line">  <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> <span class="comment">--:--:-- --:--:-- --:--:--     0100   298  100    26  100   272    220   2304 --:--:-- --:--:-- --:--:--  2324</span></div><div class="line">{<span class="string">"id"</span>:<span class="number">48</span>,<span class="string">"variables"</span>:<span class="literal">null</span>}</div><div class="line">Build succeeded.</div></pre></td></tr></table></figure></p>
<p>所以子模块的持续集成一直是成功的：</p>
<p><img src="/images/enterprise-class-git-version-control-2/all-success.png" alt=""></p>
<p>而实际却可能早已导致主工程编译失败：</p>
<p><img src="/images/enterprise-class-git-version-control-2/all-fail.png" alt=""></p>
<p>3、无法定位触发源。主工程的构建日志页仅记录触发本次构建的 trigger 的 Token 。但这个 trigger 是主工程自己的 <code>--bb</code> 。</p>
<p><img src="/images/enterprise-class-git-version-control-2/trigger-token.png" alt=""></p>
<p>换句话说，除非为每一个子模块提供一个单独的 Token ，否则我们根本无法判断究竟是子模块触发了这个 trigger 。第一种方案歇菜。</p>
<h2 id="方案二：子模块测试工程">方案二：子模块测试工程</h2>
<p>第二种方案是为所有需要做集成测试的子模块都单独编写一个测试工程。当子模块有推送代码时，不再触发主工程的持续集成，而是触发测试工程的持续集成。</p>
<p>由于每个子模块与其测试工程是一对一的关系，一旦测试工程编译失败，那其对应的子模块就很有可能存在问题。然而这个方案也有很大的局限性。</p>
<ol>
<li>需要为每个核心子模块都维护一个测试工程，且测试工程的开发进度需要一直与主工程同步。当测试工程的维护进度落后于主工程，就有可能出现子模块能保证主工程编译通过，却导致测试工程编译不过。</li>
<li>当子模块有多个分支时，每个重要分支都需要相应建立测试工程的分支，这使得测试工程的维护成本同比增加。</li>
<li>最致命的问题是：子模块的测试工程仅仅只能覆盖子模块，而整个主工程由多个子模块组合而成的，模块与模块之间也有相互依赖关系，模块级别的覆盖度并不足以保证整个工程的可编译。</li>
</ol>
<p>综上所述，用子模块测试工程来对子模块进行持续集成并不理想。方案二也失败了。看来 trigger 并不适合用来解决我们的问题，于是我对 trigger 的尝试也到此为止。</p>
<h2 id="方案三：自动更新子模块-commit-id">方案三：自动更新子模块 commit id</h2>
<p>前面两种方案走不通，我开始思考：Git 难道就没有关于子模块持续集成的 best practice 吗？直到我看到了 <a href="https://blog.blahgeek.com/gitlab-ci-build-multi-repo/" target="_blank" rel="external">blahgeek 的这篇文章</a> ，里头提出用 commit id 的改动来触发工程更新，顿时恍然大悟：Git 本身建议通过在主工程记录子模块的 commit id 来控制子模块的版本。除了控制版本，commit id 其实还有另一个好处，那就是持续集成！子模块发生修改后，为了让主工程同步该子模块的更新，你需要不断往上提交上层模块的 commit id ，这就会顺带触发主工程的持续集成。</p>
<p>然而，<a href="/work/enterprise-class-git-version-control-1/">上一篇文章</a>中提到，为了避免只提 commit id 没提代码的情况发生，我们直接禁止了 commit id 的提交。矛盾来了。</p>
<p>幸运的是我们有折中的办法。如果子模块代码已推送成功，那么此时该模块在父工程中的 commit id 一定可以更新。而这个更新为什么不能让计算机帮忙自动完成？我只需要在子模块的中央仓库中加入 post-receive 钩子，当子模块代码推送完成时，post-receive 钩子里的脚本就会自动被触发，帮助我们到上层提交该子模块的 commit id 。对于嵌套子模块，这个过程会一直递归地做，直到父工程就是主工程为止，而这最终就会触发主工程的持续集成！</p>
<p>方法听起来可行，但实际做起来我依然遇到了不少困难。</p>
<p>首先，服务器上的仓库都是 bare repository ，不能提交代码，也没有相互依赖关系，主工程和所有子模块的仓库都是平级的存放在同个目录下的。这意味着你无法利用 post-receive 钩子原地地修改自身仓库和依赖它的其他仓库。</p>
<p>其次，依赖每个子模块的父工程及分支各不相同。当一个子模块的某个分支有更新时，你需要为父工程中为所有依赖该子模块那个分支的全部分支都提交一遍新的 commit id 。</p>
<p>最后，每一个子模块也都需要安装一个这样的 post-receive 钩子，且子模块经常需要新增，依赖关系也经常变动，维护成本高。</p>
<p>解决第一个问题的方法就是在服务器也像本地那样 clone 出一份整个工程的 working repository ，这个工程和我们本地开发的仓库没什么区别，交给服务器来自动维护。唯一的难点在于怎么将每个 bare repository 与该 working repository 里的每个子模块相关联。于是，只需要写个工具，遍历一遍所有主工程分支，并生成每个分支所依赖的每个子模块的仓库地址与本地路径信息。内容类似这样：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "master": {        </div><div class="line">        "app": {"branch": "master"},</div><div class="line">        "common": {"branch": "master"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "master"}</div><div class="line">    },</div><div class="line">    "master_dev": {        </div><div class="line">        "app": {"branch": "master_dev"},</div><div class="line">        "common": {"branch": "master_dev"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "master"}</div><div class="line">    },</div><div class="line">    "jilin": {        </div><div class="line">        "app": {"branch": "master"},</div><div class="line">        "common": {"branch": "master"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "jilin"}</div><div class="line">    },</div><div class="line">    "jilin_dev": {        </div><div class="line">        "app": {"branch": "master"},</div><div class="line">        "common": {"branch": "master"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "jilin_dev"}</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>解决第二个问题的方法就是利用每个主工程分支的 modules.json 。我们在主工程的每个分支上都编写了一份 modules.json ，这个文件记录了所有子模块的依赖关系。只要对所有分支的 modules.json 进行归并，就可以得到一份完整的记录所有模块所有分支的依赖关系。内容类似这样：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app:</div><div class="line">    repo: http://yourcampany.com/yourgroup/app_android.git</div><div class="line">    path: /home/git/app_android</div><div class="line"></div><div class="line">common:</div><div class="line">    repo: http://yourcampany.com/yourgroup/core_lib_android.git</div><div class="line">    path: /home/git/app_android/common</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">node_modules:</div><div class="line">    repo: http://yourcampany.com/yourgroup/node_modules.git</div><div class="line">    path: /home/git/app_android/react_native/node_modules</div></pre></td></tr></table></figure></p>
<p>有了这两个文件，post-receive 钩子也就可以写得通用化：先获取该子模块的仓库名，然后根据这个文件找到在 working repository 下对应的目录，然后用 fmanager 切到依赖该子模块该分支的主工程。更新该子模块的 working tree ，最后 cd 到上级目录提交该子模块的 commit id 。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#author:panweizhou</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">After push, automatically update commit id of current submodule.</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.append(<span class="string">'/usr/lib/python2.6/site-packages'</span>)</div><div class="line">sys.path.append(<span class="string">'/usr/lib64/python2.6/site-packages'</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> fileinput</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> yaml</div><div class="line"><span class="keyword">from</span> filelock <span class="keyword">import</span> FileLock</div><div class="line"></div><div class="line">module_file = <span class="string">"/home/git/modules/modules_android.json"</span></div><div class="line">module_path_file = <span class="string">"/home/git/modules/modules_android.yml"</span></div><div class="line">project_root = <span class="string">"/home/git/app_android"</span></div><div class="line">env_path = <span class="string">"/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/libexec/git-core/:/home/git/bin"</span></div><div class="line"></div><div class="line">lock_file_name = <span class="string">"/tmp/"</span> + os.path.basename(os.getcwd())</div><div class="line"></div><div class="line"><span class="keyword">with</span> FileLock(lock_file_name):</div><div class="line">    <span class="keyword">print</span> (<span class="string">"Updating commit id"</span>)</div><div class="line">    <span class="comment"># read global module config</span></div><div class="line">    global_module_config = {}</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> open(module_file) <span class="keyword">as</span> f:</div><div class="line">            global_module_config = json.load(f)</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        print(<span class="string">"Global modules.json parsed Error!"</span>)</div><div class="line">        exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Read in each ref that the user is trying to update</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</div><div class="line">        line = line.strip()</div><div class="line">        (from_commit, to_commit, ref) = line.split(<span class="string">' '</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Get branch name</span></div><div class="line">        pos = ref.rfind(<span class="string">'/'</span>)</div><div class="line">        <span class="keyword">if</span> pos &gt;= <span class="number">0</span>:</div><div class="line">            branch = ref[pos+<span class="number">1</span>:]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            branch = ref</div><div class="line"></div><div class="line">        <span class="keyword">if</span> branch == <span class="string">'master'</span> <span class="keyword">or</span> branch.lower().endswith(<span class="string">'bank'</span>) <span class="keyword">or</span> branch.endswith(<span class="string">'_dev'</span>):</div><div class="line">        <span class="comment"># if branch == 'WeiZhouBank_dev':</span></div><div class="line">            <span class="comment"># Get repo name</span></div><div class="line">            output = subprocess.Popen([<span class="string">'git summary | egrep "^ project"'</span>], env={<span class="string">"PATH"</span>: env_path}, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">            oc = output.communicate()[<span class="number">0</span>]</div><div class="line">            repo = oc.split(<span class="string">':'</span>)[<span class="number">1</span>].strip()</div><div class="line"></div><div class="line">            <span class="comment"># Get the corresponding working path</span></div><div class="line">            module_path_info = {}</div><div class="line">            <span class="keyword">with</span> open (module_path_file) <span class="keyword">as</span> f:</div><div class="line">                module_path_info = yaml.load(f)</div><div class="line">            module_path = <span class="string">""</span></div><div class="line">            module_name = <span class="string">""</span></div><div class="line">            <span class="keyword">for</span> module_name, module_info <span class="keyword">in</span> module_path_info.items():</div><div class="line">                <span class="keyword">if</span> module_info.has_key(<span class="string">'repo'</span>):</div><div class="line">                    module_repo = module_info[<span class="string">"repo"</span>]</div><div class="line">                    <span class="keyword">if</span> module_repo.endswith(repo):</div><div class="line">                        has_such_module = <span class="keyword">True</span></div><div class="line">                        module_path = module_info[<span class="string">"path"</span>]                       </div><div class="line">                        <span class="keyword">break</span></div><div class="line">                        </div><div class="line">            <span class="comment"># Get all the main projects branch that use this module</span></div><div class="line">            main_branch_set = set()</div><div class="line">            <span class="keyword">for</span> branch_name, config_list <span class="keyword">in</span> global_module_config.items():</div><div class="line">                <span class="keyword">if</span> config_list.has_key(module_name):</div><div class="line">                    mconfig = config_list[module_name]</div><div class="line">                    <span class="keyword">if</span> (mconfig.has_key(<span class="string">'branch'</span>)):</div><div class="line">                        mbranch = mconfig[<span class="string">'branch'</span>]</div><div class="line">                        <span class="keyword">if</span> branch == mbranch:</div><div class="line">                            main_branch_set.add(branch_name)</div><div class="line"></div><div class="line">            <span class="comment"># Do the following stuff for each branch of main project</span></div><div class="line">            <span class="comment"># that use this module of this branch</span></div><div class="line">            <span class="keyword">for</span> main_branch <span class="keyword">in</span> main_branch_set:</div><div class="line">                os.chdir(project_root)</div><div class="line">                output = subprocess.Popen([<span class="string">"./fmanager checkout -f %s"</span> % main_branch], env={<span class="string">"PATH"</span>: env_path}, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">                res = output.wait()</div><div class="line">                <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                    os.chdir(module_path)</div><div class="line">                    <span class="comment"># update current submodule </span></div><div class="line">                    output = subprocess.Popen([<span class="string">'/home/git/bin/update_root'</span>, branch], cwd=module_path, env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                    res = output.wait()</div><div class="line">                    <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                        <span class="comment"># Get commit log</span></div><div class="line">                        output = subprocess.Popen([<span class="string">'git log -n 1'</span>], env={<span class="string">"PATH"</span>: env_path}, cwd=module_path, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">                        commit_log = output.communicate()[<span class="number">0</span>]</div><div class="line">                        commit_log = <span class="string">"Bump Version for submodule %s:\n\n%s"</span> % (module_name, commit_log)</div><div class="line">                        <span class="comment"># Go to father module</span></div><div class="line">                        os.chdir(<span class="string">'..'</span>)</div><div class="line">                        father_path = os.getcwd()</div><div class="line">                        <span class="comment"># Get branch of father module</span></div><div class="line">                        output = subprocess.Popen([<span class="string">'git'</span>, <span class="string">'symbolic-ref'</span>, <span class="string">'--short'</span>, <span class="string">'HEAD'</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                        oc = output.communicate()</div><div class="line">                        father_branch = oc[<span class="number">0</span>].strip()</div><div class="line">                        <span class="keyword">if</span> (father_branch.strip() != <span class="string">""</span>):</div><div class="line">                            print(<span class="string">"Bumping version of branch %s of father project..."</span> % father_branch)</div><div class="line">                            output = subprocess.Popen([<span class="string">'/home/git/bin/update_root'</span>, father_branch], cwd=father_path, env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                            res = output.wait()</div><div class="line">                            <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                                output = subprocess.Popen([<span class="string">'git diff | wc -l'</span>], cwd=father_path, env={<span class="string">"PATH"</span>: env_path}, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">                                diff_num = output.communicate()[<span class="number">0</span>]</div><div class="line">                                <span class="keyword">if</span> diff_num &gt; <span class="number">1</span>:</div><div class="line">                                    subprocess.call([<span class="string">'git'</span>, <span class="string">'add'</span>, module_name], env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                                    output.wait()</div><div class="line">                                    output = subprocess.Popen([<span class="string">'git'</span>, <span class="string">'commit'</span>, <span class="string">'-m'</span>, commit_log, <span class="string">'--no-verify'</span>], env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                                    res = output.wait()</div><div class="line">                                    <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                                        output = subprocess.Popen([<span class="string">'git'</span>, <span class="string">'push'</span>, <span class="string">'origin'</span>, <span class="string">'HEAD'</span>, <span class="string">'--no-verify'</span>], env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                                        output.wait()</div><div class="line">                                        <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                                            <span class="keyword">print</span> <span class="string">"Successfully bumped version branch %s of father project"</span> % father_branch</div><div class="line">                                        <span class="keyword">else</span>:</div><div class="line">                                            <span class="keyword">print</span> <span class="string">"Error bumping version for branch %s of father project"</span> % father_branch</div><div class="line">                                <span class="keyword">else</span>:</div><div class="line">                                    <span class="keyword">print</span> <span class="string">"Error bumping version for branch %s of father project"</span> % father_branch</div><div class="line">                            <span class="keyword">else</span>:</div><div class="line">                                <span class="keyword">print</span> <span class="string">"Error bumping version for branch %s of father project"</span> % father_branch</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            print(<span class="string">"Father project is a tag. Stop bumping verison."</span>)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">print</span> <span class="string">"Error updating the remote working tree."</span></div></pre></td></tr></table></figure></p>
<p>之后只需将钩子安装到每个子模块的 bare repository 里的 custom_hooks 目录下。同样可以利用脚本来一次性完成。</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#author: panweizhou</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> module <span class="keyword">in</span> `ls <span class="operator">-d</span> *_android.git`</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> test <span class="variable">$module</span> != <span class="string">"App_Android.git"</span>  <span class="comment"># Don't install to root project</span></div><div class="line">    <span class="keyword">then</span></div><div class="line">        module_dir=<span class="variable">${module}</span></div><div class="line">        <span class="keyword">if</span> test ! <span class="operator">-d</span> <span class="variable">${module_dir}</span>/custom_hooks</div><div class="line">        <span class="keyword">then</span></div><div class="line">            mkdir <span class="variable">${module_dir}</span>/custom_hooks</div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="keyword">for</span> hook <span class="keyword">in</span> `ls submodule_hooks_android`</div><div class="line">        <span class="keyword">do</span></div><div class="line">            cp submodule_hooks_android/<span class="variable">${hook}</span> <span class="variable">${module_dir}</span>/custom_hooks/</div><div class="line">        	<span class="built_in">sudo</span> chmod -R <span class="number">755</span> <span class="variable">${module_dir}</span>/custom_hooks</div><div class="line">            <span class="built_in">sudo</span> chmod +x <span class="variable">${module_dir}</span>/custom_hooks/<span class="variable">${hook}</span></div><div class="line">        <span class="keyword">done</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>钩子装好后，试着为 framework 子模块推送一下代码，终端中会看到 <code>Bump Version for submodule framework</code> 的字眼，表示 framework 的 commit id 已被成功更新到主工程：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="label">C02PGTP8FVH5:</span>PAFFHouse hahack$ git <span class="keyword">push</span> -u origin jilin_dev</div><div class="line">Counting objects: <span class="number">3</span>, done.</div><div class="line">Delta compression using up to <span class="number">4</span> threads.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">308</span> bytes | <span class="number">0</span> bytes/s, done.</div><div class="line">Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line"><span class="label">remote:</span></div><div class="line"><span class="label">remote:</span> ========================================================================        </div><div class="line"><span class="label">remote:</span> </div><div class="line"><span class="label">remote:</span>         faq: http://yourcampany.com/yourgroup/FFWiki/wikis/git-faq        </div><div class="line"><span class="label">remote:</span> </div><div class="line"><span class="label">remote:</span> ========================================================================        </div><div class="line"><span class="label">remote:</span> [jilin_dev <span class="number">941</span>f8c5] Bump Version for submodule framework:        </div><div class="line"><span class="label">remote:</span>  <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)        </div><div class="line"><span class="label">remote:</span> Updating commit id        </div><div class="line"><span class="label">remote:</span> Bumping version of branch jilin_dev of main project...        </div><div class="line"><span class="label">remote:</span> Bumping version of branch jilin_dev of father project...        </div><div class="line"><span class="label">remote:</span> Successfully bumped version branch jilin_dev of father project        </div><div class="line"><span class="label">remote:</span> remote:</div><div class="line"><span class="label">remote:</span> remote: ========================================================================                </div><div class="line"><span class="label">remote:</span> remote:         </div><div class="line"><span class="label">remote:</span> remote:         faq: http://yourcampany.com/yourgroup/FFWiki/wikis/git-faq                </div><div class="line"><span class="label">remote:</span> remote:         </div><div class="line"><span class="label">remote:</span> remote: ========================================================================            </div><div class="line"><span class="label">remote:</span> To http://yourcampany.com/yourgroup/App_Android.git        </div><div class="line"><span class="label">remote:</span>    aa13394.<span class="number">.69e6</span>c467  HEAD -&gt; jilin_dev        </div><div class="line">To http://yourcampany.com/yourgroup/framework_android.git</div><div class="line">   e41b275.<span class="number">.35141</span>bf  jilin_dev -&gt; jilin_dev</div><div class="line">Branch jilin_dev <span class="keyword">set</span> up to track remote branch jilin_dev from origin.</div></pre></td></tr></table></figure></p>
<p>上面的步骤执行了两次 push 操作：</p>
<ol>
<li>push framework 子模块的代码；</li>
<li>push 主工程的代码，更新 framework 的 commit id 。这个 push 操作是由 framework 的 post-receive 钩子自动完成的。</li>
</ol>
<p>等候一段时间后，打开主工程的持续集成页面，可以找到这次子模块更新触发的提交以及持续集成的结果：</p>
<p><img src="/images/enterprise-class-git-version-control-2/framework-bump.png" alt="非嵌套子模块的持续集成结果"></p>
<p>对于嵌套子模块，父模块提交完子模块的 commit id ，同样会触发父模块的 post-receive 钩子，于是会看到这样的推送结果：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">C02PGTP8FVH5:HFCommon hahack$ git push -u origin master_dev</div><div class="line">Counting objects: <span class="number">3</span>, done.</div><div class="line">Delta compression <span class="keyword">using</span> up <span class="built_in">to</span> <span class="number">4</span> threads.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">305</span> <span class="keyword">bytes</span> | <span class="number">0</span> <span class="keyword">bytes</span>/s, done.</div><div class="line">Total <span class="number">3</span> (delta <span class="number">2</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">remote: </div><div class="line">remote: ========================================================================        </div><div class="line">remote: </div><div class="line">remote:         faq: <span class="keyword">http</span>://yourcampany.com/yourgroup/FFWiki/wikis/git-faq        </div><div class="line">remote: </div><div class="line">remote: ========================================================================        </div><div class="line">remote: warning: unable <span class="built_in">to</span> rmdir FinancialProduct: Directory <span class="operator">not</span> <span class="constant">empty</span>        </div><div class="line">remote: [taishan <span class="number">941</span>b017] Bump Version <span class="keyword">for</span> submodule HFCommon:        </div><div class="line">remote:  <span class="number">1</span> <span class="built_in">file</span> changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div><div class="line">remote: Updating commit id        </div><div class="line">remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> main project...        </div><div class="line">remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> father project...        </div><div class="line">remote: Successfully bumped <span class="built_in">version</span> branch taishan <span class="operator">of</span> father project        </div><div class="line">remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan_dev <span class="operator">of</span> main project...  </div><div class="line">remote: remote:         </div><div class="line">remote: remote: ========================================================================                </div><div class="line">remote: remote:         </div><div class="line">remote: remote:         faq: <span class="keyword">http</span>://yourcampany.com/yourgroup/FFWiki/wikis/git-faq                </div><div class="line">remote: remote:         </div><div class="line">remote: remote: ========================================================================                </div><div class="line">remote: remote: [taishan f43ab33] Bump Version <span class="keyword">for</span> submodule react_native:                </div><div class="line">remote: remote:  <span class="number">1</span> <span class="built_in">file</span> changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)                </div><div class="line">remote: remote: Updating commit id                </div><div class="line">remote: remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> main project...                </div><div class="line">remote: remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> father project...                </div><div class="line">remote: remote: Successfully bumped <span class="built_in">version</span> branch taishan <span class="operator">of</span> father project                </div><div class="line">remote: remote: remote:                 </div><div class="line">remote: remote: remote: ========================================================================                        </div><div class="line">remote: remote: remote:                 </div><div class="line">remote: remote: remote:         faq: <span class="keyword">http</span>://yourcampany.com/yourgroup/FFWiki/wikis/git-faq                        </div><div class="line">remote: remote: remote:                 </div><div class="line">remote: remote: remote: ========================================================================                        </div><div class="line">remote: remote: To <span class="keyword">http</span>://yourcampany.com/yourgroup/App_Android.git                </div><div class="line">remote: remote:    <span class="number">50</span>b73a2..f43ab33  HEAD -&gt; taishan                </div><div class="line">remote: To <span class="keyword">http</span>://yourcampany.com/yourgroup/react_native.git        </div><div class="line">remote:    <span class="number">3552248.</span><span class="number">.941</span>b017  HEAD -&gt; taishan        </div><div class="line">To <span class="keyword">http</span>://yourcampany.com/yourgroup/HFCommon.git</div><div class="line">   <span class="number">4940</span>def.<span class="number">.7</span>a59ff0  master_dev -&gt; master_dev</div><div class="line">Branch master_dev <span class="built_in">set</span> up <span class="built_in">to</span> track remote branch master_dev <span class="built_in">from</span> origin.</div></pre></td></tr></table></figure></p>
<p>在主工程的持续集成页面中同样可以找出嵌套子模块触发的提交和持续集成结果：</p>
<p><img src="/images/enterprise-class-git-version-control-2/embeb-bump.png" alt="嵌套子模块的持续集成结果"></p>
<p>只剩第三个问题未解决了。由于模块和分支不断在新增，上面的这两个文件肯定是需要经常更新，新增模块也需要安装这个钩子。这些既然已经可以用工具自动完成，只需要把工具都加进了 crontab 计划任务里，设定每天凌晨三点钟就自动执行一遍，问题完美解决！</p>
<p>使用这个方案后，所有的子模块发生更新，都会触发依赖该子模块的主工程的持续集成测试。当发现主工程突然不能编译了，可以打开 Gitlab ，迅速定位到最早导致编译不过的子模块及提交：</p>
<p><img src="/images/enterprise-class-git-version-control-2/problem-commit.png" alt="利用Gitlab定位编译问题"></p>
<p>这为我们定位编译问题提供了非常重要的线索！</p>
<h2 id="后话">后话</h2>
<p>在本篇文章中，我仔细讨论了对子模块进行持续集成的三种方案，并利用自动化手段实现逐层往上提交子模块 commit id 从而触发主工程构建。这些构建结果对我们快速定位工程编译不过的问题提供了重要的线索。</p>
<p>说下其他一些值得注意的地方。有些时候某个模块的代码推送无法避免会导致暂时性的编译失败（比如涉及多个模块的代码提交），又不想被误认为是导致后面编译不过的罪魁祸首，那就可以通过在这些中间提交任务的 commit message 中加上 <code>[ci skip]</code> 字段，告诉 Gitlab 跳过对这些提交的构建测试，只在最后一次提交中去除该字段，检查最后一次的提交即可。</p>
<p>另外一个问题是，自从启用了这种方案，我们服务器上的构建任务一下子爆增。一个子模块的代码推送可能会触发多个构建任务，而我们目前负责持续集成的机器还很少。这使得推送完代码后，往往需要等上半天才能看到结果，这可能会影响问题定位的及时性。我们在后面准备进行一个有趣的尝试：每个客户端开发者的机器其实已具备了构建至少一个平台的客户端的条件，所以可以利用开发机的剩余资源来帮忙构建。具体方法是：每个开发者将自己的机器注册为一个 Runner ，并自行打上 android 或者 ios 标签，标明机器能编译哪个平台的客户端：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitlab-ci-multi-runner register -url http://yourcompany.com/ci -registration-token z_AvFaP<span class="built_in">cd</span>F9aE3sseEvw --name <span class="string">"android-panweizhou"</span>  --limit <span class="number">1</span> --executor shell --shell bash --tag-list <span class="string">"android"</span></div></pre></td></tr></table></figure></p>
<p>当机器暂时空余时，可以开启这个 Runner ，加入帮忙构建的队伍。Gitlab 将根据该 Runner 的标签为其安排相应平台的构建任务：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitlab-ci-multi-runner start</div></pre></td></tr></table></figure></p>
<p>年底我们将统计出 Gitlab 上这些 Runner 的构建次数，对次数多的 Runner 进行表彰。真是躺着就把钱挣了有木有！</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/CI/" term="CI"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实践（一）：多分支子模块依赖管理]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-1/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-1/</id>
    <published>2016-04-12T16:00:00.000Z</published>
    <updated>2017-02-11T04:41:08.099Z</updated>
    <content type="html"><![CDATA[<h2 id="需求描述">需求描述</h2>
<p>我们尝试使用 Git 来维护一个项目的代码。这个项目的结构比较复杂：</p>
<ul>
<li>项目包含由多个子模块，每个子模块是一个独立的 Git 仓库，子模块还允许继续嵌套包含子模块。 例如，主工程依赖 common、framework、react_native 等多个子模块，而 react_native 子模块又依赖 node_modules、HFCommon、HFModules 等多个嵌套子模块。</li>
</ul>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[-] app_android/</div><div class="line"> |-[+] HFUIKit</div><div class="line"> |-[+] channel</div><div class="line"> |-[+] common</div><div class="line"> |-[+] framework</div><div class="line"> |-[+] hybrid</div><div class="line"> |-[+] messagecenter</div><div class="line"> |-[-] react_native</div><div class="line">    |-[+] HFCommon</div><div class="line">    |-[+] HFModules</div><div class="line">    |-[+] node_modules</div></pre></td></tr></table></figure></p>
<ul>
<li>主工程和子模块允许存在多个分支，且相互之间有依赖关系。例如，主工程的 jilin 分支同时依赖 common 子模块的 master 分支，以及 framework 子模块的 jilin 分支。</li>
</ul>
<a id="more"></a>
<h2 id="git-submodule-的问题">Git submodule 的问题</h2>
<p>Git 提供了 submodule 来支持子模块的需求，使用它可以很方便的将多个独立仓库包含到同一个主工程中：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git submodule add http://xxx.xxx/common.git</div><div class="line">$ git submodule add http://xxx.xxx/framework.git</div></pre></td></tr></table></figure></p>
<p>Git submodule 还支持嵌套添加子模块：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git submodule add http://xxx.xxx/react_native.git</div><div class="line">$ <span class="built_in">cd</span> react_native</div><div class="line">$ git submodule add http://xxx.xxx/HFCommon.git</div><div class="line">$ git submodule add http://xxx.xxx/HFModules.git</div><div class="line">$ git submodule add http://xxx.xxx/node_modules.git</div></pre></td></tr></table></figure></p>
<p>通过子模块，这些子模块既可以各自独立的修改和提交代码，又可以将改动作用到依赖它的父工程。这听起来是个很棒的特性，然而 Git submodule 也存在着一些让人抓狂的坑。</p>
<p>首先，主工程并不直接跟踪子模块的代码，而仅仅只跟踪子模块的 commit id 的改动。在执行 <code>git submodule update</code> 更新子模块代码时，Git 就是根据主工程所维护的 commit id 来更新子模块到指定状态的。</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ git diff react_native </div><div class="line">diff --git a/react_native b/react_native</div><div class="line">index <span class="number">3</span>a9c5b1..ad68a28 <span class="number">160000</span></div><div class="line">--- a/react_native</div><div class="line">+++ b/react_native</div><div class="line">@@ -<span class="number">1</span> +<span class="number">1</span> @@</div><div class="line">-Subproject commit <span class="number">3</span>a9c5b14c45b199e2e6863d2b6da22dabc2a54f5</div><div class="line">+Subproject commit ad68a28c13d4196df531c7df8523d07358288297</div><div class="line">(END)</div></pre></td></tr></table></figure></p>
<p>因此，如果你只在子模块中修改并提交了代码，而没有到主工程上面再把子模块的 commit id 提交一下，其他人拉取工程代码的时候会发现子模块的代码依然停留在老的 commit id 所指向的状态。对于嵌套子模块，这种工作尤为繁琐，提交代码后要逐层往上提交 commit id ，否则其他人无法正确更新代码。</p>
<p>其次，如前面所说，使用 <code>git submodule update</code> 更新子模块后，子模块将被切换到一个指向父工程维护的 commit id 所指定的游离状态：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ git submodule update react_native</div><div class="line">bash-<span class="number">3.2</span>$ <span class="built_in">cd</span> react_native</div><div class="line">bash-<span class="number">3.2</span>$ git branch</div><div class="line">* (detached from <span class="number">3</span>a9c5b1)</div><div class="line">  master</div><div class="line">  jilin</div><div class="line">  TaiShan</div></pre></td></tr></table></figure></p>
<p>一旦代码处于游离分支，你就要时刻警惕在游离分支上的提交有没有即时合并到非游离分支上。如果你直接在游离分支上开发并提交了代码，之后在父工程里再次 <code>git submodule update</code> ，你所有未合并的提交都会丢失！</p>
<p>最后还有一个非常麻烦，但也极容易出现的问题：如果团队里有人只提交了主工程该子模块的 commit id ，却忘了进入该模块提交模块真正的代码，那么当推送到中央仓库之后，其他人就会因为找不到与该 commit id 对应的代码而无法正确更新代码：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ git submodule update</div><div class="line">error: pathspec <span class="string">'ad68a28c13d4196df531c7df8523d07358288297'</span> did not match any file(s) known to git.</div><div class="line">Did you forget to <span class="string">'git add'</span>?</div><div class="line">Unable to checkout <span class="string">'ad68a28c13d4196df531c7df8523d07358288297'</span> <span class="keyword">in</span> submodule path <span class="string">'react_native'</span></div></pre></td></tr></table></figure></p>
<p>对于熟练的用户，这些坑自然可以轻松越过。但考虑到团队里大都是 Git 新手，我们发现子模块的引入对他们造成了很大的负担，频繁出现子模块代码没有更新到最新状态，或者更新出错的情况。</p>
<h2 id="简单解决方案">简单解决方案</h2>
<p>经过考虑，我们决定对子模块的使用做些简化：</p>
<ol>
<li>所有子模块不再根据父工程的 commit id 更新代码，而是直接更新到主工程所依赖的分支的最新一次提交；</li>
<li>由于 commit id 不再用来更新代码，因此可以禁止直接提交子模块的 commit id ，避免出现只提交子模块 commit id 而忘记提交子模块代码的情况。</li>
</ol>
<h3 id="造个轮子：fmanager">造个轮子：fmanager</h3>
<p>为了达到第一个目的，我们自己写了个专用的管理工具 fmanager 。目前它一共支持如下几个功能，并且在不断扩展中：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fmanager pull      <span class="comment">#更新当前分支的主工程，并将每个子模块的代码更新到指定分支的最新状态。</span></div><div class="line">fmanager update    <span class="comment"># ./fmanager pull 的别名</span></div><div class="line">fmanager checkout &lt;分支名&gt; <span class="comment"># 切换到某个主工程分支，同时完成子模块的代码切换。</span></div><div class="line">fmanager submodule update &lt;模块名列表&gt; <span class="comment"># 更新指定子模块的代码到所处分支的最新状态。</span></div><div class="line">fmanager showbranch <span class="comment"># 查看当前主工程和所有子模块的所属分支。</span></div><div class="line">fmanager status <span class="comment"># 查看当前主工程和所有子模块的修改状态。</span></div><div class="line">fmanager log <span class="comment"># 查看当前主工程和所有子模块的当前分支/标签和最新提交。</span></div><div class="line">fmanager cherry-pick &lt;commit id&gt; &lt;分支列表&gt; cherry-pick 某个 commit id 到分支列表。</div><div class="line">fmanager cherry-push &lt;commit id&gt; &lt;分支列表&gt; cherry-pick 某个 commit id 到分支列表，并推送这些分支。</div></pre></td></tr></table></figure></p>
<p>这个工具直接内置在主工程的根路径，并且接受一个 json 格式的配置文件 modules.json ，该配置文件大概长这样：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">sub</span>": <span class="value">{        </span></div><div class="line">        "<span class="attribute">app</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">common</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fmall</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">framework</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"jilin"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fund</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">hybrid</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">messagecenter</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">property</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">safetykeyboardnew</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">scores</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">thirdparty</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"jilin"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFModules</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"jilin"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFCommon</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/node_modules</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span></div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>不同的主工程分支，modules.json 配置文件的内容允许不同，且每个模块都允许指定不同分支。对于嵌套子模块，我们通过加上父模块前缀来做标识。</p>
<p>当使用 fmanager 切换分支时，fmanager 将首先完成主工程的分支切换，然后读入该分支下的 modules.json ，再根据 modules.json 的配置逐个切换到各自模块的指定分支。</p>
<p>使用 fmanager 更新工程和切换分支相似，只是顺便完成了子模块的 git pull 操作。</p>
<p>这样的子模块管理策略看起来有点“激进”：永远使用分支最新的代码状态。为了保证稳定性，我们还支持在 modules.json 中使用 tag ：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">sub</span>": <span class="value">{        </span></div><div class="line">        "<span class="attribute">app</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">common</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fmall</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">framework</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"jilin-2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fund</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">hybrid</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">messagecenter</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">property</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">safetykeyboardnew</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">scores</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">thirdparty</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"jilin-2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFModules</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"jilin-2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFCommon</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/node_modules</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span></div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>在项目后期，可以通过引用标签来保持整个工程的稳定性。同时，负责打包的机器每次打包时，都会顺便执行 <code>fmanager log</code> 产出一份包含当前所有子模块所处分支和最新一次 commit 的记录，方便追查问题。</p>
<h3 id="加个钩子：pre-commit">加个钩子：pre-commit</h3>
<p>要达到第二个目的，可以通过编写本地钩子 pre-commit 来实现。该钩子可以用来在 commit 前进行一些检查工作，并拒绝一些不合法的提交。针对我们的需求，可以写一个脚本检查提交中是否包含 commit id 的修改，如果有，就先重置那些修改再提交剩下的内容。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys,os,io,subprocess,json,re</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line">error_color = <span class="string">"\033[31m"</span></div><div class="line">warning_color = <span class="string">"\033[33m"</span></div><div class="line">normal_color = <span class="string">"\033[0m"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRootPath</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 找到工程根目录</span></div><div class="line">    git_path = <span class="string">".git"</span></div><div class="line">    pwd = os.getcwd()</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">if</span> os.path.exists(os.path.join(pwd, git_path)) <span class="keyword">and</span> os.path.isdir(os.path.join(pwd, git_path)):</div><div class="line">            <span class="keyword">return</span> os.path.abspath(pwd)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> (os.path.exists(os.path.join(pwd, <span class="string">"../"</span>))):</div><div class="line">                pwd = os.path.join(pwd, <span class="string">"../"</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSubmoduleNameAndPath</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''获取子模块信息'''</span></div><div class="line">    root_path = getRootPath()</div><div class="line">    <span class="keyword">if</span> root_path != <span class="keyword">None</span>:</div><div class="line">        output = subprocess.Popen([<span class="string">'git submodule --quiet foreach \'echo $toplevel/$path\''</span>], stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">        oc = output.communicate() <span class="comment">#取出output中的字符串</span></div><div class="line">        submodule_dict = {}</div><div class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> oc:</div><div class="line">            <span class="keyword">if</span> element != <span class="keyword">None</span>:</div><div class="line">                sb_list = element.split(<span class="string">'\n'</span>)</div><div class="line">                <span class="keyword">for</span> elem <span class="keyword">in</span> sb_list:</div><div class="line">                    <span class="keyword">if</span> (elem != <span class="string">""</span>):</div><div class="line">                        path = elem.strip()</div><div class="line">                        name = path.replace(root_path+<span class="string">"/"</span>, <span class="string">''</span>)</div><div class="line">                        submodule_dict[name] = path</div><div class="line">        <span class="keyword">return</span> submodule_dict</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(warning_color)</div><div class="line">        print(<span class="string">'''</span></div><div class="line">警告：检测到当前工程不是 .git 工程，文件目录可能已经损坏！</div><div class="line">''')</div><div class="line">        print(normal_color)</div><div class="line">        os.chdir(pwd)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSubModule</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''防止提交子模块的 commit id'''</span></div><div class="line">    pwd = os.getcwd()</div><div class="line">    submodule_dict = getSubmoduleNameAndPath()</div><div class="line">    <span class="comment"># 判断每个子模块是否修改了commit id</span></div><div class="line">    <span class="keyword">for</span> module_name, module_path <span class="keyword">in</span> submodule_dict.items():</div><div class="line">        os.chdir(os.path.join(module_path, <span class="string">".."</span>))</div><div class="line">        module_basepath = os.path.basename(module_path)</div><div class="line">        output = subprocess.Popen([<span class="string">'git diff --cached '</span> + module_basepath], stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">        oc = output.communicate()[<span class="number">0</span>]</div><div class="line">        <span class="comment"># 判断是否提交了 commit id 修改</span></div><div class="line">        <span class="keyword">if</span> oc.find(<span class="string">"-Subproject commit"</span>) &gt;= <span class="number">0</span> <span class="keyword">and</span> oc.find(<span class="string">"+Subproject commit"</span>) &gt;= <span class="number">0</span>:</div><div class="line">            print(warning_color)</div><div class="line">            print(<span class="string">'''</span></div><div class="line">检查到子模块 %s 提交了 commit id，</div><div class="line">我们强烈建议**不要**提交子模块的 commit id 改动！该 commit id 将被跳过提交。</div><div class="line">''' % module_name)</div><div class="line">            print(normal_color)</div><div class="line">            res = subprocess.call([<span class="string">'git'</span>, <span class="string">'reset'</span>, <span class="string">'HEAD'</span>, module_basepath])</div><div class="line">            <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                print(<span class="string">"子模块 "</span> + module_name + <span class="string">" 的 commit id 重置成功！"</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(error_color)</div><div class="line">                print(<span class="string">"子模块 "</span> + module_name + <span class="string">" 的 commit id 重置失败！"</span>)</div><div class="line">                print(normal_color)</div><div class="line">                os.chdir(pwd)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    os.chdir(pwd)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> checkSubModule():</div><div class="line">    exit(<span class="number">0</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    exit(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>钩子编写完，还得解决安装问题。所谓“安装”，即是将 pre-commit 复制到根目录中的 .git/hooks 目录中，并确保可执行。听起来好像很简单，实则不然：</p>
<ol>
<li>.git 里的内容并不会随仓库一同提交。需要另外想其他办法让团队其他人“上钩”，并保持钩子的同步。</li>
<li>父工程的钩子不会被继承到子模块，也就是说，如果你希望一个钩子在父工程和多个子模块中用到，那你需要为每个仓库都添加一次钩子。</li>
</ol>
<p>fmanager 帮我们解决了第一个问题，由于我们用自己造的 fmanager 来更新工程代码，因此可以让 fmanager 在更新的时候自动完成钩子的安装。</p>
<p>而通过观察 .git 的文件结构，我发现每个子模块在 .git/modules 中各自拥有一个专属的数据目录。这个数据目录下也有一个 hooks 目录，该子模块的钩子就应该安装到这里。
如果有嵌套子模块，父模块的数据目录下还会有 modules 目录，并且可以一直这么嵌套下去。</p>
<p>解决这两个问题后，钩子顺利安装到了每个团队成员的仓库中，并且还能时刻保持同步。一旦有人试图提交 commit id 的修改，就会出现如下的错误：</p>
<p><img src="/images/enterprise-class-git-version-control-1/pre-commit.png" alt="利用 pre-commit 钩子实现跳过 commit id 提交"></p>
<p>而其他内容的修改依然可以正常提交。</p>
<p>pre-commit 钩子非常有用，我们陆续又添加了诸如代码风格检查、json 合法性检查、commit 邮箱合法性检查等测试。</p>
<h2 id="总结">总结</h2>
<p>通过本文的方法，我们对子模块的使用进行了简化，避免了由于漏提交子模块 commit id 或子模块代码导致无法更新或更新错误的情况。这么做看起来好像完全抛弃了子模块的 commit id ，但在下面的文章中，我将介绍一种自动更新子模块 commit id 的方法，该方法将利用 commit id 自动触发针对子模块的持续集成测试。</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/Python/" term="Python"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[学习 React Native for Android：React 基础]]></title>
    <link href="http://hahack.com/codes/learn-react-native-for-android-02/"/>
    <id>http://hahack.com/codes/learn-react-native-for-android-02/</id>
    <published>2015-10-18T17:49:34.000Z</published>
    <updated>2017-02-11T04:41:08.103Z</updated>
    <content type="html"><![CDATA[<p>React Native 主张用 React 的开发思维来编写 UI 层。因此在学习 React-Native 之前，了解基本的 React 的语法和存在的坑会对今后 React Native 的开发大有裨益。</p>
<p>本文将从一个简单的例子开始，逐步完善我们的程序。在这个过程中，我们将一步步探讨如何用 React 来开发网页应用，以及需要注意的陷阱。与其他教程不同，本文将采用类似 <a href="http://zedshaw.com/" target="_blank" rel="external">Zed A. Shaw</a> 的 <a href="http://learncodethehardway.org/" target="_blank" rel="external">《Learn Code the Hard Way》</a> 系列的案例驱动的形式，从例子开始着手。我相信，掌握一门新技术最好的方法就是自己动手。因此，我并不打算面面俱到的列举所有关于 React 的内容，而更倾向于担任一个引路人的角色：把读者们带到 React 花园的门前，然后让读者们在 React 花园里来一场自助游。为了让这个旅途更加有收获，我会在每节内容的最后安排几个练习，并在最后分享一些值得深入学习的文章和教程。</p>
<a id="more"></a>
<h2 id="练习0：准备工作">练习0：准备工作</h2>
<p>下载 React 的 <a href="https://facebook.github.io/react/downloads/react-0.14.0.zip" target="_blank" rel="external">Starter Kit 0.14.0</a> 并解压。得到的目录结构长这样：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">react-0.14.0/       # React 根目录</div><div class="line">|</div><div class="line">+--  build/         # React 的 js 代码</div><div class="line">|</div><div class="line">+--  examples/      # 官方提供的例子</div><div class="line">|     |</div><div class="line">|     +---- basic/</div><div class="line">|     |</div><div class="line">|     +---- basic-click-counter/</div><div class="line">|     |</div><div class="line">|     +---- ...</div><div class="line">|</div><div class="line">+--  README.md      # 说明文档</div></pre></td></tr></table></figure></p>
<ul>
<li>build 目录存放的是 React 的 js 文件，我们编写的所有例子都会包含这个目录下的若干文件。</li>
<li>examples 目录包含了官方提供的例子。</li>
</ul>
<p>接下来我们需要启动一个简单的 HTTP 服务器方便我们本地预览我们的应用：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> react-<span class="number">0.14</span>.<span class="number">0</span></div><div class="line">$ python -m SimpleHTTPServer</div></pre></td></tr></table></figure></p>
<p>接下来可以用浏览器访问 <a href="http://localhost:8000/examples/basic/" target="_blank" rel="external">http://localhost:8000/examples/basic/</a> ，你将看到这样的页面：</p>
<p><img src="/images/learn-react-native-for-android-02/basic-example.png" alt=""></p>
<p>该页面会统计用户自打开这个页面开始经过的时间。</p>
<p>用 Atom 载入整个目录。启动 Atom ，点击 【File】-&gt; 【Add Project Folder】 菜单项，选择 react-0.14.0 目录所在文件夹。</p>
<p>在根目录下创建一个新的文件夹 test ，在 test 目录下新建页面文件 index.html 。</p>
<p><img src="/images/learn-react-native-for-android-02/new-file.png" alt=""></p>
<p>本文后面的大部分练习都只涉及对这个文件进行修改。</p>
<h4 id="扩展练习">扩展练习</h4>
<ol>
<li>访问 examples 目录里的每个例子，感受下用 React 写的网页应用。</li>
<li>Atom + Nuclide 是 Facebook 推荐的 React IDE 。本系列也将一直使用它学习 React / React Native。熟悉下 Atom 的使用，并选择安装我在<a href="/codes/learn-react-native-for-android-02">上篇博文</a>中推荐的一些插件。</li>
<li>试试使用 <a href="https://atom.io/packages/browser-plus" target="_blank" rel="external">browser-plus</a> 插件在 Atom 中直接预览页面。</li>
</ol>
<h2 id="练习1：hello-world">练习1：Hello World</h2>
<p>按照惯例，让我们先来实现一个简单的 Hello World 程序。在 index.html 里敲入下面的代码：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  ReactDOM.render(</div><div class="line">    React.createElement(<span class="string">"h1"</span>, <span class="literal">null</span>, <span class="string">"Hello World!"</span>),</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</div><div class="line">  );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们先看看这个页面的效果。访问 <a href="http://localhost:8000/test/" target="_blank" rel="external">http://localhost:8000/test/</a> ，你将看到这样的界面：</p>
<p><img src="/images/learn-react-native-for-android-02/hello-world.png" alt=""></p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>如果您的 build 文件夹中没有 react-dom.js 文件，您可能下载的是 0.13 或者更早的版本，建议下载使用 <a href="https://facebook.github.io/react/downloads/react-0.14.0.zip" target="_blank" rel="external">Starter Kit 0.14.0</a> 。</p>
</div></p>
<h4 id="代码解读">代码解读</h4>
<ul>
<li>程序的第 4 行和第 5 行引用了 build 目录下的 react.js 和 react-dom.js 文件。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能。</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>第 10 行调用了 <code>ReactDOM.render</code> 函数：</li>
</ul>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactComponent render(</div><div class="line">  ReactElement element,</div><div class="line">  DOMElement container,</div><div class="line">  [<span class="function"><span class="keyword">function</span> <span class="title">callback</span>]</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>这个函数用来将一个 React 元素 <code>element</code> 渲染到 <code>container</code> 指定的 DOM 中。最后的一个参数 <code>callback</code> 是可选的，用于指定该组件绘制或更新完成后需要执行的回调。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>某些教程会使用 <code>React.render</code> 来渲染页面，这个函数已经过时。建议使用新的 <code>ReactDOM.render</code> 函数。</p>
</div></p>
<p>在我们的例子中，我们用 <code>React.createElement</code> 创建了一个内容为 “Hello World!” 的一级标题。当页面启动时，这个一级标题会被插入到 id 为 <code>container</code> 的 div 容器中。</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactElement createElement(</div><div class="line">  string/ReactClass type,</div><div class="line">  [object props],</div><div class="line">  [children ...]</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p><code>React.createElement</code> 函数的第一个参数是元素类型，可以是 <code>h1</code> 、<code>div</code> 等 HTML 元素，也可以是 ReactClass 类型（后面会提到），接下来是两个可选参数 <code>props</code> 和 <code>children</code> ，分别表示要赋予的属性和子元素。</p>
<p>打开浏览器的调试工具（例如 Chrome 的审查工具），可以看到带有 “Hello World!” 文字信息的一级标题被插入到了 <code>container</code> 这个 div 容器中：</p>
<p><img src="/images/learn-react-native-for-android-02/hello-world-dev.png" alt=""></p>
<h4 id="拓展训练">拓展训练</h4>
<ol>
<li>试试将 “Hello World!” 这句话改成其他内容，刷新下页面，看看内容有没有变。</li>
<li><code>React.DOM</code> 是对 <code>React.createElement</code> 的封装和简化。查下 <code>React.DOM</code> 的<a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">文档</a>，试试将代码用 <code>React.createDOM</code> 重写。</li>
</ol>
<h2 id="练习2：jsx">练习2：JSX</h2>
<p>在练习1中我们使用 React 提供的 <code>render()</code> 函数实现了向指定 DOM 中插入内容的简单功能。但这段文本内容是 Hard-Code 的，没有数据绑定的过程，不利于数据和页面模板的分离。</p>
<p>另一个很糟糕的问题是，像 <code>React.createElement</code>  这类创建元素的方法不如直接编写 HTML 直观。举个例子，假设现在我们需要在 “Hello World!” 标题和 <code>container</code> 容器中增加一层：把 “Hello World!” 放入一个名为 <code>greeting</code> 的 div 容器，再把这个 <code>greeting</code> 容器放入 <code>container</code> 容器里。从页面层级来看，关系应该是这样的：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+-------------------------+</div><div class="line">|        container        |</div><div class="line">|  +-------------------+  |</div><div class="line">|  |                   |  |</div><div class="line">|  |      greeting     |  |</div><div class="line">|  |  +-------------+  |  |</div><div class="line">|  |  |Hello World! |  |  |</div><div class="line">|  |  +-------------+  |  |</div><div class="line">|  |                   |  |</div><div class="line">|  +-------------------+  |</div><div class="line">|                         |</div><div class="line">+-------------------------+</div></pre></td></tr></table></figure></p>
<p>如果用 <code>React.createElement</code> 来实现 <code>greeting</code> 和 “Hello World!” 标题的动态创建，代码如下：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  ReactDOM.render(</div><div class="line">    React.createElement(<span class="string">"div"</span>, { id: <span class="string">"greeting"</span> },</div><div class="line">        React.createElement(<span class="string">"h1"</span>, <span class="literal">null</span>, <span class="string">"Hello World!"</span>)</div><div class="line">  ), <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>));</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到，仅仅是增加一层嵌套，就需要再写一层 <code>React.createElement</code> 。想象一下，当日后我们的项目变得越来越复杂时，我们的代码里可能会有一堆的 <code>Reacte.createElement</code> 嵌套，代码的可读性越来越差，甚至难以继续维护。</p>
<p>JSX 就是为了解决上面的问题而设计出来的一套扩展语法，它的特点是在 JavaScript 中加入了类 XML 语法特性。我们在开发网页应用的时候，不再需要调用无趣的 <code>Reacte.createElement</code> 来创建页面元素，而可以写 HTML 页面一样完成页面的编写。</p>
<p><div class="alert alert-info"><i class="fa fa-info"></i>  <p>JSX 的取名含义应该就是 <strong>JS</strong> + <strong>X</strong>ML 。</p>
</div></p>
<p>要使用 JSX ，我们需要对我们的代码做一些改造。将 <code>ReactDOM.render</code> 的内容改成：</p>
<p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</div><div class="line">    document.getElementById('container')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>不过这段代码并不能直接被浏览器渲染，我们需要将它保存到另一个文件 main.jsx 中：</p>
<p><img src="/images/learn-react-native-for-android-02/main-jsx.png" alt=""></p>
<p>完成后使用 <code>babel</code> 命令将 main.jsx 转成浏览器支持的 JavaScript 代码：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-cli babel-present-react  <span class="comment"># 安装 babel</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">'{ "presets": [ "react" ],  "plugins": []}'</span>  &gt; ~/.babelrc  <span class="comment"># 将 react 插件添加进 .babelrc</span></div><div class="line">$ <span class="built_in">cd</span> test</div><div class="line">$ babel main.jsx -o main.js</div></pre></td></tr></table></figure></p>
<p>完成后会在当前目录下生成 main.js 文件，我们打开它看看里面的内容：</p>
<p><img src="/images/learn-react-native-for-android-02/main-js.png" alt=""></p>
<p>可以和我们在上一节写的JavaScript代码比较下，是不是一模一样？现在可以在我们页面代码中把个脚本文件引用进来：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"main.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="代码解读-v2">代码解读</h4>
<p>如前面所说，JSX 其实就是在 JS 的基础上加入了类 XML 的语法。HTML 的标签直接写在 JavaScript 代码中，不加任何引号，这就是 JSX 的语法。它允许 HTML 与 JavaScript 的混写。纯 JS 的代码很难看出页面的逻辑，而加入了 HTML 的标签支持后，程序的可读性就大大提高了。</p>
<p>为了更详细的说明 JSX 语法的特点，我们对 main.jsx 的代码做点修改，将 “Hello World!” 字符串提取出来作为一个变量 <code>greeting</code> 。</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>;</div><div class="line">ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>{greeting}<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</div><div class="line">    document.getElementById('container')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>上面代码体现了 JSX 的基本语法规则：遇到 HTML 标签（以 <code>&lt;</code> 开头），就用 HTML 规则解析；遇到代码块（以 <code>{</code> 开头），就用 JavaScript 规则解析。我们再次用 babel 转换成 JS 代码，结果如下：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="pi">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>;</div><div class="line">ReactDOM.render(React.createElement(</div><div class="line">        <span class="string">"div"</span>,</div><div class="line">        { id: <span class="string">"greeting"</span> },</div><div class="line">        React.createElement(</div><div class="line">                <span class="string">"h1"</span>,</div><div class="line">                <span class="literal">null</span>,</div><div class="line">                greeting</div><div class="line">        )</div><div class="line">), <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>));</div></pre></td></tr></table></figure></p>
<h4 id="即时渲染-jsx">即时渲染 JSX</h4>
<p>由于是一门扩展语言，JSX 的代码并不能直接被浏览器渲染，所以我们不能直接在代码中引用 JSX 代码，而应该先用 babel 工具转换成 JavaScript 再引用。为了方便调试，我们可以使用 babel 中的 browser.js 来让浏览器支持渲染 JSX 。browser.js 属于 babel-core ，先安装 babel-core 。要注意的是 Babel 从 6.0 开始不再提供 browser.js ，因此我们需要安装版本 5 的 babel-core ：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install babel-core<span class="variable">@5</span></div></pre></td></tr></table></figure></p>
<p>然后将 index.html 修改成：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>;</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>{greeting}<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</div><div class="line">    document.getElementById('container')</div><div class="line">  );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>程序的第 6 行添加了对 browser.js 的引用，第 10 行开始直接加入 JSX 代码。需要注意的是脚本的类型需要为 <code>text/babel</code> ，用于告诉浏览器这段代码是 JSX 代码，需要使用 browser.js 渲染。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>browser.js 的原理其实是在页面运行时动态将 JSX 转成 JavaScript 再渲染，这个过程比较耗时。实际发布项目时依然建议使用 babel 将 JSX 预转换成 JavaScript 。</p>
</div></p>
<h4 id="扩展练习-v2">扩展练习</h4>
<ol>
<li>试试修改 JSX 代码中 HTML 中的部分，看看会有什么变化；</li>
<li>试试修改 JSX 代码中 JavaScript 的部分，看看 JavaScript 的一些常见语法特性是否能够被支持。例如将第 14 行改为 <code>&lt;h1&gt;{&quot;Hello &quot; + &quot;World!&quot;}&lt;/h1&gt;</code> 。</li>
<li>试试在 JSX 代码中 JavaScript 的部分写一个 if-else ，看看能否像期望的那样工作。如果不能，需要怎么修改使它工作？（提示：参考 <a href="http://facebook.github.io/react/tips/if-else-in-JSX.html" target="_blank" rel="external">If Else in JSX</a>）</li>
</ol>
<h2 id="练习3：组件和属性">练习3：组件和属性</h2>
<p>为了更好的将页面模块化，React 使用组件来表示每个页面模块。组件可以像其他 HTML 标签一样使用 <code>ReactDOM.render</code> 直接绘制。组件可以包含属性和状态。</p>
<ul>
<li><strong>属性（props）</strong>：类似 HTML 中的属性，在绘制的时候可以直接在标签中添加属性，然后在组件中通过 <code>this.props.属性名</code> 获取。</li>
<li><strong>状态（state）</strong>：维护组件内部的状态。一个组件就是一个状态机。React 把用户界面当作简单状态机，把用户界面想像成拥有不同状态然后渲染这些状态。在 React 中，一旦组件的 state 发生变化，用户界面有改动的部分就会被重绘。组件的状态通常在组件的内部函数 <code>getInitialState()</code> 中声明，使用 <code>setState()</code> 函数更新值，并通过 <code>this.state.状态名</code> 来获取值。</li>
</ul>
<p>我们将在下一个练习了解状态的使用。现在先让我们把焦点放在<strong>属性</strong>上。将 main.html 改写成：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Greeting = React.createClass({</div><div class="line">      render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="title">h1</span>&gt;</span>{this.props.word}<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        );</div><div class="line">      }</div><div class="line">    });</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">      <span class="tag">&lt;<span class="title">Greeting</span> <span class="attribute">word</span>=<span class="value">"Hello World!"</span>/&gt;</span>,</div><div class="line">      document.getElementById('container')</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="代码解读-v3">代码解读</h4>
<p>在上面的代码中，我们使用 <code>React.createClass()</code> 来创建一个组件实例。JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。每个组件通常都会有一个 <code>render()</code> 函数，用于指定当调用 <code>ReactDOM.render()</code> 渲染该组件时的方式。该函数会使用 <code>return</code> 语句返回一个页面节点。在我们的例子中，我们将问候语作为一个 word 属性，在 Greeting 组件中通过 <code>this.props.word</code> 来获取，并放入一个一级标题中，再在外层用一个 id 为 “greeting” 的 <code>div</code> 包含。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <ul>
<li>官方建议组件的取名以大写字母开头，以区分 HTML 标签。</li>
<li>目前， 一个 component 的 render，只能返回一个节点。如果你需要返回一堆 div ， 那你必须将你的组件用 一个div 或 span 或任何其他的组件包裹。</li>
</ul>
</div></p>
<p>在 <code>ReactDOM.render()</code> 函数中，我们可以像使用其他 HTML 标签一样使用自定义的组件，并传入一个自定义属性 <code>word</code> 。</p>
<p>经过这么修改，我们把原本 Hard-Code 的 “Hello World!” 字符串改成通过组件属性来传递，这个过程就完成了视图和数据的 <strong>绑定</strong> 。</p>
<p>现在我们使用 <a href="https://github.com/facebook/react-devtools/" target="_blank" rel="external">react-devtool</a> 来调试 React 程序，看看属性是如何被传入到组件里的。如果你的浏览器还没有装这个插件，现在就装上它（<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="external">Chrome 版</a> | <a href="https://addons.mozilla.org/firefox/addon/react-devtools/" target="_blank" rel="external">Firefox 版</a>）。</p>
<p>打开浏览器的调试工具，点击 React 选项卡，如图所示：</p>
<p><img src="/images/learn-react-native-for-android-02/react-devtool.png" alt=""></p>
<p>调试工具左侧的窗口展示了 Greeting 组件完成数据绑定后的结果，右边的窗口展示了 Greeting 组件的所有属性，目前只有一个 <code>word</code> 属性。我们在左边窗口的代码首行单击鼠标右键，可以打开一个菜单。选择 【Show Source】 可以跳进 Greeting 的源码，选择 【Show in Elements Pane】 可以跳进 HTML 元素面板中，如下图所示：</p>
<p><img src="/images/learn-react-native-for-android-02/invisible-prop.png" alt=""></p>
<h4 id="扩展练习-v3">扩展练习</h4>
<ol>
<li>试试在组件的 <code>render</code> 函数中返回多个根节点，看看会不会报错。</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/docs/reusable-components.html#prop-validation" target="_blank" rel="external">属性验证</a>的内容，编写对 <code>word</code> 属性的类型验证，并尝试将 word 的值修改为数值或者其他类型看看能否通过验证。</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/docs/reusable-components.html#default-prop-values" target="_blank" rel="external">属性默认值</a> 的内容，为 <code>word</code> 属性增加一个默认值 “Hello World” 。</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/docs/jsx-spread.html#spread-attributes" target="_blank" rel="external">扩展属性(Spread Attributes)</a>的内容，为 Greeting 添加一个新属性 <code>date</code> ，并使用 <code>{..props}</code> 传入这两个属性的值。</li>
</ol>
<h2 id="练习4：展示一组数据">练习4：展示一组数据</h2>
<p>我们继续完善我们的例子。现在我们希望能够传入一组人的名字，然后让 Greeting 组件向这些人问好。</p>
<p>将 index.html 改为：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Greeting = React.createClass({</div><div class="line">      render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">ol</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">          {</div><div class="line">            this.props.names.map(function (name) {</div><div class="line">              return <span class="tag">&lt;<span class="title">li</span>&gt;</span>Hello, {name}!<span class="tag">&lt;/<span class="title">li</span>&gt;</span>;</div><div class="line">            })</div><div class="line">          }</div><div class="line">          &lt;<span class="regexp">/ol&gt;</span></div><div class="line">        );</div><div class="line">      }</div><div class="line">    });</div><div class="line"></div><div class="line">    var names = ['Alice', 'Bob', 'Cindy'];</div><div class="line">    ReactDOM.render(</div><div class="line">      &lt;Greeting names={names}/&gt;,</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>刷新下浏览器，效果如下：</p>
<p><img src="/images/learn-react-native-for-android-02/props-array.png" alt=""></p>
<h4 id="代码解读-v4">代码解读</h4>
<p>让我们先看看 <code>ReactDOM.render()</code> 部分：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Cindy'</span>];</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="title">Greeting</span> <span class="attribute">names</span>=<span class="value">{names}</span>/&gt;</span>,</span></div><div class="line">  document.getElementById('container')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>这一部分的内容和之前的区别不大，唯一的区别就是 <code>names</code> 属性的取值通过传入一个变量 <code>names</code> 来完成，由于是一个 JavaScript 的列表型变量，因此，<code>names</code> 的两端需要用 <code>{}</code> 包围 。</p>
<p>我们再看看 <code>Greeting</code> 组件的实现：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var Greeting = React.createClass({</div><div class="line">  render: function() {</div><div class="line">    return (</div><div class="line">      &lt;ol id="greeting"&gt;</div><div class="line">      {</div><div class="line">        this.props.names.map(function (name) {</div><div class="line">          return &lt;li&gt;Hello, {name}!&lt;/li&gt;;</div><div class="line">        })</div><div class="line">      }</div><div class="line">      &lt;/ol&gt;</div><div class="line">    );</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure></p>
<p>在程序的第 6 行，我们使用 JavaScript 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external"><code>Array.prototype.map()</code></a> 操作将 <code>names</code> 数组的每个值 <code>name</code> 一个个使用 <code>&lt;li&gt;Hello, {name}&lt;/li&gt;</code> 的形式重新创建，得到一个新的数组再返回给 <code>ReactDOM.render()</code> 函数绘制。注意 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external"><code>Array.prototype.map()</code></a> 操作是一个 JavaScript 操作，所以必须使用 <code>{}</code> 包围。</p>
<p>打开 React 调试工具，可以看到 names 属性变成了一个列表：</p>
<p><img src="/images/learn-react-native-for-android-02/props-array-dev.png" alt=""></p>
<p>注意到调试工具的终端窗口出现了一个警告：</p>
<p><img src="/images/learn-react-native-for-android-02/key-prop-warning.png" alt=""></p>
<p>为了解释这个问题，我们先来了解一下虚拟 DOM 。</p>
<p>HTML 或 XML 文档是使用 DOM （Document Object Model，文档对象模型）来表示和处理的。DOM 技术使得用户页面可以动态地变化，如可以动态地显示或隐藏一个元素，改变它们的属性，增加一个元素等，使得页面的交互性大大地增强。</p>
<p>然而，DOM 有一个致命的缺点——慢。举个例子，假如我们需要在某个节点动态插入一个元素，那就需要先定位到那个节点再进行插入。假如要插入多个元素，那么节点的定位和插入的时间就要成倍增加。对于一个复杂的页面，整个过程可能非常耗时。</p>
<p>为了提高页面元素操纵的效率，React 提出了虚拟 DOM 的技术：组件在插入文档之前，并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，因此称为虚拟 DOM 。与 DOM 相比，虚拟 DOM 放弃了定位和修改节点的过程，而是通过一种称为 DOM diff 的算法找出中这个虚拟 DOM 中发生改动的部分，然后对这些部分进行整体刷新。这样，多次的节点定位和修改就合并成了一次组件的整体刷新。这就是为什么虚拟 DOM 的速度要比 DOM 快的重要原因。</p>
<p>由上也可看出，虚拟 DOM 技术依赖于 DOM diff 算法的效率和准确性。而这个算法依赖于以下两个假设：</p>
<ol>
<li>组件的 DOM 是相对稳定的。虚拟 DOM 在任何一个时刻的快照，和短时间内另一时刻的快照并不会有太大的变化，这样就很容易通过比较找出发生改动的部分。</li>
<li>类型相同的兄弟节点可以被唯一的标识。如果同类型的兄弟节点没有唯一的标识，那么不同时刻的虚拟 DOM 在同一级的 Diff 结果可能会不稳定。React 允许使用 <code>key</code> 属性来标识节点。</li>
</ol>
<p>列表的每个子元素就是类型相同的兄弟节点，如果列表的子元素不加上 <code>key</code> 属性标识，当列表的元素发生改变（例如有个新元素插入到头部），有可能会影响 DOM diff 的判断，从而影响算法的效率和准确性。</p>
<h4 id="拓展训练-v2">拓展训练</h4>
<ol>
<li>对于我们这个例子，如何修改代码来消除这个警告？</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/tips/children-props-type.html" target="_blank" rel="external"><code>this.props.children</code></a>的内容，尝试使用 <code>this.props.children</code> 取代例子中的 <code>this.props.names</code> 展示数据。</li>
</ol>
<h2 id="练习5：增加交互">练习5：增加交互</h2>
<p>到目前为止 Greeting 组件的 <code>name</code> 属性的值都是在代码中事先写好的，程序运行的过程中没法再改变。现在我们对这个例子做些修改，让它在运行时接受我们的输入，并生成问候语。</p>
<p>修改 index.html 代码如下：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Greeting = React.createClass({</div><div class="line">      getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> {</div><div class="line">          name_list : []</div><div class="line">        };</div><div class="line">      },</div><div class="line">      render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="title">ol</span>&gt;</span></div><div class="line">          {</div><div class="line">            this.state.name_list.map(function (name) {</div><div class="line">              return <span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">{name}</span>&gt;</span>Hello {name}!<span class="tag">&lt;/<span class="title">li</span>&gt;</span>;</div><div class="line">            })</div><div class="line">          }</div><div class="line">          &lt;<span class="regexp">/ol&gt;</span></div><div class="line">          &lt;input ref="name_input" placeholder="Input a name here" type="text"/&gt;</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>  <span class="attribute">onClick</span>=<span class="value">{this.handleClick}</span> /&gt;</span>          </span></div><div class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        );</div><div class="line">      },</div><div class="line">      handleClick: function(event) {</div><div class="line">        var names = this.state.name_list;</div><div class="line">        var input_name = this.refs.name_input.value;</div><div class="line">        names.push(input_name);</div><div class="line">        this.setState({name_list: names});</div><div class="line">        this.refs.name_input.value = "";</div><div class="line">      }</div><div class="line">    });</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">      <span class="tag">&lt;<span class="title">Greeting</span>/&gt;</span>,</div><div class="line">      document.getElementById('container')</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>刷新下浏览器，此时页面初始化时只有一个文本输入框和一个提交按钮：</p>
<p><img src="/images/learn-react-native-for-android-02/interactive-demo-init.png" alt=""></p>
<p>此时注意到调试工具中出现了一个新的 State 对象，该对象包含一个 0 元素的 name_list 列表。</p>
<p>往文本框中输入名字并点击提交按钮后，页面就会出现相应的问候语：</p>
<p><img src="/images/learn-react-native-for-android-02/interactive-demo.png" alt=""></p>
<p>此时调试工具中的 State 对象也发生了相应变化，name_list 中的元素会记录下用户输入的所有名字。</p>
<h4 id="代码解读-v5">代码解读</h4>
<p>在练习 3 中我们简单提过状态（state）。React 把用户界面当作简单状态机，把用户界面想像成拥有不同状态然后渲染这些状态。对于在代码中需要动态改变的数据，例如需要对用户输入、服务器请求或者时间变化等作出响应，这时就需要使用 state 。在我们的例子中，此时 Greeting 组件所需要渲染的名字列表是由用户输入的，所以应该将其改写成 state 。</p>
<ul>
<li>程序的第 12 ~ 16 行声明了一个 <code>name_list</code> 状态并初始化为一个 0 元素的空列表（<code>[]</code>）。</li>
</ul>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    name_list : []</div><div class="line">  };</div><div class="line">},</div></pre></td></tr></table></figure></p>
<p>在使用状态的组件中，这个函数通常是必须编写的。否则会报 “Cannot read property ‘name_list’ of null” 错误。</p>
<ul>
<li>程序的第 27 ~ 28 行增加了两个页面表单元素，用于接收用户输入和设置响应按钮点击事件为实例的 <code>handleClick()</code> 函数。</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"name_input"</span> <span class="attribute">placeholder</span>=<span class="value">"Input a name here"</span> <span class="attribute">type</span>=<span class="value">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>  <span class="attribute">onClick</span>=<span class="value">{this.handleClick}</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>程序的第 32 ~ 37 行是对 <code>handleClick()</code> 函数的实现。需要格外注意的一点是获取输入框的内容的方式。</li>
</ul>
<p>我们前面已经说到，组件在插入页面前其实是在虚拟 DOM 中的表示，因此，在渲染成最终实际的 DOM 前，你不能通过直接访问组件内的元素来试图获取它的属性。对于我们的代码，Greeting 组件的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，我们在文本输入框添加了一个 ref 属性 <code>name_input</code>，然后通过 <code>this.refs.name_input</code> 就指向这个虚拟 DOM 的子节点。</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">handleClick: function(event) {</div><div class="line">  var names = this.state.name_list;</div><div class="line">  var input_name = this.refs.name_input.value;</div><div class="line">  names.push(input_name);</div><div class="line">  this.setState({name_list: names});</div><div class="line">  this.refs.name_input.value = "";</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>如果需要获取这个元素自身的真实 DOM 节点，可以使用 <a href="http://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode" target="_blank" rel="external"><code>ReactDOM.findDOMNode</code></a> 方法。该方法将在虚拟 DOM 插入文档以后才返回该元素实际的 DOM 节点。</p>
<h4 id="扩展练习-v4">扩展练习</h4>
<ol>
<li>阅读官方文档有关 <a href="http://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-components-should-have-state" target="_blank" rel="external">state 与 props 的选择</a>，了解什么时候要用 state ，什么时候要用 props 。</li>
<li>阅读官方文档有关 <a href="http://facebook.github.io/react/docs/events.html#supported-events" target="_blank" rel="external">React 支持的事件</a> ，为文本框增加一个按键事件：当按下回车键时触发提交。</li>
<li>这个页面有一个bug：当用户什么都不输入，直接点 sumbit 按钮时，页面将把空文本当成 <code>name</code> 的 state 传入给 Greeting 组件渲染。如下图所示：
<img src="/images/learn-react-native-for-android-02/interactive-demo-bug.png" alt="">
怎么对用户的输入进行验证？</li>
<li>利用 <code>ReactDOM.findDOMNode</code> 函数，增加一个按钮，当点击该按钮时，让输入框获得焦点。</li>
<li>为了给用户一个输入示例，我们可以给 input 增加一个 <code>value=&quot;Alice&quot;</code> 属性，让它在页面初始时给出一个示例。如下：</li>
</ol>
<p><img src="/images/learn-react-native-for-android-02/interactive-hint-bug.png" alt=""></p>
<p>但这引来了一个 bug ：输入框变成了不可变。怎么解决这个问题？（留意终端的错误警告信息）</p>
<h2 id="练习6：复合组件">练习6：复合组件</h2>
<p>通过观察我们上一节的程序，我们可以看到 Greeting 组件其实包含了两个部分：一个用来展示问候语的列表，以及一个输入名字的表单。从功能上看，这两个部分可以各自作为一个独立的组件 NameList 和 NameForm ，然后再组合成一个复合组件 GreetingWidget 。画图示意如下：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+-----------------------------+</div><div class="line">|        GreetingWidget       |</div><div class="line">|                             |</div><div class="line">|  +-----------------------+  |</div><div class="line">|  |       NameList        |  |</div><div class="line">|  |                       |  |</div><div class="line">|  +-----------------------+  |</div><div class="line">|                             |</div><div class="line">|  +-----------------------+  |</div><div class="line">|  |       NameForm        |  |</div><div class="line">|  |                       |  |</div><div class="line">|  +-----------------------+  |</div><div class="line">+-----------------------------+</div></pre></td></tr></table></figure></p>
<p>这样的设计看起来好像很合理，然而在 React 中实现可能会遇到问题。<strong>在 React 里面，数据流是一个方向的：从拥有者到子节点</strong>。这是因为根据 <a href="http://en.wikipedia.org/wiki/Von_Neumann_architecture" target="_blank" rel="external">the Von Neumann model of computing</a> ，数据仅向一个方向传递。你可以认为它是<strong>单向数据绑定</strong>。因此， NameList 里头展示的数据必须由 GreetingWidget 以属性的方式传入，而这些属性又必须从 NameForm 获取。试图从子节点获取数据就违反了 React 单向数据绑定的原则。为了解决这个问题，我们可以以属性的形式传递一个回调函数 <code>onNameSubmit()</code> 给 NameForm 。当点击 NameForm 里的 submit 按钮时，就调用这个回调函数并将 name 数据作为参数交给回调函数处理。</p>
<p>代码如下：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> GreetingWidget = React.createClass({</div><div class="line">    getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> {</div><div class="line">        name_list : []</div><div class="line">      };</div><div class="line">    },</div><div class="line">    render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="title">NameList</span> <span class="attribute">name_list</span>=<span class="value">{this.state.name_list}</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">NameForm</span> <span class="attribute">onNameSubmit</span>=<span class="value">{this.handleNameSubmit}</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">      );</div><div class="line">    },</div><div class="line">    handleNameSubmit: function(name) {</div><div class="line">      var names = this.state.name_list;</div><div class="line">      names.push(name);</div><div class="line">      this.setState({name_list: names});</div><div class="line">    }</div><div class="line">  });</div><div class="line"></div><div class="line">  var NameForm = React.createClass({</div><div class="line">    handleSubmit: function(e) {</div><div class="line">      e.preventDefault();</div><div class="line">      var name = this.refs.name_input.value;</div><div class="line">      if (!name) {</div><div class="line">        return;</div><div class="line">      }</div><div class="line">      this.props.onNameSubmit(name);</div><div class="line">      this.refs.name_input.value = "";</div><div class="line">      return;</div><div class="line">    },</div><div class="line">    render: function() {</div><div class="line">      return (</div><div class="line">        <span class="tag">&lt;<span class="title">form</span> <span class="attribute">onSubmit</span>=<span class="value">{this.handleSubmit}</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"name_input"</span> <span class="attribute">placeholder</span>=<span class="value">"Input a name here"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">      );</div><div class="line">    }</div><div class="line">  });</div><div class="line"></div><div class="line">  var NameList = React.createClass({</div><div class="line">    render: function() {</div><div class="line">      return (</div><div class="line">        <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">ol</span>&gt;</span></div><div class="line">        {</div><div class="line">          this.props.name_list.map(function (name) {</div><div class="line">            return <span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">{name}</span>&gt;</span>Hello {name}!<span class="tag">&lt;/<span class="title">li</span>&gt;</span>;</div><div class="line">          })</div><div class="line">        }</div><div class="line">        &lt;<span class="regexp">/ol&gt;</span></div><div class="line">        &lt;/div&gt;</div><div class="line">      );</div><div class="line">    }</div><div class="line">  });</div><div class="line"></div><div class="line">  ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="title">GreetingWidget</span> /&gt;</span>,</span></div><div class="line">    document.getElementById('container')</div><div class="line">  );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="代码解读-v6">代码解读</h4>
<ul>
<li>代码的第 11 ~ 30 行是 GreetingWidget 组件的实现，第 32 ~ 51 行是 NameForm 组件的实现。第 53 ~ 68 行是 NameList 的组件。在第 20 行和第 21 行， Greeting 组件分别包含了 NameForm 组件和 NameList 组件：</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">NameList</span> <span class="attribute">name_list</span>=<span class="value">{this.state.name_list}</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">NameForm</span> <span class="attribute">onNameSubmit</span>=<span class="value">{this.handleNameSubmit}</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，Greeting 组件将 <code>handleNameSubmit()</code> 函数作为一个属性传递给 NameForm 当做回调函数。</p>
<p><img src="/images/learn-react-native-for-android-02/multiple-comp-callback.png" alt=""></p>
<p>在上图所示的调试工具中也可以清楚的看到 GreetingWidget 在虚拟 DOM 中的内部结构。</p>
<ul>
<li>在 NameForm 的实现中，我们将表单的 <code>onSubmit</code> 事件指定使用该组件实例的 <code>handleSubmit()</code> 函数处理：</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render: function() {</div><div class="line">  return (</div><div class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">onSubmit</span>=<span class="value">{this.handleSubmit}</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"name_input"</span> <span class="attribute">placeholder</span>=<span class="value">"Input a name here"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">  );</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>而 <code>handleSubmit()</code> 函数调用了父节点 GreetingWidget 传进来的回调函数 <code>onNameSubmit()</code> 函数，并传入本节点的输入框控件的值作为 <code>name</code> 参数：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">handleSubmit: function(e) {</div><div class="line">  e.preventDefault();</div><div class="line">  var name = this.refs.name_input.value;</div><div class="line">  if (!name) {</div><div class="line">    return;</div><div class="line">  }</div><div class="line">  this.props.onNameSubmit(name);</div><div class="line">  this.refs.name_input.value = "";</div><div class="line">  return;</div><div class="line">},</div></pre></td></tr></table></figure></p>
<p>注意在这里我们调用了 <code>preventDefault()</code> 来避免使用浏览器默认的行为提交表单。</p>
<ul>
<li>GreetingWidget 的 <code>onNameSubmit()</code> 回调函数指定使用 <code>handleNameSubmit()</code> 函数来处理，该函数接收子节点回传的 <code>name</code> 参数，并通过 <code>setState()</code> 方法追加到当前 <code>name_list</code> 列表中：</li>
</ul>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">handleNameSubmit: <span class="function"><span class="keyword">function</span><span class="params">(name)</span> </span>{</div><div class="line">  <span class="keyword">var</span> names = <span class="keyword">this</span>.state.name_list;</div><div class="line">  names.push(name);</div><div class="line">  <span class="keyword">this</span>.setState({name_list: names});</div><div class="line">}</div></pre></td></tr></table></figure></p>
<ul>
<li>在 GreetingWidget 中，由于要处理用户输入，数据被定义为 State 。在调试工具中，点击根节点 GreetingWidget ，注意右侧数据区中的 name_list 是以 State 定义的：</li>
</ul>
<p><img src="/images/learn-react-native-for-android-02/multiple-comp-root.png" alt=""></p>
<p>而传给 NameList 的数据只用来展示，所以可以定义为 Props 。在调试工具中，点击 NameList 子节点，注意右侧数据区中的 name_list 是以 Prop 定义的：</p>
<p><img src="/images/learn-react-native-for-android-02/multiple-comp-sub.png" alt=""></p>
<h4 id="扩展练习-v5">扩展练习</h4>
<ol>
<li>试试移除第 34 行 <code>e.preventDefault();</code> 重新提交下数据，看看有什么变化；</li>
<li>给我们的页面元素添加样式，注意在 JSX 中指定页面元素 css 属性应该使用 <code>className</code> 属性。详见 <a href="http://facebook.github.io/react/docs/tags-and-attributes.html#supported-attributes" target="_blank" rel="external">Supported Attributes</a> 。</li>
<li>使用单向数据绑定是 React 保持简单的一个重要体现。如果确实需要双向数据绑定，从子节点返回数据给父节点，可以考虑使用 <a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html" target="_blank" rel="external">ReactLink</a> 。阅读官方文档关于 <a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html" target="_blank" rel="external">ReactLink</a> 的介绍，并尝试使用 ReactLink 取代回调的方式重新实现本节的例子。</li>
</ol>
<h2 id="补遗">补遗</h2>
<p>本文从例子入手，一步步介绍了 JSX 、组件、属性、状态、数据展示、表单处理、复合组件等 React 开发中的基础概念，在其中存在的一些坑和值得深究的东西也尽量以扩展练习的形式交给读者主动去学习掌握。</p>
<p>受限于篇幅关系，本文所介绍的内容主要是为了后续学习 React Native 做准备，而不足以囊括 React 开发基础的所有方面。例如：</p>
<ol>
<li>没有深入探讨<a href="http://facebook.github.io/react/docs/component-specs.html" target="_blank" rel="external">组件的生存周期</a>；</li>
<li>没有介绍 <a href="http://facebook.github.io/react/docs/reusable-components.html#mixins" target="_blank" rel="external">Mixins</a> 和如何用它来编写可复用组件；</li>
<li>没有引入与 Ajax 结合的网络编程；</li>
<li>没有介绍 <a href="https://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>/<a href="http://segmentfault.com/a/1190000002793786?utm_source=tuicool" target="_blank" rel="external">Reflux</a>/<a href="https://github.com/graphql/graphql-js" target="_blank" rel="external">GraphQL</a>/<a href="http://www.oschina.net/p/relay" target="_blank" rel="external">Relay</a> 等数据处理库。</li>
</ol>
<p>如果希望继续深入学习 React 开发，在学习完本文之后，您可以继续阅读下面列举的资料：</p>
<ol>
<li>阅读 Starter Kit 中自带的所有官方例子的代码；</li>
<li>阅读 <a href="http://facebook.github.io/react/docs/tutorial.html" target="_blank" rel="external">官方教程</a> ，了解如何使用 React 和 Ajax 进行网络编程。</li>
<li>阅读上面提及的链接，补充学习本文所遗漏的内容。</li>
</ol>
<p>其它推荐的学习材料：</p>
<ol>
<li><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="external">Awesome-React 系列</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程 - 阮一峰</a></li>
<li><a href="http://vdisk.weibo.com/s/A0GI9rYbt9zQ" target="_blank" rel="external">QCon上海2015 - React 实战 - 王沛</a></li>
<li><a href="http://react-ecosys.weitie.co/" target="_blank" rel="external">QCon上海2015 - 探索 React 生态圈 - 郭达锋</a></li>
<li><a href="http://blog.zigomir.com/react.js/jquery/2015/01/11/jquery-versus-react-thinking.html" target="_blank" rel="external">jQuery versus React.js thinking - zigomir</a></li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/React/" term="React"/>
    <category scheme="http://hahack.com/tags/Javascript/" term="Javascript"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[学习 React Native for Android：环境搭建]]></title>
    <link href="http://hahack.com/codes/learn-react-native-for-android-01/"/>
    <id>http://hahack.com/codes/learn-react-native-for-android-01/</id>
    <published>2015-10-16T21:23:08.000Z</published>
    <updated>2017-02-11T04:41:08.103Z</updated>
    <content type="html"><![CDATA[<p>Facebook 于 2015 年 9 月 15 日发布了 React Native for Android 。React Native 让开发者使用 JavaScript 和 React 编写应用，利用相同的核心代码就可以创建 Web，iOS 和 Android 平台的原生应用。注意这里的 <q>核心</q> 两个词，它指的是那些底层的、与界面无关的逻辑。与 ionic / PhoneGap 这类 Web App 开发框架不同，React Native 主张使用 React 的开发方式来开发 Native 应用，因为在现阶段 Web App 还无法达到 Native App 的体验。所以，React Native 并不强调 <q>write Once, run everywhere</q> ，而是 <q>learn once, write everywhere</q> ：上层使用 JS 和 React 开发不同平台的 UI，下层则可以编写能够复用的核心代码，从而大幅提高开发效率。</p>
<p>关于 React Native 的好处，唐巧在 《<a href="http://blog.devtang.com/blog/2015/02/01/talk-about-react-native/" target="_blank" rel="external">谈谈 React Native</a>》 里已经有比较深刻的总结，本文不再赘述。本文将作为一个 React Native for Android 学习系列的一个开篇，从零开始学习 React Native 。我尽量不偷懒，保证文章及时更新。</p>
<a id="more"></a>
<h2 id="准备工作">准备工作</h2>
<ol>
<li>操作系统：当前仅支持 OS X；</li>
<li>由于 atom 的 package 服务 apm 国内不可用，因此国内的朋友需要做好 Cross the Wall 的准备。</li>
</ol>
<h2 id="基本开发环境搭建">基本开发环境搭建</h2>
<h3 id="安装-homebrew">安装 Homebrew</h3>
<p>Homebrew 是一个方便开发者在 MAC OS X 系统上面安装 Linux 工具包的 ruby 脚本，如果你的机器还没有安装 Homebrew ，则需要执行下面的命令安装：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure></p>
<p>完成后可以试试执行 <code>brew -v</code> 检查下 brew 是否安装成功。</p>
<p>如果你的机器已经安装过 Homebrew ，<strong>强烈建议</strong> 对 Homebrew 的包做一下更新：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update && brew upgrade</div></pre></td></tr></table></figure></p>
<h3 id="安装-node-js">安装 Node.js</h3>
<p>建议使用 Node 的版本管理器 nvm 来安装新版本的 Node.js 。</p>
<h4 id="安装-nvm">安装 nvm</h4>
<p>首先需要安装 nvm 。官方推荐的做法是通过 <code>curl</code> 或者 <code>wget</code> 来安装：</p>
<h5 id="通过-curl-安装">通过 curl 安装</h5>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install curl  <span class="comment"># 确保安装了 curl</span></div><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.<span class="number">29.0</span>/install.sh | bash</div></pre></td></tr></table></figure></p>
<h5 id="通过-wget-安装">通过 wget 安装</h5>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install wget  <span class="comment"># 确保安装了 wget</span></div><div class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.<span class="number">29.0</span>/install.sh | bash</div></pre></td></tr></table></figure></p>
<p>完成后可以试试执行 <code>nvm --version</code> 检查下 nvm 是否安装成功。</p>
<h4 id="安装-node-js-v2">安装 Node.js</h4>
<p>使用 nvm 安装 Node.js：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install node && nvm alias default node</div></pre></td></tr></table></figure></p>
<h3 id="安装-watchman">安装 watchman</h3>
<p><a href="https://facebook.github.io/watchman/docs/install.html" target="_blank" rel="external">watchman</a> 是 Facebook 的一个用于监控文件变更并触发指定操作的工具：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install watchman</div></pre></td></tr></table></figure></p>
<h3 id="安装-flow">安装 flow</h3>
<p><a href="http://flowtype.org/" target="_blank" rel="external">Flow</a> 是一个 JavaScript 的静态类型检查器，建议安装它，以方便找出代码中可能存在的类型错误：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install flow</div></pre></td></tr></table></figure></p>
<h3 id="安装-android-sdk">安装 Android SDK</h3>
<p>如果你之前已经装过 Android SDK ，打开 Android SDK Manager，确保如下工具和开发包已经安装：</p>
<p>SDK：</p>
<ul>
<li>Android SDK Build-tools version 23.0.1</li>
<li>Android 6.0 (API 23)</li>
<li>Android Support Repository</li>
</ul>
<p>模拟器：</p>
<ul>
<li>Intel x86 Atom System Image (for Android 5.1.1 - API 22)</li>
<li>Intel x86 Emulator Accelerator (HAXM installer)</li>
</ul>
<p>如果之前没有装过 Android SDK ，可以通过如下步骤安装：</p>
<ol>
<li>安装最新的 JDK.</li>
<li>使用 <code>brew install android-sdk</code> 来安装安卓 SDK。</li>
<li>将它添加到 ~/.bashrc, ~/.zshrc 或者任何其他您的 shell 所使用的路径：<code>export ANDROID_HOME=/usr/local/opt/android-sdk</code></li>
<li>启动一个新的 shell 并且运行 <code>android</code> ，在出现窗口中勾选上面列出的 SDK 和模拟器。</li>
<li>点击 “Install Packages”。</li>
</ol>
<p>详细介绍可以参考 <a href="http://wiki.jikexueyuan.com/project/react-native/DevelopmentSetupAndroid.html" target="_blank" rel="external">这篇文章</a> 。</p>
<h3 id="安装-react-native">安装 React Native</h3>
<p>最后到了关键一步，安装 React Native：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g react-native-cli</div></pre></td></tr></table></figure></p>
<p>至此完成 React Native 基本开发环境的搭建。</p>
<h2 id="nuclide-ide-的安装和配置-可选">Nuclide IDE 的安装和配置（可选）</h2>
<p>Nuclide 是 Facebook 专门为 React 开发的 IDE ，既然是官方提供的 IDE ，就意味着拥有更好的语法补全、类型检查等支持。为了开发效率，不妨尝试一下这个 IDE 。</p>
<h3 id="安装-atom">安装 Atom</h3>
<p>本质上，Nuclide 其实是在 Atom 的基础上提供的一系列插件集。要使用 Nuclide ，首先需要先安装 Atom 。Atom 是 Github 所推出的一个开源编辑器，其最大的特点是使用 node.js 来作为其插件语言。</p>
<p>到<a href="https://atom.io/" target="_blank" rel="external">Atom的官网</a>下载 Atom 并安装。</p>
<h3 id="安装-nuclide">安装 Nuclide</h3>
<p>安装完 Atom 后，打开 Settings 面板，并点击 Install 选项卡，然后在搜索框中键入 nuclide-installer ，如图所示：</p>
<p><img src="/images/learn-react-native-for-android-01/nuclide-installer.png" alt="搜索 nuclide-installer"></p>
<p>第一个结果就是我们需要安装的插件，点击该插件旁边的蓝色 Install 按钮进行安装。</p>
<p>另一种方法是直接利用 Atom 的包管理器 <code>apm</code> 安装：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apm install nuclide-installer</div></pre></td></tr></table></figure></p>
<p>完成后重启一下 Atom ，Atom 就会开始完成对 Nuclide 所有插件的下载安装，这个过程可能耗时比较长。完成后可以再次进入 Setting 面板，并点击 Packages 选项卡，你将可以看到一堆的 <code>Nuclide-</code> 开头的插件。</p>
<p>为了方便编译 React Native 的工程，建议再安装一个终端插件，用于快速打开终端并定位到当前项目根路径。根据你的操作系统版本选择安装如下插件之一：</p>
<ul>
<li>atom-terminal：适合 Mac OSX 10.9 （Mavericks） 及以下的操作系统；</li>
<li>atomerinal：atom-terminal 在 Mac OSX Yosmite 和 EI Capitan 下不能准确定位路径，这个插件是对 atom-terminal 的 fork 和修改，适合版本更高的操作系统；</li>
</ul>
<h3 id="其他推荐插件">其他推荐插件</h3>
<p>除了 Nuclide 之外，还可以根据你的需求安装其他的一些插件，这里推荐一些插件：</p>
<ul>
<li>react：React 的语法补全和智能重排；</li>
<li>react-snippets：React 的代码段；</li>
<li>highlight-selected：高亮当前双击选中的标记；</li>
<li>jshint：检查 JavaScript 的语法，支持 JSX （需要在插件设置中开启 Support Linting JSX）；</li>
<li>emmet：用 emmet （Zen Coding）方式快速编写页面；</li>
<li>save-session：让 Atom 记住上一次打开的会话；</li>
<li>browser-plus：在 Atom 中内嵌一个浏览器窗口，方便页面调试（其实 Atom 本身就是一个浏览器）；</li>
<li>minimap：如果你对 Sublime Text 的 minimap 念念不忘；</li>
<li>atomic-emacs：Emacs 键盘布局，适合 Emacs 用户使用；</li>
<li>vim-mode：Vim 键盘布局，适合 Vim 用户使用。</li>
</ul>
<p>但要注意，Atom 目前的性能还比较差强人意，安装太多的插件会影响整个编辑器的启动速度，所以建议只安装必需的插件。</p>
<h2 id="第一个小程序：awesomeproject">第一个小程序：AwesomeProject</h2>
<p>执行如下命令生成一个工程：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ react-native init AwesomeProject</div></pre></td></tr></table></figure></p>
<p>该命令将会下载 React Native 工程源码和依赖，生成的工程文件如下图所示：</p>
<p><img src="/images/learn-react-native-for-android-01/project-skeleton.png" alt="生成的示例工程"></p>
<p>仔细观察这个工程，你会发现如下的内容：</p>
<ul>
<li><code>node_modules</code> 文件夹，这是 Node.js 用来存放和管理 npm 包的文件夹，现在这里包含了 React Native 框架。</li>
<li>index.android.js 文件和 index.ios.js 文件。这是 React Native CLI 工具分别为 Android 和 iOS 创建的空壳应用。</li>
<li>android 文件夹和 ios 文件夹。包含了用于生成两个平台的 App 的 Bootstrap 型项目。</li>
</ul>
<p>现在打开 Atom ，点击 File 菜单的 【Add Project Folder…】 菜单项，导入 AwesomeProject 工程文件夹，如下图所示：</p>
<p><img src="/images/learn-react-native-for-android-01/atom-awesomeproject.png" alt=""></p>
<p>通过终端插件快速打开终端（快捷键是 <code>Alt</code> + <code>Shift</code> + <code>t</code>），然后执行如下命令运行 Android 应用程序：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ react-native run-android</div></pre></td></tr></table></figure></p>
<p>React Native 会开始构建这个工程，同时会启动 Running Packager 用于调试。如下图所示：</p>
<p><img src="/images/learn-react-native-for-android-01/run-project.png" alt=""></p>
<p>如果 Running Packager 提示 “Packager can’t listen on port 8081” ，说明 8081 端口被占用，可以检查是什么程序占用了这个端口并杀掉它：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> lsof -n -i4TCP:<span class="number">8081</span> | grep LISTEN</div><div class="line">$ kill -<span class="number">9</span> &lt;进程id&gt;</div></pre></td></tr></table></figure></p>
<p>构建完成后，手机或模拟器将会自动运行这个 App 。如果你看到的是这样的画面：</p>
<p><img src="/images/learn-react-native-for-android-01/unable-to-download-js-bundle.png" alt=""></p>
<p>你还需要进行如下设置：</p>
<ol>
<li>更新 brew 和 watchman ：<code>brew update &amp;&amp; brew upgrade watchman</code>；</li>
<li>摇动手机或按下菜单按钮呼出菜单，然后点击 【DeviceID Settings】 菜单项进入应用的选项界面，再点击 【Debug server host for device】 选项，填入你的 Mac 主机的 ip ；
<img src="/images/learn-react-native-for-android-01/app-setup.png" alt=""></li>
<li>完成后重启一下应用，或者回到主界面再次呼出菜单，点击 【Reload JS】 。应用就会开始抓取主机上的 JS Bundle 并显示如下的界面：
<img src="/images/learn-react-native-for-android-01/hello-world.png" alt="Hello World"></li>
</ol>
<p>我们的第一个应用就成功执行起来了！</p>
<p>现在试试对我们的工程做点改动。在 Atom 下打开 index.android.js 文件，并将第 20 行附件的</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World!</div></pre></td></tr></table></figure></p>
<p>改成</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello HaHack!</div></pre></td></tr></table></figure></p>
<p>然后再次呼出菜单，点击 【Reload JS】 刷新下界面，此时界面中的 <code>Hello World!</code> 就变成了 <code>Hello HaHack!</code> ：</p>
<p><img src="/images/learn-react-native-for-android-01/hello-hahack.png" alt="Hello HaHack"></p>
<h2 id="小技巧">小技巧</h2>
<h3 id="添加-alias">添加 Alias</h3>
<p>React Native 运行一个 App 的命令有点长，可以为其编写一些 Alias ，节省时间，方便记忆。将下面两行代码添加到你的 Shell 配置文件中（<code>.bashrc</code> 或 <code>.zshrc</code>）：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias rna=<span class="string">"react-native run-android"</span></div><div class="line">alias rni=<span class="string">"react-native run-ios"</span></div></pre></td></tr></table></figure></p>
<p>完成后重新打开终端，即可使用 <code>rna</code> 命令运行 React Native for Android 项目，用 <code>rni</code> 命令运行 React Native for iOS 项目。</p>
<h3 id="自动刷新界面">自动刷新界面</h3>
<p>如果希望每次修改 JS 脚本后自动刷新应用的界面，可以再次进入应用的选项界面，把 【Auto reload on JS Change】 选项打开：</p>
<p><img src="/images/learn-react-native-for-android-01/auto-reload.png" alt=""></p>
<p>这样当 watchman 发现你的 JS 文件发生更改时，就会让 Running Packager 重新加载应用的界面。</p>
]]></content>
    <category scheme="http://hahack.com/tags/React-Native/" term="React-Native"/>
    <category scheme="http://hahack.com/tags/Android/" term="Android"/>
    <category scheme="http://hahack.com/tags/Atom/" term="Atom"/>
    <category scheme="http://hahack.com/tags/Nuclide/" term="Nuclide"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[jQuery-based Local Search Engine for Hexo]]></title>
    <link href="http://hahack.com/codes/local-search-engine-for-hexo/"/>
    <id>http://hahack.com/codes/local-search-engine-for-hexo/</id>
    <published>2015-10-08T08:27:04.000Z</published>
    <updated>2017-02-11T04:41:08.103Z</updated>
    <content type="html"><![CDATA[<p>早在我最初<a href="/codes/from-ruhoh-to-hexo/">从 Ruhoh 迁移博客到 Hexo</a> 时，我就有动手写一个本地的搜索引擎的想法。比起使用第三方服务的站内搜索，本地搜索引擎有几个好处：</p>
<ol>
<li>更可靠。不用担心<del>由于某些显而易见的原因导致</del>第三方服务不可访问。</li>
<li>速度更快。不管是 Google 还是 Swiftype ，第三方搜索服务的加载速度总是比较慢，影响浏览体验。</li>
<li>定制性更强。由于是自己写的插件，检索的具体策略、界面样式都可以自己定义，满足极客们 Bigger than Bigger 的需求。</li>
</ol>
<p>这个想法起初是受了 Christian Fei 的 <a href="https://github.com/christian-fei/Simple-Jekyll-Search" target="_blank" rel="external">Simple Jekyll Search</a> 启发。在了解了它的原理后，我认为在 Hexo 上实现一个本地搜索引擎并不复杂。大致的思路是：</p>
<ul>
<li>写一个 generator ，生成站点所有文章的索引数据；</li>
<li>当在搜索框中输入关键词时，触发 Javascript 的特定函数，在这个索引数据里头检索包含该关键词的文章；</li>
<li>利用 jQuery 在页面中动态插入检索结果。</li>
</ul>
<a id="more"></a>
<p>想法对头，就开始动手撸吧。我和一个朋友 <a href="https://github.com/maoshuhao" target="_blank" rel="external">maoshuhao</a> 一起合作完成了 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 插件，用来生成站点的索引数据。有了它，后面的搜索引擎就非常容易实现了。</p>
<p>你可以访问这个 <a href="http://wzpan.github.io/hexo-theme-freemind/404.html" target="_blank" rel="external">404页面</a> 试试这个本地搜索引擎的效果。如你所见，这个搜索引擎还是一个 live search engine ，即一旦检测到搜索框有修改，就会立即触发检索 <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>对于文章太多的站点，如果认为 live search 影响性能，可以改为回车触发搜索。 </span></span></span> 。</p>
<p>下面介绍如何给自己的博客搭建这样的一个搜索引擎。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>最新版本的 <a href="http://github.com/wzpan/hexo-theme-freemind/" target="_blank" rel="external">hexo-theme-freemind</a> 已提供了本地搜索功能。如果懒得折腾，欢迎使用这个主题。</p>
</div></p>
<h2 id="安装和配置-hexo-generator-search">安装和配置 hexo-generator-search</h2>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-generator-search</div></pre></td></tr></table></figure></p>
<p>然后，在站点根 <code>_config.yml</code> 里头添加设置项：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: <span class="filename">search.xml</span></div><div class="line">  field: post</div></pre></td></tr></table></figure></p>
<p>其中：</p>
<ul>
<li><strong>path</strong> - 指定生成的索引数据的文件名。默认为 search.xml 。</li>
<li><strong>field</strong> - 指定索引数据的生成范围。可选值包括：
<ul>
<li><strong>post</strong> - 只生成博客文章（post）的索引（默认）；</li>
<li><strong>page</strong> - 只生成其他页面（page）的索引；</li>
<li><strong>all</strong> - 生成所有文章和页面的索引。</li>
</ul>
</li>
</ul>
<p>完成后，可以试试访问预览站点的 search.xml 页面。例如，如果你的预览站点域名是 <a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a> ，那么可以访问 <a href="http://0.0.0.0:4000/search.xml" target="_blank" rel="external">http://0.0.0.0:4000/search.xml</a> 看看是否会打开一个 xml 页面。</p>
<h2 id="编写搜索界面">编写搜索界面</h2>
<p>搜索界面由一个输入框（input）和一个用于动态插入搜索结果的 div 组成。例如：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"site_search"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"local-search-input"</span> <span class="attribute">name</span>=<span class="value">"q"</span> <span class="attribute">results</span>=<span class="value">"0"</span> <span class="attribute">placeholder</span>=<span class="value">"search my blog..."</span> <span class="attribute">class</span>=<span class="value">"form-control"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"local-search-result"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>你也可以根据自己的喜好写成其他的形式，例如把用于插入结果的 div 移动到页面的其他地方。</p>
<h2 id="实现本地搜索函数">实现本地搜索函数</h2>
<p>接下来编写一个 search.js 脚本，用来实现基于 search.xml 的本地检索函数 searchFunc ：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span><span class="params">(path, search_id, content_id)</span> </span>{</div><div class="line"><span class="pi">    'use strict'</span>;</div><div class="line">    $.ajax({</div><div class="line">        url: path,</div><div class="line">        dataType: <span class="string">"xml"</span>,</div><div class="line">        success: <span class="function"><span class="keyword">function</span><span class="params">( xmlResponse )</span> </span>{</div><div class="line">            <span class="comment">// get the contents from search data</span></div><div class="line">            <span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">                <span class="keyword">return</span> {</div><div class="line">                    title: $( <span class="string">"title"</span>, <span class="keyword">this</span> ).text(),</div><div class="line">                    content: $(<span class="string">"content"</span>,<span class="keyword">this</span>).text(),</div><div class="line">                    url: $( <span class="string">"url"</span> , <span class="keyword">this</span>).text()</div><div class="line">                };</div><div class="line">            }).get();</div><div class="line"></div><div class="line">            <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</div><div class="line">            <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</div><div class="line"></div><div class="line">            $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">                <span class="keyword">var</span> str=<span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;                </div><div class="line">                <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</div><div class="line">                $resultContent.innerHTML = <span class="string">""</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) {</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                }</div><div class="line">                <span class="comment">// perform local searching</span></div><div class="line">                datas.forEach(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>{</div><div class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">var</span> content_index = [];</div><div class="line">                    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_url = data.url;</div><div class="line">                    <span class="keyword">var</span> index_title = -<span class="number">1</span>;</div><div class="line">                    <span class="keyword">var</span> index_content = -<span class="number">1</span>;</div><div class="line">                    <span class="keyword">var</span> first_occur = -<span class="number">1</span>;</div><div class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></div><div class="line">                    <span class="keyword">if</span>(data_title != <span class="string">''</span> && data_content != <span class="string">''</span>) {</div><div class="line">                        keywords.forEach(<span class="function"><span class="keyword">function</span><span class="params">(keyword, i)</span> </span>{</div><div class="line">                            index_title = data_title.indexOf(keyword);</div><div class="line">                            index_content = data_content.indexOf(keyword);</div><div class="line"></div><div class="line">                            <span class="keyword">if</span>( index_title &lt; <span class="number">0</span> && index_content &lt; <span class="number">0</span> ){</div><div class="line">                                isMatch = <span class="literal">false</span>;</div><div class="line">                            } <span class="keyword">else</span> {</div><div class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) {</div><div class="line">                                    index_content = <span class="number">0</span>;</div><div class="line">                                }</div><div class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) {</div><div class="line">                                    first_occur = index_content;</div><div class="line">                                }</div><div class="line">                            }</div><div class="line">                        });</div><div class="line">                    }</div><div class="line">                    <span class="comment">// show search results</span></div><div class="line">                    <span class="keyword">if</span> (isMatch) {</div><div class="line">                        str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title'&gt;"</span>+ data_title +<span class="string">"&lt;/a&gt;"</span>;</div><div class="line">                        <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</div><div class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) {</div><div class="line">                            <span class="comment">// cut out 100 characters</span></div><div class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</div><div class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</div><div class="line"></div><div class="line">                            <span class="keyword">if</span>(start &lt; <span class="number">0</span>){</div><div class="line">                                start = <span class="number">0</span>;</div><div class="line">                            }</div><div class="line"></div><div class="line">                            <span class="keyword">if</span>(start == <span class="number">0</span>){</div><div class="line">                                end = <span class="number">100</span>;</div><div class="line">                            }</div><div class="line"></div><div class="line">                            <span class="keyword">if</span>(end &gt; content.length){</div><div class="line">                                end = content.length;</div><div class="line">                            }</div><div class="line"></div><div class="line">                            <span class="keyword">var</span> match_content = content.substr(start, end); </div><div class="line"></div><div class="line">                            <span class="comment">// highlight all keywords</span></div><div class="line">                            keywords.forEach(<span class="function"><span class="keyword">function</span><span class="params">(keyword)</span></span>{</div><div class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</div><div class="line">                                match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span>+keyword+<span class="string">"&lt;/em&gt;"</span>);</div><div class="line">                            });</div><div class="line">                            </div><div class="line">                            str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content +<span class="string">"...&lt;/p&gt;"</span></div><div class="line">                        }</div><div class="line">                        str += <span class="string">"&lt;/li&gt;"</span>;</div><div class="line">                    }</div><div class="line">                });</div><div class="line">                str += <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">                $resultContent.innerHTML = str;</div><div class="line">            });</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>searchFunc 包含三个参数：</p>
<ul>
<li><strong>path</strong> - 用 hexo-generator-search 生成的搜索索引文件的路径。注意这个 <code>path</code> 和前面 hexo-generator-search 的 <code>path</code> 选项有所不同。这里的 path 才是指这个文件的路径，而前面的 <code>path</code> 指的是生成的文件名 <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>也许第二个 <code>path</code> 叫 <code>filename</code> 更合适。</span></span></span> ；</li>
<li><strong>search_id</strong> - 搜索框的 id 。对于我们的例子，就是 <code>local-search-input</code>;</li>
<li><strong>content_id</strong> - 结果框的 id 。对于我们的例子，就是 <code>local-search-result</code>。</li>
</ul>
<h2 id="调用搜索函数">调用搜索函数</h2>
<p>有了上面的检索函数，接下来可以在适当时机调用它。由于 path 的实际地址是根 <code>_config.yml</code> 里 <code>config.root</code> + <code>config.search.path</code> 两个值组成，所以我们最好将这个调用写在页面模板中，以方便获取站点的设置信息。例如，对于 ejs 模板：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;      </div><div class="line">     <span class="keyword">var</span> search_path = <span class="string">"&lt;%= config.search.path %&gt;"</span>;</div><div class="line">     <span class="keyword">if</span> (search_path.length == <span class="number">0</span>) {</div><div class="line">     	search_path = <span class="string">"search.xml"</span>;</div><div class="line">     }</div><div class="line">     <span class="keyword">var</span> path = <span class="string">"&lt;%= config.root %&gt;"</span> + search_path;</div><div class="line">     searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>至此就完成了本地检索引擎的实线，最后的工作就是修改样式，让检索页面更美观。在 searchFunc 函数中，我已经为几个关键的页面元素设定了 css 名：</p>
<ul>
<li>ul.search-result-list - 搜索结果列表的样式名；</li>
<li>a.search-result-title - 搜索结果文章标题的样式名；</li>
<li>p.search-result - 搜索结果每篇文章的预览段落的样式名；</li>
<li>em.search-keyword - 搜索结果每篇文章的预览段落中匹配关键词的样式名。</li>
</ul>
<p>最后给出 <a href="http://wzpan.github.io/hexo-theme-freemind/" target="_blank" rel="external">hexo-theme-freemind</a> 主题的相关样式：</p>
<p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ul.search-result-list {</div><div class="line">  padding-left: 10px;</div><div class="line">}</div><div class="line"></div><div class="line">a.search-result-title {</div><div class="line">  font-weight: bold;</div><div class="line">}</div><div class="line"></div><div class="line">p.search-result {</div><div class="line">  color=#555;</div><div class="line">}</div><div class="line"></div><div class="line">em.search-keyword {</div><div class="line">  border-bottom: 1px dashed #4088b8;</div><div class="line">  font-weight: bold;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    <category scheme="http://hahack.com/tags/jQuery/" term="jQuery"/>
    <category scheme="http://hahack.com/tags/Hexo/" term="Hexo"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Dockerize Your Hexo]]></title>
    <link href="http://hahack.com/tools/dockerize-your-hexo/"/>
    <id>http://hahack.com/tools/dockerize-your-hexo/</id>
    <published>2015-06-02T03:29:38.000Z</published>
    <updated>2017-02-11T04:41:08.099Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在<a href="/codes/hexo-3-speed-up/">上篇文章</a>中，我简单提到了在升级 Hexo 3 过程中遇到的一些痛苦。其实还有很多问题没有在上篇文章中提及。比如，我的渲染器使用的是 pandoc ，在 2.x 的时候，<a href="http://wzpan.github.io/hexo-theme-freemind/2014/03/16/tag-plugins/" target="_blank" rel="external">hexo-tag-plugins</a> 里头的文字可以通过调用 <code>renderSync</code> 方法传给 markdown 进行渲染，而到了 3.0 ，这些文字无论怎么做都不能被 pandoc 或者 markdown 渲染。</p>
<p>早在我决定挥刀动斧定制我的个人博客之前，我早已经做好了发生这种情况的心理准备。我的博客最早是使用 Ruhoh 编写的，从主题到渲染器进行了大量的个人定制，后面出于种种原因我决定<a href="http://192.168.59.103:4000/codes/from-ruhoh-to-hexo/" target="_blank" rel="external">切换到Hexo</a> ，于是我又花了很多力气把原来的博客移植到 Hexo 2.x 上。与其说是移植，不如说是一个基于 Hexo 2.x 的山寨版。现在 Hexo 一旦做了大幅更新，相当于我又得经历和前两次一样的折腾，实在是有心无力呀。考虑再三，我决定放弃使用 Hexo 3 ，而将我的博客所使用的环境 <q>冻结</q> 为 2.8.3 。</p>
<p>但这样又带来了问题：为了方便使用我的主题和插件的朋友们，我已经对这几个项目进行了升级以支持最新的 Hexo 3 。如果我只在我的机器上安装 Hexo 2.8.3 ，那我接下来维护这几个项目就变得非常不方便。</p>
<p>出于以上的原因，我决定使用 Docker 将 Hexo 2 和 Hexo 3 两套写作环境各自打包成镜像。这样，当我需要编写自己的博客时，就使用 Hexo 2 的镜像；当我需要维护几个 Hexo 主题和插件时，就使用 Hexo 3 的镜像。我也顺便将整个过程记录下来，形成此文，以供其他朋友参考借鉴。<a id="more"></a></p>
<h2 id="安装-docker">安装 Docker</h2>
<p>这里介绍 Mac 用户的安装方法。对于 Mac 用户，要安装 Docker 有两种选择：</p>
<ol>
<li>安装命令行版本的 <a href="https://github.com/boot2docker/" target="_blank" rel="external">Boot2Docker</a> 。这种方式比较适合熟悉命令行操作的用户。</li>
<li>安装图形化版本的 <a href="https://kitematic.com/" target="_blank" rel="external">Kitematic</a> 。Kitematic 提供了一个图形化的界面，比较适合不想折腾太多命令，只想尽快上手的用户。</li>
</ol>
<p>我选择的是 Boot2Docker ，安装方法如下：</p>
<ol>
<li>访问 <a href="https://github.com/boot2docker/osx-installer/releases/latest" target="_blank" rel="external">boot2docker/osx-installer</a> 的发布页面；</li>
<li>在 “Downloads” 区域，点击 <code>Boot2Docker-x.x.x.pkg</code> 下载最新版本的 Boot2Docker ；</li>
<li>双击该安装包安装 Boot2Docker 。</li>
</ol>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>如果由于网速问题无法下载，DaoCloud 提供了镜像包，可以移步到 <a href="http://get.daocloud.io/#install-boot2docker" target="_blank" rel="external">这里</a> 下载。</p>
</div></p>
<p>安装完成后，在 Launchpad 中可以看到两个新图标：</p>
<p><img src="/images/dockerize-your-hexo/new-icons.png" width="400" height="400" title="Boot2Docker安装结果"></p>
<p>与 Linux 上的 Docker 不同，在 Mac 系统中，Boot2Docker 的 Docker Daemon 是在 VirtualBox 虚拟机上跑的。因此在 Boot2Docker 里的 localhost 地址并不是本机的地址，而是虚拟机的地址。后面在介绍访问 Hexo 的 server 时会讲到如何获取虚拟机的地址。</p>
<h2 id="制作和发布镜像">制作和发布镜像</h2>
<p>本节主要讲述如何自己创建打包、构建和发布 Hexo 的 Docker 镜像。如果你只对如何使用打包好镜像感兴趣，可以跳到<a href="#%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F">下一节</a>。</p>
<p>创建一个 Docker 镜像主要有两种方法：</p>
<ol>
<li>第一种方法是直接交互式运行一个现有的镜像，在里头完成所有必要的配置，然后使用 <code>docker commit</code> 命令建成一个新的镜像；</li>
<li>另一种方法是编写 Dockerfile ，然后执行 <code>docker build</code> 命令打包创建出一个新镜像。</li>
</ol>
<h3 id="编写-dockerfile">编写 Dockerfile</h3>
<p>Dockerfile 的编写比较简单，可以参考 <a href="https://docs.docker.com/userguide/dockerimages/" target="_blank" rel="external">Working with Docker Images</a> 和 <a href="https://docs.docker.com/userguide/level1" target="_blank" rel="external">Dockerfile tutorial</a>。Docker 比较有趣的一点是可以像搭积木一样，在 DockerHub 上现有的镜像的基础上做扩展，我所使用的基础镜像是 ubuntu:14.04 ，也可以使用 User Contributed 的 node.js 镜像 <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>例如 <a href="https://registry.hub.docker.com/u/nano/node.js/" target="_blank" rel="external">nano/nodejs</a> 。 </span></span></span> 做扩展，省下安装配置 node.js 的麻烦。</p>
<h4 id="hexo-2-的-dockerfile">Hexo 2 的 Dockerfile</h4>
<p>Hexo 2 主要用于我个人使用，为了方便自己，我把平常写博所用的依赖工具诸如 pandoc 和 yui-compressor 都打包了进来：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># Docker file for Hexo 2</div><div class="line">FROM ubuntu:14.04</div><div class="line">MAINTAINER Joseph Pan <cs.wzpan@gmail.com></cs.wzpan@gmail.com></div><div class="line"># use aliyun's mirror for faster download speed</div><div class="line">RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list</div><div class="line"># add pandoc repository</div><div class="line">RUN sed -i 's/deb mirror.lupaworld.com/ubuntu vivid main universe/g' /etc/apt/sources.list</div><div class="line"># install all dependencies</div><div class="line">RUN apt-get update && \</div><div class="line">  apt-get install -y nodejs curl git-core pandoc yui-compressor && \</div><div class="line">  update-alternatives --install /usr/bin/node node /usr/bin/nodejs 10 && \</div><div class="line">  curl -L https://npmjs.org/install.sh | sh && \</div><div class="line">  apt-get clean && \</div><div class="line">  rm -rf /var/lib/apt/lists/*</div><div class="line"></div><div class="line">ENV HEXO_VERSION 2.8.3</div><div class="line"></div><div class="line"># install hexo</div><div class="line">RUN npm install -g hexo@${HEXO_VERSION}</div><div class="line"></div><div class="line">RUN mkdir /root/blog</div><div class="line">VOLUME /root/blog</div><div class="line">WORKDIR /root/blog</div><div class="line"></div><div class="line">EXPOSE 4000</div></pre></td></tr></table></figure></p>
<p>对于有 shell 基础的朋友，以上的代码应该基本都可以自说明。这里主要讲一下 <code>VOLUME</code> 的作用，顾名思义，<code>VOLUME</code> 用于表明它后面跟着的那个目录将是一个挂载点。当我运行该镜像时，可以通过 <code>-v</code> 参数将本地的博客目录挂载到虚拟机里，从而实现在本地编辑而在虚拟机上渲染。</p>
<h4 id="hexo-3-的-dockerfile">Hexo 3 的 Dockerfile</h4>
<p>由于只是用来维护几个主题和插件项目，Hexo 3 的 Dockerfile 就要简单很多。因为我仍然可能需要维护 <a href="http://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="external">hexo-renderer-pandoc</a> 项目，我也将 pandoc 打包了进来：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># Docker file for Hexo 3</div><div class="line">FROM ubuntu:14.04</div><div class="line">MAINTAINER Joseph Pan <cs.wzpan@gmail.com></cs.wzpan@gmail.com></div><div class="line"># use aliyun's mirror for faster download speed</div><div class="line">RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list</div><div class="line"># add pandoc repository</div><div class="line">RUN sed -i 's/deb mirror.lupaworld.com/ubuntu vivid main universe/g' /etc/apt/sources.list</div><div class="line"># install all dependencies</div><div class="line">RUN apt-get update && \</div><div class="line">  apt-get install -y nodejs curl git-core pandoc && \</div><div class="line">  update-alternatives --install /usr/bin/node node /usr/bin/nodejs 10 && \</div><div class="line">  curl -L https://npmjs.org/install.sh | sh && \</div><div class="line">  apt-get clean && \</div><div class="line">  rm -rf /var/lib/apt/lists/*</div><div class="line"></div><div class="line"># install hexo</div><div class="line">RUN npm install -g hexo-cli</div><div class="line"></div><div class="line">RUN mkdir /root/blog</div><div class="line">VOLUME /root/blog</div><div class="line">WORKDIR /root/blog</div><div class="line"></div><div class="line">EXPOSE 4000</div></pre></td></tr></table></figure></p>
<h3 id="构建镜像">构建镜像</h3>
<p>完成了 Dockerfile 的编写后，可以准备构建镜像了。但由于显而易见的网络原因，国内获取镜像的过程可能很慢。建议切换到 DaoCloud 的镜像<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>DaoCloud 真是业界良心啊！</span></span></span>：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ boot2docker ssh</div><div class="line">$ <span class="built_in">sudo</span> su</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"EXTRA_ARGS=\"--registry-mirror=http://3f0704d3.m.daocloud.io\""</span> &gt;&gt; /var/lib/boot2docker/profile && <span class="keyword">exit</span></div><div class="line">$ <span class="keyword">exit</span></div><div class="line">$ boot2docker restart</div></pre></td></tr></table></figure></p>
<p>注意以上方法只适用于 Mac OS 用户，其他系统的用户请自行查阅 <a href="https://dashboard.daocloud.io/mirror" target="_blank" rel="external">Docker加速器</a> 。</p>
<p>完成后开始构建 Docker 镜像，依旧是在 boot2docker 中敲入如下命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">→ docker build -t wzpan/hexo:v2 <span class="operator">-f</span> ~/hexo/v2</div><div class="line">→ docker build -t wzpan/hexo:v3 <span class="operator">-f</span> ~/hexo/v3</div></pre></td></tr></table></figure></p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>为了便于区分，本文一律使用 <code>$</code> 来表示在 bash 上执行的命令，使用 <code>→</code> 来表示在 boot2docker 上执行的命令。</p>
</div></p>
<p>比较有趣的是 Docker 会对 Dockerfile 里的每一行命令都单独创建一个临时的镜像，以缓存每一步的结果。这样，即使构建过程中由于脚本错误或网络问题各种意外原因导致构建失败，当下一次发起创建时也会自动从上一次构建活动的最后一步成功步骤开始继续下一步的操作。</p>
<h3 id="发布镜像">发布镜像</h3>
<p>发布镜像到 DockerHub 就像推送代码到 Github 那样简单：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">→ docker push wzpan/hexo:v2</div><div class="line">→ docker push wzpan/hexo:v3</div></pre></td></tr></table></figure></p>
<p>如果由于意外原因中断了发布过程，下一次尝试 push 操作可能会提示 <code>push my-repo/my-app is already in progress</code> 错误而无法继续。解决办法是重启一下 boot2docker ：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ boot2docker restart</div></pre></td></tr></table></figure></p>
<h2 id="使用镜像">使用镜像</h2>
<p>完成了镜像的打包发布后，镜像的使用就显得非常简单有趣了。比如，如果要使用 Hexo 2 来渲染我自己的博客，我只需要在 boot2docker 中执行以下命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">→ docker run --rm -p <span class="number">4000</span>:<span class="number">4000</span> -v ~/Documents/hexo-blog:/root/blog wzpan/hexo:v2</div></pre></td></tr></table></figure></p>
<p>其中，<code>--rm</code> 命令用于告诉 docker 当我结束当前的 container 时自动将该 container 删除，<code>-p</code> 命令用于告诉 docker 将虚拟机的 4000 端口映射到本机的 4000 端口。</p>
<p>之后就可以像往常一样使用 Hexo 的命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开启预览服务器</span></div><div class="line">→ hexo server -i <span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line"><span class="comment"># 生成博客</span></div><div class="line">→ hexo generate</div><div class="line"><span class="comment"># 发布博客</span></div><div class="line">→ hexo deploy</div></pre></td></tr></table></figure></p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>上面的 <code>-i 0.0.0.0</code> 不可省略，否则浏览器可能无法正常预览。</p>
</div></p>
<p>如果我需要在 Hexo 3 上维护几个项目，那么只需使用另一条命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">→ docker run --rm -p <span class="number">5000</span>:<span class="number">4000</span> -v ~/Documents/test-blog:/root/blog wzpan/hexo:v3</div></pre></td></tr></table></figure></p>
<p>有意思的是，此时 <code>-p</code> 命令告诉 docker 将虚拟机的 4000 端口映射到本机的 5000 端口。也就是说，通过映射到本地上的不同端口，我可以同时在虚拟机中的不同 container 里运行两个虚拟机端口号均为 4000 的服务！</p>
<p>Hexo 的服务器启动后，我们就可以在本地的浏览器预览页面了。但前面提过，在 Boot2Docker 里的 localhost 地址并不是本机的地址，而是虚拟机的地址。因此我们还需要获取一下虚拟机的地址：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ boot2docker ip</div></pre></td></tr></table></figure></p>
<p>将得到一个 ip 地址，那么就可以通过访问 <code>http://虚拟机地址:映射端口号</code> 来预览站点了。</p>
<p>对于一台新机器，要搭建一个 Hexo 博客写作环境也变得前所未有的简单。我只需安装好 docker ，clone 下我的博客仓库，然后使用如下一条命令下载安装所需版本的镜像：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">→ docker pull wzpan/hexo:v2</div></pre></td></tr></table></figure></p>
<p>博客的写作环境就妥妥儿的搭好了！</p>
<p>忍不住唱起歌来——</p>
<p><blockquote>

<p>让我们 Docker 作伴，
活的潇潇洒洒。
Emacs 奔腾，
共享 Github 代码。
HHKB，
敲出 Hacker 喜悦。
轰轰烈烈，
把握 Coding 年华。
……</p>


<footer><strong>《Duang》</strong></footer></blockquote>
</p>
<h2 id="后话">后话</h2>
<p>使用 Docker 来打包我的 Hexo 环境，不仅使我可以很方便的在不同版本的 Hexo 之间来回切换，也省去了我每换一台机就要重新配置写作环境的痛苦。目前已知的不足是服务器的更新明显比本地环境慢 <span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>这个问题在 Linux 环境中并不存在，猜测是 Mac 的 boot2docker 的虚拟化机制的问题。 </span></span></span> ，有时博客已经写了好长一大段话，浏览器怎么刷新都没有显示最新的内容。这时就只能重启下 Hexo 了。但总体而言，使用 Docker 的方式还是非常清爽的，今后我也会积极采用这种方式。人生苦短，我用 Docker 。</p>
]]></content>
    <category scheme="http://hahack.com/tags/Hexo/" term="Hexo"/>
    <category scheme="http://hahack.com/tags/Docker/" term="Docker"/>
    <category scheme="http://hahack.com/categories/tools/" term="tools"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Speed Up the Rendering Process of hexo 3]]></title>
    <link href="http://hahack.com/codes/hexo-3-speed-up/"/>
    <id>http://hahack.com/codes/hexo-3-speed-up/</id>
    <published>2015-06-01T14:49:46.000Z</published>
    <updated>2017-02-11T04:41:08.103Z</updated>
    <content type="html"><![CDATA[<p>Hexo 3 自从放出更新到现在已经有很长一段时间了，相信很多人跟我一样都经历了一个非常曲折的升级过程。</p>
<p>第一个问题是我所编写的主题和插件全都阵亡了，这个问题在我决定升级 Hexo 之前已经被很多用户轰炸过，于是我花了两个晚上的时间对所有的主题和插件进行了大幅修改和升级。</p>
<p>另一个让我无比郁闷的问题是：官方虽然宣称 3.0 之后站点渲染速度更快了，但实际测试时我发现结果正好相反——全站 168 篇文章，在 Hexo 2.8.3 环境中渲染只需 3~4 秒时间，而更新到 Hexo 3.0 之后，网站的渲染居然花了一个多钟！</p>
<p>为了找出导致这个问题的 bottleneck ，我通过二分的手段很快定位出了问题文章 《<a href="/codes/opengl-on-archlinux/">ArchLinux安装配置OpenGL</a>》，这篇文章乍一看没啥特别之处，但问题就出在文中这段长长的目录结构图： <a id="more"></a></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">oglsuperbible5-read-only/    # OpenGL SuperBible 5th Edition 代码包</div><div class="line">|                                            </div><div class="line">+--  freeglut-2.6.0/         # freeglut 安装包                   </div><div class="line">|                                                               </div><div class="line">+--  Linux/                  # Linux Makefile 工程文件</div><div class="line">|     |                                               </div><div class="line">|     +----  Chap01/                                  </div><div class="line">|     |        |                                      </div><div class="line">|     |        +---- Block/                           </div><div class="line">|     |                |                              </div><div class="line">|     |                +---- Makefile # Block 程序的Makefile</div><div class="line">|     |                                                     </div><div class="line">|     +----  ...                                            </div><div class="line">|     |                                                     </div><div class="line">|                                                           </div><div class="line">+--  Src/                   # 源代码         </div><div class="line">|     |                                                     </div><div class="line">|     +----  Chap01/                                        </div><div class="line">|     |        |                                            </div><div class="line">|     |        +---- Block/                                 </div><div class="line">|     |                |                                    </div><div class="line">|     |                +---- Block.cpp # Block 程序源文件</div><div class="line">|     |                                                  </div><div class="line">|     +----  ...                                         </div><div class="line">|     |                                                  </div><div class="line">|     |                                                  </div><div class="line">|     +----  GLTools/      # GLTools工具包               </div><div class="line">|     |        |                                         </div><div class="line">|     |        +---- include/  # 头文件                  </div><div class="line">|     |        |      |                                  </div><div class="line">|     |        |      +----  GL/                         </div><div class="line">|     |        |      |                                  </div><div class="line">|     |        |      +----  GLTools.h # GLTools头文件   </div><div class="line">|     |        |      |                                  </div><div class="line">|     |        |      +----  math3d.h  # 矩阵类头文件    </div><div class="line">|     |        |      |                                  </div><div class="line">|     |        |      +----  ...                         </div><div class="line">|     |        |                                         </div><div class="line">|     |        +---- src/     # 源文件                   </div><div class="line">|     |               |                                  </div><div class="line">|     |               +---- GLTools.cpp # GLTools头文件  </div><div class="line">|     |               |                                </div><div class="line">|     |               +---- math3d.cpp  # 矩阵类源文件</div><div class="line">|     |               |                               </div><div class="line">|     |               +---- ...                       </div><div class="line">|     |                                               </div><div class="line">|     +----  Models/                                  </div><div class="line">|     |                                               </div><div class="line">|     +----  OpenEXR/                                 </div><div class="line">|                                                     </div><div class="line">+--  VisualStudio2008/    # VisualStudio 2008 工程文件</div><div class="line">|                                                     </div><div class="line">+--  VisualStudio2010/    # VisualStudio 2010 工程文件</div><div class="line">|                                                     </div><div class="line">+--  XCode/               # XCode 工程文件</div></pre></td></tr></table></figure></p>
<p>对于这类语言无关的文本，我通常的做法是使用一对 <code>'''</code>  包含，并且不带任何语言的说明。这种做法在 Hexo 2.x 中并没有问题，因为 Hexo 2 自带的语法高亮插件 highlight.js 在遇到没有语言说明的代码时是统一当成纯文本（plain）来解析的。而到了 Hexo 3 ，这样的内容就会使得 Hexo 3 的渲染变得奇慢无比。这是因为 Hexo 3 中的 highlight.js 会试图分析这段内容可能属于那种语言，内容越长，分析时间就越长。</p>
<p>解决办法就是在第一个 <code>'''</code> 之后加上 <code>plain</code> 说明符，向 highlight.js 显式表明这是一段纯文本，那么当 highlight.js 解析到这段文本时，就会直接放弃语言类型的分析，从而大幅减少渲染时间。</p>
<p>考虑到我的博客中有很多这样的代码，我写了个脚本 <a href="https://gist.github.com/wzpan/7db9b0888f06a8d6ff8c" target="_blank" rel="external">speedup.py</a> ，帮我在没有语言说明符的代码段后面加上 <code>plain</code> 说明符：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python2</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">SYNOPSIS:</div><div class="line">$ python speedup.py -f FILE</div><div class="line">or</div><div class="line">$ python speedup.py -d DIR</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys, os, getopt</div><div class="line"> </div><div class="line">TARGET_TYPE = [<span class="string">".md"</span>, <span class="string">".markdown"</span>]</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_file</span><span class="params">(path)</span>:</span></div><div class="line">    <span class="string">''' Process a file. '''</span></div><div class="line">    line = <span class="string">""</span></div><div class="line">    quote_flag = <span class="keyword">False</span></div><div class="line">    line_list = []</div><div class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f:       </div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            line = f.readline()</div><div class="line">            <span class="keyword">if</span> line == <span class="string">""</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> line.startswith(<span class="string">"```"</span>):</div><div class="line">                quote_flag = <span class="keyword">not</span> quote_flag</div><div class="line">            <span class="keyword">if</span> line.strip()==<span class="string">"```"</span> <span class="keyword">and</span> quote_flag:</div><div class="line">                line = <span class="string">"\`\`\` plain\r\n"</span></div><div class="line">            line_list.append(line)</div><div class="line">    <span class="keyword">with</span> open(path, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.writelines(line_list)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_dir</span><span class="params">(path)</span>:</span></div><div class="line">    <span class="string">''' Process a directory. '''</span></div><div class="line">    file_list = []</div><div class="line">    files = os.listdir(path)</div><div class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</div><div class="line">        file = os.path.join(path, file)</div><div class="line">        root, ext = os.path.splitext(os.path.basename(file))</div><div class="line">        <span class="keyword">if</span> os.path.isfile(file) <span class="keyword">and</span> ext <span class="keyword">in</span> TARGET_TYPE:</div><div class="line">            process_file(file)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Arguments should be at least 2."</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"python speedup.py -f [FILE]"</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"python speedup.py -d [DIRECTORY]"</span></div><div class="line">        exit(<span class="number">1</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">"f:d:"</span>, [<span class="string">"file="</span>, <span class="string">"directory="</span>])</div><div class="line">        <span class="keyword">for</span> arg, value <span class="keyword">in</span> opts:</div><div class="line">            <span class="keyword">if</span> arg <span class="keyword">in</span> (<span class="string">'-f'</span>, <span class="string">'--file'</span>):</div><div class="line">                root, ext = os.path.basename(value)</div><div class="line">                <span class="keyword">if</span> ext <span class="keyword">in</span> <span class="string">'TARGET_TYPE'</span>:</div><div class="line">                    process_file(value)</div><div class="line">            <span class="keyword">elif</span> arg <span class="keyword">in</span> (<span class="string">'-d'</span>, <span class="string">'--directory'</span>):</div><div class="line">                process_dir(value)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">"Argument error. %s"</span> % arg</div><div class="line">                exit(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> getopt.GetoptError <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> e</div><div class="line">        exit(<span class="number">1</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>使用方法很简单：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python speedup.py <span class="operator">-f</span> FILE  <span class="comment"># 优化单个 markdown 文件</span></div><div class="line">$ python speedup.py <span class="operator">-d</span> DIR   <span class="comment"># 优化一个目录下的所有 markdown 文件</span></div></pre></td></tr></table></figure></p>
]]></content>
    <category scheme="http://hahack.com/tags/Hexo/" term="Hexo"/>
    <category scheme="http://hahack.com/tags/Python/" term="Python"/>
    <category scheme="http://hahack.com/tags/highlight/" term="highlight"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Extempore: A Real-time Programming Language for Real-time Systems]]></title>
    <link href="http://hahack.com/codes/extempore-intro/"/>
    <id>http://hahack.com/codes/extempore-intro/</id>
    <published>2015-02-16T07:35:58.000Z</published>
    <updated>2017-02-11T04:41:08.099Z</updated>
    <content type="html"><![CDATA[<p>Extempore 是一套实时编程语言和运行环境，它提供了一个机体编程 (<a href="http://dl.acm.org/citation.cfm?id=1869526" target="_blank" rel="external">Cyberphysical Programming</a>)<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 环境，以支持对多媒体和实时系统的实时编程（Live Coding）。所谓机体编程，就是允许编程者可以在任意时刻自由地修改程序并即时影响系统的运作，达到“即写即执行”。官方的介绍如下：</p>
<p><blockquote>

<p>Extempore is a programming language and runtime environment designed to support ‘cyberphysical programming’. Cyberphysical programming supports the notion of a human programmer operating as an active agent in a real-time distributed network of environmentally aware systems. The programmer interacts with the distributed real-time system procedurally by modifying code on-the-fly.</p>


</blockquote>
</p>
<p>Extempore 的前身是 <a href="http://impromptu.moso.com.au/index.html" target="_blank" rel="external">Impromptu</a> ，由 <a href="http://www.moso.com.au/index.html" target="_blank" rel="external">MOSO</a> 公司的创始人 Andrew Sorensen 所设计和开发，并托管在 <a href="https://github.com/digego/extempore" target="_blank" rel="external">Github</a> 上。<a id="more"></a>在进一步介绍它之前，先看看 Andrew Sorensen 在 OSCON 2014 上的演示吧：</p>
<iframe src="http://www.tudou.com/programs/view/html5embed.action?type=0&code=2o_ChSqo984&lcode=&resourceId=0_06_05_99" allowtransparency="true" allowfullscreen="true" scrolling="no" border="0" frameborder="0" style="width:100%;height:400px;"></iframe>
<p>是不是很酷 <code>^_^</code> ？Andrew Sorensen 以计算机仿真音乐作为例子演示了机体编程的用途：通过任意时刻的人机交互，来实现对目标实时系统的控制。这个实时系统和实际的环境配置有关（Environment-aware）——既可以是一个实时虚拟交响乐系统，也可以是一个<a href="http://vimeo.com/37293927" target="_blank" rel="external">实时图形系统</a>、<a href="https://vimeo.com/52964510" target="_blank" rel="external">实时物理模拟系统</a>等等。从构造上看，这类系统有个共同点，就是通常是由分布式的网络环境构成。Extempore 还具有非常强烈的时序和并发概念，可以很好地应用在时序非常重要的场合（比如音频和视频）。</p>
<h2 id="安装配置-extempore">安装配置 Extempore</h2>
<p>本节介绍 Extempore 的安装配置。我使用的环境是 OSX + Emacs，可以使用 <a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a> 安装 extempore：</p>
<h3 id="安装-extempore">安装 Extempore</h3>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew tap benswift/extempore</div><div class="line">$ brew install extempore</div></pre></td></tr></table></figure></p>
<p>安装完成后，可以试着执行以下 Extempore 进程（服务器）：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/local/Cellar/extempore/X.XX/  <span class="comment"># X.XX 需要替换成实际安装的版本号</span></div><div class="line">$ ./extempore</div></pre></td></tr></table></figure></p>
<p>如果你看到下面的界面，说明安装成功：</p>
<p><img src="/images/extempore-intro/run.png" alt=""></p>
<p>可以通过执行 <code>./extempore --help</code> 来了解更多的启动选项。</p>
<p>到这里读者应该就可以大致明白 Extempore 的运行方式了：首先启动一个或多个服务器，这些服务器将侦听各自的端口。之后，我们可以通过编辑器或者其他界面与这些服务器实时互动，比如将代码发送给某一个服务器让其立即执行。这也是大部分支持 REPL （read-eval-print-loop）的编程语言的特点，比如 Common Lisp/Scheme/Python/Ruby/Matlab 。</p>
<p>后面会介绍如何在 Emacs 下启用 Extempore 服务器，所以我们可以先 <code>C-c C-c</code> 结束掉这个进程。</p>
<h3 id="安装-emacs-插件">安装 Emacs 插件</h3>
<p>extempore 的安装路径里头已经包含了相应的 Emacs 插件，只需要将以下几行添加到你的 Emacs 配置文件中：</p>
<p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">autoload</span> <span class="quoted">'extempore-mode</span> <span class="string">"/path/to/extempore/extras/extempore.el"</span> <span class="string">""</span> <span class="literal">t</span>)</span></div><div class="line"><span class="list">(<span class="title">add-to-list</span> <span class="quoted">'auto-mode-alist</span> <span class="quoted">'(<span class="string">"\\.xtm$"</span> . extempore-mode)</span>)</span></div><div class="line"><span class="list">(<span class="title">setq</span> user-extempore-directory <span class="string">"/path/to/extempore/"</span>)</span></div></pre></td></tr></table></figure></p>
<p>注意将第一行的路径改为插件实际所在位置。</p>
<p>完成后使用 <code>eval-region</code> 执行这几行指令，或者重启 Emacs ，使配置生效。自此插件就安装完成。当我们打开 .xtm 文件时，major mode就会变成 Extempore-mode 。但此时 Extempore 的进程服务器还没有启动，编辑器也还没有和服务器建立连接。因此我们可以执行以下几步：</p>
<ol>
<li><code>M-x Extempore-run</code> 或者 <code>M-x switch-to-Extempore</code> 启动一个 Extempore 服务器，记住服务器的端口号（如果已经有 Extempore 服务器在运行，并且我们希望连接它，则可以跳过这一步）。</li>
<li><code>M-x Extempore-connect</code> 让 Emacs 连接一个 Extempore 服务器。记住，每个 .xtm 文件的 buffer 都需要完成至少一次连接。</li>
</ol>
<h2 id="extempore-设计哲学">Extempore 设计哲学</h2>
<p>在介绍 Extempore 的语法前，先了解下它的设计哲学是很有必要的。Extempore 的设计是为了同时实现两个目标：动态灵活性，及尽可能接近 C 语言的速度。为了同时达到这两个目标，Extempore 首先保证了对 Scheme 语言的支持，然后在保留 Scheme 的语法风格的基础上，加入了类 C 语言的强类型的支持，设计出了 xtlang 语言 。一个 Extempore 进程既可以解释弱类型的 Scheme ，也可以编译强类型定义的 xtlang 。Scheme 的对象（列表、闭包、continuation 等）可以和 xtlang 的<a href="http://benswift.me/2012-08-09-xtlang-type-reference.html" target="_blank" rel="external">类型</a>和<a href="%E6%8C%87%E9%92%88">http://benswift.me/2012-08-13-understanding-pointers-in-xtlang.html</a>共存，且借助于一些“辅助函数”，数据可以在两种语言间自由传输。在实现上，Extempore 使用 LLVM 作为编译器后端。在处理 xtlang 时，先将代码编译成 LLVM 指令，再进一步交由 LLVM 编译和链接。</p>
<p>可以被 Extempore 处理的 Scheme 和 xtlang 语言的示例如下：</p>
<p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">define</span> scheme-closure</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">a</span> b)</span></span></div><div class="line">    <span class="list">(<span class="title">let</span> <span class="list">(<span class="list">(<span class="title">result</span> <span class="list">(<span class="title">*</span> a b)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">print</span> <span class="string">"result = "</span> result)</span></div><div class="line">      result)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">scheme-closure</span> <span class="number">4</span> <span class="number">5</span>)</span> <span class="comment">;; prints "result = 20", returns 20</span></div><div class="line"><span class="list">(<span class="title">scheme-closure</span> <span class="number">2.4</span> <span class="number">2</span>)</span> <span class="comment">;; prints "result = 4.8", returns 4.8</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">bind-func</span> xtlang_closure</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">c</span><span class="keyword">:double</span> d<span class="keyword">:i64</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">let</span> <span class="list">(<span class="list">(<span class="title">result</span> <span class="list">(<span class="title">*</span> c <span class="list">(<span class="title">i64tod</span> d)</span>)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">printf</span> <span class="string">"result = %f\n"</span> result)</span></div><div class="line">      result)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">xtlang_closure</span> <span class="number">4.5</span> <span class="number">2</span>)</span> <span class="comment">;; prints "result = 9.000000", returns 9.0</span></div></pre></td></tr></table></figure></p>
<p>本文并不打算介绍过多 Scheme 的语法，建议读者自己阅读 Lisp 相关的语法教程入门。例如 [TSPL](<a href="http://www.scheme.com/tspl3/" target="_blank" rel="external">Scheme 教程</a>)。</p>
<h2 id="xtlang-的基本类型">xtlang 的基本类型</h2>
<p><img src="/images/extempore-intro/type-key.png" alt="xtlang基本类型一览"></p>
<h3 id="整型">整型</h3>
<ul>
<li>i1 (boolean)</li>
<li>i8 (char)</li>
<li>i32</li>
<li>i64 (default)</li>
</ul>
<h3 id="浮点型">浮点型</h3>
<ul>
<li>float (32 bit)</li>
<li>double (64 bit, default)</li>
</ul>
<h3 id="指针">指针</h3>
<p>例如：</p>
<ul>
<li>double* ：a pointer to a double</li>
<li>i64**: a pointer to a pointer to a 64-bit integer</li>
</ul>
<p>xtlang 的指针与 C 语言的指针非常类似（你可以通过 <code>%p</code> 来 <code>printf</code> 它们）。对 Extempore 的指针更深入的介绍可以参考<a href="http://benswift.me/2012-08-13-understanding-pointers-in-xtlang.html" target="_blank" rel="external">这篇文章</a>。</p>
<h4 id="空间分配">空间分配</h4>
<p>要分配一块空间并让一个指针指向它，Extempore 提供了三种 alloc 函数：salloc、halloc 和 zalloc 。它们用用来分配一块内存空间，并返回一个指针类型，但它们的区别在于空间的分配方式，这将决定不同的占用时间。salloc 是在栈分配空间的（短期），zalloc 则在当前的区域分配空间，而 halloc 则在堆分配空间（长期）。alloc 是 zalloc 的别名。更多关于三种函数的探讨可以参考<a href="http://benswift.me/2012-08-17-memory-management-in-extempore.html" target="_blank" rel="external">这篇文章</a>。zalloc 的一个示例：</p>
<p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-func</span> ptr_test</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span></span></div><div class="line">    <span class="list">(<span class="title">let</span> <span class="list">(<span class="list">(<span class="title">a</span><span class="keyword">:double*</span> <span class="list">(<span class="title">zalloc</span>)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">printf</span> <span class="string">"address = %p\n"</span> a)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">ptr_test</span>)</span> <span class="comment">;; prints "address = 0x1163bc030"</span></div></pre></td></tr></table></figure></p>
<p>在这个例子中，<code>eptr_test</code> 实现将一个指针绑定到一个 double 型变量 a ，并将该指针指向的地址打印出来。</p>
<h4 id="解引用">解引用</h4>
<p>与在 C 语言不同，<code>*</code> 并非解引用操作符。xtlang 使用一个函数 <code>pref</code> 来实现指针的解引用。<code>pref</code> 需要两个参数：指针名和一个（整型）偏移量。如果 a 是一个指向内存中的一块 10 个 double 值的指针，那么 <code>(pref a 2)</code> 就是第三个 double 值（相当于 C 语言中的 a[2]）。</p>
<h4 id="指针赋值">指针赋值</h4>
<p>要为指针指向的空间赋值，可以使用 <code>pset!</code> ，它接受三个参数：指针名、偏移量、要赋的值。示例：</p>
<p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-func</span> ptr_test<span class="number">2</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span></span></div><div class="line">    <span class="list">(<span class="title">let</span> <span class="list">(<span class="list">(<span class="title">a</span><span class="keyword">:double*</span> <span class="list">(<span class="title">zalloc</span>)</span>)</span>)</span> <span class="comment">; allocate some memory for a double, bind</span></span></div><div class="line">                                        <span class="comment">; the pointer to the symbol a</span></div><div class="line">      <span class="list">(<span class="title">pset!</span> a <span class="number">0</span> <span class="number">2.4</span>)</span>          <span class="comment">; set the value at index 0 (of a) to 2.4</span></div><div class="line">      <span class="list">(<span class="title">pref</span> a <span class="number">0</span>)</span>)))            <span class="comment">; read the value at index 0 of a</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">ptr_test2</span>)</span> <span class="comment">;; returns 2.400000</span></div></pre></td></tr></table></figure></p>
<p>如果要一次性为一个指针指向的一组空间赋值，可以使用 <code>pfill!</code> 。示例：</p>
<p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-func</span> ptr_test<span class="number">3</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span></span></div><div class="line">    <span class="list">(<span class="title">let</span> <span class="list">(<span class="list">(<span class="title">a</span><span class="keyword">:double*</span> <span class="list">(<span class="title">zalloc</span> <span class="number">4</span>)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">pfill!</span> a <span class="number">1.2</span> <span class="number">3.4</span> <span class="number">4.2</span> <span class="number">1.1</span>)</span> <span class="comment">; fill the pointer a with values</span></div><div class="line">      <span class="list">(<span class="title">pref</span> a <span class="number">2</span>)</span>)))              <span class="comment">; read the value at index 2 of a</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">ptr_test3</span>)</span> <span class="comment">;; returns 4.200000</span></div></pre></td></tr></table></figure></p>
<p>上例的 <code>pfill!</code> 相当于连续使用 <code>pset!</code> 四次，要要求值和空间精确对应。一个更有用的方法是使用循环：</p>
<p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-func</span> ptr_test<span class="number">4</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span></span></div><div class="line">    <span class="list">(<span class="title">let</span> <span class="list">(<span class="list">(<span class="title">a</span><span class="keyword">:double*</span> <span class="list">(<span class="title">zalloc</span> <span class="number">10</span>)</span>)</span></span></span></div><div class="line">          <span class="list">(<span class="title">i</span><span class="keyword">:i64</span> <span class="number">0</span>)</span>)</div><div class="line">      <span class="list">(<span class="title">dotimes</span> <span class="list">(<span class="title">i</span> <span class="number">0</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">pset!</span> a i <span class="list">(<span class="title">i64tod</span> i)</span>)</span>)</div><div class="line">     <span class="list">(<span class="title">pref</span> a <span class="number">6</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">ptr_test4</span>)</span> <span class="comment">;; returns 5.000000</span></div></pre></td></tr></table></figure></p>
<p>还有一个有用的使用指针的函数：<code>pref-ptr</code>。例如， <code>(pref a 3)</code> 返回的是 a 指针指向的空间的第 4 个元素的值，而 <code>(pref-ptr a 3)</code> 返回指向该值的指针。这也意味着 <code>(pref (pref-ptr a n))</code> 与 <code>(pref (pref-ptr a 0) n)</code> 等效（n 可以为任意整数）。</p>
<h3 id="复合类型">复合类型</h3>
<ul>
<li>元组 Tuples 。使用 <code>&lt;...&gt;</code> 声明。例如 <code>&lt;double,i32&gt;*</code> 是一个指向包含 2 个元素的元组的指针。第一个元素是一个 double 而第二个元素是一个 i32 值。</li>
<li>数组 Arrays 。使用 <code>|...|</code> 声明。例如 <code>|4,double|*</code> 是一个指向包含 4 个 double 的数组的指针。</li>
<li>向量 Vector。使用 <code>/.../</code> 声明。例如 <code>/4,float/*</code> 是一个指向 4 个 float 的向量的指针。</li>
</ul>
<p>这些类型的解引用等操作与指针的对应操作非常类似，名字也大同小异。例如，元组的解引用、赋值等操作以 <code>t</code> 开头，分别为 <code>tref</code> 、<code>tset!</code> 、<code>tfill!</code> 、<code>tref-ptr</code> 。Array 以 <code>a</code> 开头， Vector 以 <code>v</code> 开头。</p>
<h3 id="闭包类型">闭包类型</h3>
<p>闭包类型使用 <code>[...]</code> 声明，括号里头的第一个元素表示返回值类型，其他元素则是函数参数类型。例如 <code>[i64,double,double]*</code> 是一个指向一个有两个 double 参数，返回值类型为 i64 的闭包的指针。</p>
<p>在 xtlang 中，创建一个闭包可以使用 <code>lambda</code>（匿名函数） 或 <code>bind-func</code>（有名函数）。例如：</p>
<p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-func</span> xt_add</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">a</span><span class="keyword">:i64</span> b<span class="keyword">:i64</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">+</span> a b)</span>))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">xt_add</span> <span class="number">3</span> <span class="number">6</span>)</span> <span class="comment">;; returns 9</span></div></pre></td></tr></table></figure></p>
<h2 id="extempore-实时音乐编程">Extempore 实时音乐编程</h2>
<p>Extempore 最为人所知的应用莫过于用来编写音乐。Extempore 既可以编写较为底层的 DSP，也可以编写较为高级的（基于音名的）音频。</p>
<h3 id="简单-dsp-函数">简单 dsp 函数</h3>
<p>Extempore 提供了一个特殊的函数 <code>dsp</code> ，该函数返回的值将直接输出给音频驱动器，从而实现声音的输出。例如：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-val</span> STWOPI SAMPLE <span class="number">6.2831853071795864769252867665590057683943387987502116419498</span>)</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span><span class="keyword">:SAMPLE</span> time<span class="keyword">:i64</span> chan<span class="keyword">:i64</span> data<span class="keyword">:SAMPLE*</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">sin</span> <span class="list">(<span class="title">/</span> <span class="list">(<span class="title">*</span> STWOPI <span class="number">440.0</span> <span class="list">(<span class="title">convert</span> time SAMPLE)</span>)</span></span></span></div><div class="line">          <span class="number">44100.0</span>))))</div><div class="line"></div><div class="line"><span class="comment">; to let Extempore know that this function is the one </span></div><div class="line"><span class="comment">; it should call to get the output audio samples</span></div><div class="line"><span class="list">(<span class="title">dsp</span><span class="keyword">:set!</span> dsp)</span></div></pre></td></tr></table></figure></p>
<p><code>dsp</code> 函数接受以下几个参数：</p>
<ul>
<li>in：输入音频采样，例如麦克风。</li>
<li>time：一个 i64 值，表示时间。</li>
<li>chan：另一个 i64 值，表示声道序号（0 表示左，1 表示右，以此类推）。Extempore 支持处理任意声道。</li>
<li>data：一个指向 SAMPLE 类型（默认为 float）的数据的指针，也可以用来传递其他数据给 <code>dsp</code> 函数。</li>
</ul>
<p>默认情况下，SAMPLE 的类型是 <code>float</code> ，定义如下：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">bind</span>-alias <span class="type">SAMPLE</span> <span class="type">float</span>)</div></pre></td></tr></table></figure></p>
<p>它也可以设为 double ，具体见<a href="http://benswift.me/2013-11-15-changing-from-doubles-to-floats-in-audio_dsp.html" target="_blank" rel="external">这篇文章</a>。</p>
<h3 id="编写振荡器">编写振荡器</h3>
<p>一个简单的振荡器 <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>振荡器（英文：oscillator）是用来产生重复电子讯号（通常是正弦波或方波）的电子元件。</span></span></span> ：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-func</span> osc_c <span class="comment">; osc_c is the same as last time</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">phase</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">amp</span> freq)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title"><span class="built_in">inc</span></span><span class="attribute">:SAMPLE</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 3.141592</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 2.0</span> <span class="list">(<span class="title"><span class="built_in">/</span></span> freq<span class="number"> 44100.0</span>)</span>)</span>)</span>)</span>)</span></span></div><div class="line">        <span class="list">(<span class="title"><span class="built_in">set!</span></span> phase <span class="list">(<span class="title"><span class="built_in">+</span></span> phase inc)</span>)</span></div><div class="line">        <span class="list">(<span class="title"><span class="built_in">*</span></span> amp <span class="list">(<span class="title">sin</span> phase)</span>)</span>))))</div></pre></td></tr></table></figure></p>
<p><code>osc_c</code> 函数接受一个参数相位 <code>phase</code>，该函数并不返回一个基本类型的值，而是返回一个指向另一个闭包的指针，该闭包就是一个“振荡器”，参数为幅度值 <code>amp</code> 和频率 <code>freq</code> 。这种写法在 xtlang 中非常常见，为了方便标识，我们习惯性将一个返回另一个闭包的闭包的名字加上 <code>_c</code> 后缀<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p>
<p>我们可以使用 <code>osc_c</code> 函数创建任意数量的振荡器：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">; remember that the dsp closure is called for every sample</span></div><div class="line"><span class="comment">; also, for convenience, let's make a type signature for the</span></div><div class="line"><span class="comment">; DSP closure</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">bind-alias</span> DSP <span class="collection">[SAMPLE,SAMPLE,i64,i64,SAMPLE*]</span>*)</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="attribute">:DSP</span> <span class="comment">; note the use of the type signature 'DSP'</span></span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">osc1</span> <span class="list">(<span class="title">osc_c</span><span class="number"> 0.0</span>)</span>)</span></span></span></div><div class="line">        <span class="list">(<span class="title">osc2</span> <span class="list">(<span class="title">osc_c</span><span class="number"> 0.0</span>)</span>)</span></div><div class="line">        <span class="list">(<span class="title">osc3</span> <span class="list">(<span class="title">osc_c</span><span class="number"> 0.0</span>)</span>)</span>)</div><div class="line">    <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time channel data)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="title"><span class="built_in">=</span></span> channel<span class="number"> 1</span>)</span> </span></span></div><div class="line">             <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="title">osc1</span><span class="number"> 0.5</span><span class="number"> 220.0</span>)</span></span></div><div class="line">                <span class="list">(<span class="title">osc2</span><span class="number"> 0.5</span><span class="number"> 350.0</span>)</span>))</div><div class="line">            <span class="list">(<span class="list">(<span class="title"><span class="built_in">=</span></span> channel<span class="number"> 0</span>)</span></span></div><div class="line">             <span class="list">(<span class="title">osc3</span><span class="number"> 0.5</span><span class="number"> 210.0</span>)</span>)</div><div class="line">            <span class="list">(<span class="title">else</span><span class="number"> 0.0</span>)</span>))))</div></pre></td></tr></table></figure></p>
<p>振荡器闭包中的 phase 变量用来维护 osc1 或 osc2 的调用状态。每当闭包被调用，phase 就会递增（见上面 osc_c 的定义）。每个 osc 的 phase 变量是彼此独立的，从而每个 osc_c 创建的振荡器是彼此独立的。</p>
<p>借助元组，上面的代码可以写成更简洁的形式：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-alias</span> osc_t <span class="collection">[SAMPLE,SAMPLE,SAMPLE]</span>*)</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="attribute">:DSP</span></span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">osc_tuple</span><span class="attribute">:&lt;osc_t</span>,osc_t,osc_t&gt;* <span class="list">(<span class="title">alloc</span>)</span>)</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">tfill!</span> osc_tuple <span class="list">(<span class="title">osc_c</span><span class="number"> 0.0</span>)</span> <span class="list">(<span class="title">osc_c</span><span class="number"> 0.0</span>)</span> <span class="list">(<span class="title">osc_c</span><span class="number"> 0.0</span>)</span>)</span></div><div class="line">    <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time channel data)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="title"><span class="built_in">=</span></span> channel<span class="number"> 1</span>)</span> </span></span></div><div class="line">             <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="list">(<span class="title">tref</span> osc_tuple<span class="number"> 0</span>)</span><span class="number"> 0.5</span><span class="number"> 220.0</span>)</span></span></div><div class="line">                <span class="list">(<span class="list">(<span class="title">tref</span> osc_tuple<span class="number"> 1</span>)</span><span class="number"> 0.5</span><span class="number"> 350.0</span>)</span>))</div><div class="line">            <span class="list">(<span class="list">(<span class="title"><span class="built_in">=</span></span> channel<span class="number"> 0</span>)</span></span></div><div class="line">             <span class="list">(<span class="list">(<span class="title">tref</span> osc_tuple<span class="number"> 2</span>)</span><span class="number"> 0.5</span><span class="number"> 210.0</span>)</span>)</div><div class="line">            <span class="list">(<span class="title">else</span><span class="number"> 0.0</span>)</span>))))</div></pre></td></tr></table></figure></p>
<p>下面是一个更复杂的例子，使用数组存放每个振荡器的参数信息，生成 30 个白噪声振荡器。前 15 个振荡器放在左声道输出，后 15 个振荡器放在右声道输出：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="attribute">:DSP</span></span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">osc_array</span>:|30,<span class="collection">[SAMPLE,SAMPLE,SAMPLE]</span>*|* <span class="list">(<span class="title">alloc</span>)</span>)</span></span></span></div><div class="line">        <span class="list">(<span class="title">amp_array</span>:|30,SAMPLE|* <span class="list">(<span class="title">alloc</span>)</span>)</span></div><div class="line">        <span class="list">(<span class="title">freq_array</span>:|30,SAMPLE|* <span class="list">(<span class="title">alloc</span>)</span>)</span></div><div class="line">        <span class="list">(<span class="title">i</span><span class="number"> 0</span>)</span>)</div><div class="line">    <span class="comment">; initialise the arrays</span></div><div class="line">    <span class="list">(<span class="title"><span class="built_in">dotimes</span></span> <span class="list">(<span class="title">i</span><span class="number"> 30</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">aset!</span> osc_array i <span class="list">(<span class="title">osc_c</span><span class="number"> 0.0</span>)</span>)</span></div><div class="line">      <span class="list">(<span class="title">aset!</span> amp_array i <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 0.2</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 0.2</span> <span class="list">(<span class="title">random</span>)</span>)</span>)</span>)</span></div><div class="line">      <span class="list">(<span class="title">aset!</span> freq_array i <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 110.0</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 1000.0</span> <span class="list">(<span class="title">random</span>)</span>)</span>)</span>)</span>)</div><div class="line">    <span class="comment">; this is the dsp closure</span></div><div class="line">    <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time chan data)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="title"><span class="built_in">=</span></span> chan<span class="number"> 0</span>)</span> <span class="comment">; left channel</span></span></span></div><div class="line">             <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">suml</span><span class="number"> 0.0</span>)</span>)</span></span></div><div class="line">               <span class="list">(<span class="title"><span class="built_in">dotimes</span></span> <span class="list">(<span class="title">i</span><span class="number"> 15</span>)</span> <span class="comment">; sum over the first 15 oscs</span></span></div><div class="line">                 <span class="list">(<span class="title"><span class="built_in">set!</span></span> suml <span class="list">(<span class="title"><span class="built_in">+</span></span> suml <span class="list">(<span class="list">(<span class="title">aref</span> osc_array i)</span></span></span></span></div><div class="line">                                     <span class="list">(<span class="title">aref</span> amp_array i)</span></div><div class="line">                                     <span class="list">(<span class="title">aref</span> freq_array i)</span>))))</div><div class="line">               <span class="list">(<span class="title"><span class="built_in">/</span></span> suml<span class="number"> 15.0</span>)</span>)) <span class="comment">; normalise over all oscs</span></div><div class="line">            <span class="list">(<span class="list">(<span class="title"><span class="built_in">=</span></span> chan<span class="number"> 1</span>)</span> <span class="comment">; left channel</span></span></div><div class="line">             <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">sumr</span><span class="number"> 0.0</span>)</span>)</span></span></div><div class="line">               <span class="list">(<span class="title"><span class="built_in">dotimes</span></span> <span class="list">(<span class="title">i</span><span class="number"> 15</span><span class="number"> 30</span>)</span> <span class="comment">; sum over the last 15 oscs</span></span></div><div class="line">                 <span class="list">(<span class="title"><span class="built_in">set!</span></span> sumr <span class="list">(<span class="title"><span class="built_in">+</span></span> sumr <span class="list">(<span class="list">(<span class="title">aref</span> osc_array i)</span></span></span></span></div><div class="line">                                     <span class="list">(<span class="title">aref</span> amp_array i)</span></div><div class="line">                                     <span class="list">(<span class="title">aref</span> freq_array i)</span>))))</div><div class="line">               <span class="list">(<span class="title"><span class="built_in">/</span></span> sumr<span class="number"> 15.0</span>)</span>))</div><div class="line">            <span class="list">(<span class="title">else</span><span class="number"> 0.0</span>)</span>)))) <span class="comment">; any remaining channels</span></div></pre></td></tr></table></figure></p>
<h3 id="读取音频文件">读取音频文件</h3>
<p>Extempore 的 <code>libsndfile</code> 库绑定提供了文件读写的支持。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">sys</span><span class="keyword">:load</span> <span class="string">"libs/external/sndfile.xtm"</span>)</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="keyword">:DSP</span> <span class="number">1000000000</span>  <span class="comment">;; allocate memory to store the audio file</span></span></div><div class="line">  <span class="list">(<span class="title">let</span> <span class="list">(<span class="list">(<span class="title">audiofile</span> <span class="list">(<span class="title">audiofile_c</span> <span class="string">"/Users/ben/Desktop/xtm-assets/peg.wav"</span> <span class="number">0</span> <span class="number">0</span>)</span>)</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time chan dat)</span></span></div><div class="line">      <span class="comment">;; get the output sample</span></div><div class="line">      <span class="list">(<span class="title">audiofile</span>)</span>)))</div><div class="line"><span class="list">(<span class="title">dsp</span><span class="keyword">:set!</span> dsp)</span></div></pre></td></tr></table></figure></p>
<p><code>audiofile_c</code> 接收三个参数：</p>
<ul>
<li>音频文件的名字</li>
<li>起始的文件读取偏移位置（0 表示文件开头）</li>
<li>要读取的采样数（0 表示整个文件）</li>
</ul>
<h3 id="使用采样器">使用采样器</h3>
<p>在 Extempore 中，采样器是一个存放了音频并可供触发和回放的乐器，它可以用来模拟乐器或其他事物的声音（例如，一个钢琴采样器存放了真实录制的钢琴声，利用这个采样器，MIDI 键盘可以触发这些声音来模拟真实钢琴的演奏）。因为采样器非常有用，所以 Extempore 专门提供了一个内置的采样器 libs/external/instruments_ext.xtm 。</p>
<p>我们可以将采样器想象成一堆“槽”，每个槽装着一个音频文件。</p>
<p><img src="/images/extempore-intro/slots.png" alt=""></p>
<p>每个槽用一个独一无二的序号区分。播放采样器通常就是指定某个序号的槽的音频以某个响度/频率和长度来播放。上图左侧的数字是每个音名对应的<a href="http://www.phys.unsw.edu.au/jw/notes.html" target="_blank" rel="external">MIDI音名数字</a>（middle C=60）。例如，如果你需要触发 middle C 的采样，只需使用 <code>play-note</code> 消息并带上音高参数 <code>60</code> 。</p>
<p>Extempore 的采样器并不要求装满——允许出现空槽。</p>
<p><img src="/images/extempore-intro/empty-slots.png" alt=""></p>
<p>在这种情况下，当采样器发现要采样的槽里为空时，会找到最近的非空槽，取出该音频，并线性调整它的音高，以播放出期望音高的声音。</p>
<h4 id="创建一个采样器">创建一个采样器</h4>
<p>使用 <code>define-sampler</code> 创建一个 Extempore 采样器。</p>
<p>下面将演示创建一个鼓的采样器。音频文件可以在<a href="https://archive.org/download/SalamanderDrumkit/salamanderDrumkit.tar.bz2" target="_blank" rel="external">这里</a>下载到。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">sys</span><span class="keyword">:load</span> <span class="string">"libs/external/instruments_ext.xtm"</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; define a sampler (called drums) using the default sampler note kernel and effects</span></div><div class="line"><span class="list">(<span class="title">define-sampler</span> drums sampler_note_hermite_c sampler_fx)</span></div><div class="line"></div><div class="line"><span class="comment">;; add the sampler to the dsp output callback</span></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="keyword">:DSP</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time chan dat)</span></span></div><div class="line">    <span class="list">(<span class="title">cond</span> <span class="list">(<span class="list">(<span class="title">&lt;</span> chan <span class="number">2</span>)</span></span></span></div><div class="line">           <span class="list">(<span class="title">drums</span> in time chan dat)</span>)</div><div class="line">          <span class="list">(<span class="title">else</span> <span class="number">0.0</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">dsp</span><span class="keyword">:set!</span> dsp)</span></div></pre></td></tr></table></figure></p>
<p>接下来把每个音频放进每个槽里：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">define</span> drum-path <span class="string">"/Users/ben/Music/sample-libs/drums/salamander/OH/"</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"kick_OH_F_9.wav"</span>)</span> <span class="variable">*gm-kick*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"snareStick_OH_F_9.wav"</span>)</span> <span class="variable">*gm-side-stick*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"snare_OH_FF_9.wav"</span>)</span> <span class="variable">*gm-snare*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"hihatClosed_OH_F_20.wav"</span>)</span> <span class="variable">*gm-closed-hi-hat*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"hihatFoot_OH_MP_12.wav"</span>)</span> <span class="variable">*gm-pedal-hi-hat*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"hihatOpen_OH_FF_6.wav"</span>)</span> <span class="variable">*gm-open-hi-hat*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"loTom_OH_FF_8.wav"</span>)</span> <span class="variable">*gm-low-floor-tom*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"hiTom_OH_FF_9.wav"</span>)</span> <span class="variable">*gm-hi-floor-tom*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"crash1_OH_FF_6.wav"</span>)</span> <span class="variable">*gm-crash*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"ride1_OH_FF_4.wav"</span>)</span> <span class="variable">*gm-ride*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"china1_OH_FF_8.wav"</span>)</span> <span class="variable">*gm-chinese*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"cowbell_FF_9.wav"</span>)</span> <span class="variable">*gm-cowbell*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"bellchime_F_3.wav"</span>)</span> <span class="variable">*gm-open-triangle*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div><div class="line"><span class="list">(<span class="title">set-sampler-index</span> drums <span class="list">(<span class="title">string-append</span> drum-path <span class="string">"ride1Bell_OH_F_6.wav"</span>)</span> <span class="variable">*gm-ride-bell*</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span></div></pre></td></tr></table></figure></p>
<p>完成后可以使用如下的方式演奏我们的鼓：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; evaluate these as you see fit!</span></div><div class="line"><span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> drums <span class="variable">*gm-kick*</span> <span class="number">80</span> <span class="number">44100</span>)</span></div><div class="line"><span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> drums <span class="variable">*gm-snare*</span> <span class="number">80</span> <span class="number">44100</span>)</span></div><div class="line"><span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> drums <span class="variable">*gm-closed-hi-hat*</span> <span class="number">80</span> <span class="number">44100</span>)</span></div></pre></td></tr></table></figure></p>
<p>如果采样的音频文件命名有一定的规律，可以使用 external/instruments.xtm 中提供的辅助宏 load-sampler 以更简洁的方式加载采样。具体见 <a href="http://benswift.me/2012/10/17/loading-and-using-a-sampler/" target="_blank" rel="external">这篇文章</a> 。</p>
<h3 id="演奏乐器">演奏乐器</h3>
<p>Extempore 自带了一些乐器，这些乐器在 libs/core/instruments.xtm 文件中定义。</p>
<h4 id="演奏单音">演奏单音</h4>
<p>下面的例子将载入自带乐器，命名为 synth ，并用它奏出随机音高的声音。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; load the instruments file </span></div><div class="line"><span class="list">(<span class="title">sys</span><span class="keyword">:load</span> <span class="string">"libs/core/instruments.xtm"</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; define a synth using the provided components</span></div><div class="line"><span class="comment">;; synth_note_c and synth_fx</span></div><div class="line"><span class="list">(<span class="title">define-instrument</span> synth synth_note_c synth_fx)</span></div><div class="line"></div><div class="line"><span class="comment">;; add the instrument to the DSP output sink closure</span></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="keyword">:DSP</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time chan dat)</span></span></div><div class="line">    <span class="list">(<span class="title">synth</span> in time chan dat)</span>))</div><div class="line"><span class="list">(<span class="title">dsp</span><span class="keyword">:set!</span> dsp)</span></div><div class="line"></div><div class="line"><span class="comment">;; play a note on our synth</span></div><div class="line"><span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> synth <span class="list">(<span class="title">random</span> <span class="number">60</span> <span class="number">80</span>)</span> <span class="number">80</span> <span class="list">(<span class="title">*</span> <span class="number">1.0</span> <span class="variable">*second*</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<h4 id="演奏和弦">演奏和弦</h4>
<p>除了弹奏一个单音，也可以通过编写相应函数弹奏一个和弦。例如一个 C 和弦：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">define</span> chord</span></div><div class="line">   <span class="list">(<span class="title">lambda</span> <span class="list">()</span></span></div><div class="line">      <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> synth <span class="number">60</span> <span class="number">80</span> <span class="variable">*second*</span>)</span></div><div class="line">      <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> synth <span class="number">64</span> <span class="number">80</span> <span class="variable">*second*</span>)</span></div><div class="line">      <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> synth <span class="number">67</span> <span class="number">80</span> <span class="variable">*second*</span>)</span>))</div><div class="line"></div><div class="line"><span class="comment">;; play chord</span></div><div class="line"><span class="list">(<span class="title">chord</span>)</span></div></pre></td></tr></table></figure></p>
<p>后面将介绍<a href="#%E9%80%92%E5%BD%92%E6%BC%94%E5%A5%8F%E9%9F%B3%E9%98%B6%E5%8F%8A%E5%92%8C%E5%BC%A6">使用递归形式演奏和弦</a>。</p>
<h4 id="演奏一组声音">演奏一组声音</h4>
<p>要让 Extempore 演奏一组声音从而形成完整的曲子，可以使用循环。下例演示了演奏 “Hello World” 的 ASCII 序号对应的音高：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">; hello world as a list of note pitches</span></div><div class="line"><span class="comment">; transposed down two octaves (24 semitones)</span></div><div class="line"><span class="list">(<span class="title">define</span> melody <span class="list">(<span class="title"><span class="built_in">map</span></span> <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">c</span>)</span></span></span></span></div><div class="line">                       <span class="list">(<span class="title"><span class="built_in">-</span></span> <span class="list">(<span class="title">char-&gt;integer</span> c)</span><span class="number"> 24</span>)</span>)</div><div class="line">                    <span class="list">(<span class="title">string-&gt;list</span> <span class="string">"Hello World!"</span>)</span>))</div><div class="line"></div><div class="line"><span class="comment">; Define a recursive function to cycle through the pitches in melody</span></div><div class="line"><span class="list">(<span class="title">define</span> loop</span></div><div class="line">   <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> pitch-list)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="title">null?</span> pitch-list)</span> <span class="list">(<span class="title">println</span> 'done)</span>)</span></span></div><div class="line">            <span class="list">(<span class="title">else</span> <span class="list">(<span class="title">play-note</span> time synth <span class="list">(<span class="title">car</span> pitch-list)</span><span class="number"> 80</span><span class="number"> 10000</span>)</span></span></div><div class="line">                  <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title"><span class="built_in">*</span></span> *second*<span class="number"> 0.5</span>)</span>)</span></span></div><div class="line">                        <span class="list">(<span class="title">cdr</span> pitch-list)</span>)))))</div><div class="line"></div><div class="line"><span class="comment">; start playing melody</span></div><div class="line"><span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="list">(<span class="title">now</span>)</span> melody)</span></div></pre></td></tr></table></figure></p>
<h4 id="递归演奏音阶及和弦">递归演奏音阶及和弦</h4>
<p>在 Scheme 中，使用递归形式可以更好地控制演奏流程。</p>
<p>演奏一组全音阶：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; recursive whole-tone scale</span></div><div class="line"><span class="list">(<span class="title"><span class="built_in">let</span></span> loop <span class="list">(<span class="list">(<span class="title">i</span><span class="number"> 0</span>)</span>)</span></span></div><div class="line">  <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="title">now</span>)</span> <span class="list">(<span class="title"><span class="built_in">*</span></span> i<span class="number"> 2500</span>)</span>)</span> synth <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 60</span> i)</span><span class="number"> 80</span><span class="number"> 4000</span>)</span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">&lt;</span></span> i<span class="number"> 9</span>)</span> <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="list">(<span class="title"><span class="built_in">+</span></span> i<span class="number"> 2</span>)</span>)</span>)</span>)</div></pre></td></tr></table></figure></p>
<p>演奏一组主音阶：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; recursive major scale</span></div><div class="line"><span class="list">(<span class="title"><span class="built_in">let</span></span> loop <span class="list">(<span class="list">(<span class="title">scale</span> '<span class="list">(<span class="title">0</span><span class="number"> 2</span><span class="number"> 4</span><span class="number"> 5</span><span class="number"> 7</span><span class="number"> 9</span><span class="number"> 11</span><span class="number"> 12</span>)</span>)</span></span></span></div><div class="line">           <span class="list">(<span class="title"><span class="built_in">time</span></span><span class="number"> 0</span>)</span>)</div><div class="line">  <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="title">now</span>)</span> time)</span> synth <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 60</span> <span class="list">(<span class="title">car</span> scale)</span>)</span><span class="number"> 80</span><span class="number"> 4000</span>)</span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">not</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> scale)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="list">(<span class="title">cdr</span> scale)</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 5000</span>)</span>)</span>))</div></pre></td></tr></table></figure></p>
<p>上例还带了一个时间参数 time， 因此可以进一步控制每个音高播放的时间长度：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; recursive major scale with rhythm</span></div><div class="line"><span class="list">(<span class="title"><span class="built_in">let</span></span> loop <span class="list">(<span class="list">(<span class="title">scale</span> '<span class="list">(<span class="title">0</span><span class="number"> 2</span><span class="number"> 4</span><span class="number"> 5</span><span class="number"> 7</span><span class="number"> 9</span><span class="number"> 11</span><span class="number"> 12</span>)</span>)</span></span></span></div><div class="line">           <span class="list">(<span class="title">dur</span> '<span class="list">(<span class="title">22050</span><span class="number"> 11025</span><span class="number"> 11025</span><span class="number"> 22050</span><span class="number"> 11025</span><span class="number"> 11025</span><span class="number"> 44100</span><span class="number"> 44100</span>)</span>)</span></div><div class="line">           <span class="list">(<span class="title"><span class="built_in">time</span></span><span class="number"> 0</span>)</span>)</div><div class="line">  <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="title">now</span>)</span> time)</span> synth <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 60</span> <span class="list">(<span class="title">car</span> scale)</span>)</span><span class="number"> 80</span> <span class="list">(<span class="title">car</span> dur)</span>)</span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">not</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> scale)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="list">(<span class="title">cdr</span> scale)</span> <span class="list">(<span class="title">cdr</span> dur)</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title">car</span> dur)</span>)</span>)</span>))</div></pre></td></tr></table></figure></p>
<p>演奏一个 C 和弦：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; recursive chord</span></div><div class="line"><span class="list">(<span class="title"><span class="built_in">let</span></span> loop <span class="list">(<span class="list">(<span class="title">chord</span> '<span class="list">(<span class="title">0</span><span class="number"> 4</span><span class="number"> 7</span>)</span>)</span>)</span></span></div><div class="line">  <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> synth <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 60</span> <span class="list">(<span class="title">car</span> chord)</span>)</span><span class="number"> 80</span><span class="number"> 44100</span>)</span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">not</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> chord)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="list">(<span class="title">cdr</span> chord)</span>)</span>))</div><div class="line"></div><div class="line"><span class="comment">;; we could also write this</span></div><div class="line"><span class="list">(<span class="title"><span class="built_in">let</span></span> loop <span class="list">(<span class="list">(<span class="title">scale</span> '<span class="list">(<span class="title">0</span><span class="number"> 4</span><span class="number"> 7</span>)</span>)</span>)</span></span></div><div class="line">  <span class="list">(<span class="title"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="title">null?</span> scale)</span> 'finished)</span></span></div><div class="line">        <span class="list">(<span class="title">else</span> <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">now</span>)</span> synth <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 60</span> <span class="list">(<span class="title">car</span> scale)</span>)</span><span class="number"> 80</span><span class="number"> 44100</span>)</span></span></div><div class="line">              <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="list">(<span class="title">cdr</span> scale)</span>)</span>)))</div></pre></td></tr></table></figure></p>
<p>分解和弦：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; for-each broken chord with volumes</span></div><div class="line"><span class="list">(<span class="title">for-each</span> <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">p</span> d v)</span></span></span></div><div class="line">            <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="title">now</span>)</span> d)</span> synth p v <span class="list">(<span class="title"><span class="built_in">-</span></span><span class="number"> 88200</span> d)</span>)</span>)</div><div class="line">          <span class="list">(<span class="title"><span class="built_in">list</span></span><span class="number"> 60</span><span class="number"> 64</span><span class="number"> 67</span>)</span></div><div class="line">          <span class="list">(<span class="title"><span class="built_in">list</span></span><span class="number"> 0</span><span class="number"> 22050</span><span class="number"> 44100</span>)</span></div><div class="line">          <span class="list">(<span class="title"><span class="built_in">list</span></span><span class="number"> 90</span><span class="number"> 50</span><span class="number"> 20</span>)</span>)</div></pre></td></tr></table></figure></p>
<p>这里用 <a href="http://www.scheme.com/tspl3/control.html#./control:h2" target="_blank" rel="external">for-each</a> 而不用 <a href="http://www.scheme.com/tspl3/start.html#./start:h2" target="_blank" rel="external">map</a> 遍历列表的原因是 map 每次会返回一个新的列表，而 for-each 不会返回新的列表，而只会触发副作用（例如发出声音）<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。</p>
<h4 id="使用-callback-递归演奏">使用 callback 递归演奏</h4>
<p>前面已经介绍了多种播放一组音高的方法。下面介绍使用 <code>callback</code> 函数来递归演奏一组音高。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; plays a sequence of pitches</span></div><div class="line"><span class="list">(<span class="title">define</span> play-seq</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> plst)</span></span></div><div class="line">    <span class="list">(<span class="title">play-note</span> time synth <span class="list">(<span class="title">car</span> plst)</span><span class="number"> 80</span><span class="number"> 11025</span>)</span></div><div class="line">    <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">not</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> plst)</span>)</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 10000</span>)</span> 'play-seq <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 11025</span>)</span> <span class="list">(<span class="title">cdr</span> plst)</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">60</span><span class="number"> 62</span><span class="number"> 63</span><span class="number"> 65</span><span class="number"> 67</span><span class="number"> 68</span><span class="number"> 71</span><span class="number"> 72</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<p>这个看起来和前面讲述的方法没什么不同，但它们确实存在一些细微的区别。为了进一步说明不同之处，我们修改一下 play-seq 函数，让它一直循环播放：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; loop over a sequence of pitches indefinitely</span></div><div class="line"><span class="list">(<span class="title">define</span> play-seq</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> plst)</span></span></div><div class="line">    <span class="list">(<span class="title">play-note</span> time synth <span class="list">(<span class="title">car</span> plst)</span><span class="number"> 80</span><span class="number"> 11025</span>)</span></div><div class="line">    <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> plst)</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 10000</span>)</span> 'play-seq <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 11025</span>)</span> '<span class="list">(<span class="title">60</span><span class="number"> 62</span><span class="number"> 65</span>)</span>)</span></div><div class="line">        <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 10000</span>)</span> 'play-seq <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 11025</span>)</span> <span class="list">(<span class="title">cdr</span> plst)</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">60</span><span class="number"> 62</span><span class="number"> 65</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<p>现在试着在播放的时候将 play-seq 函数里的 <code>(60 20 65)</code> 改为 <code>(60 20 67)</code> 并重新对 <code>play-seq</code> 求值，再改成 <code>(60 20 67 69)</code> 再求值。你会发现当一组音高播完后，将播放你最新修改的音高值列表。这是因为 play-seq 在 plst 会空时，会在 callback 中重新初始化该列表。</p>
<p>要停止播放这段音乐，可以将 play-seq 重新定义为一个空函数：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(define play-se<span class="string">q (lambda args)</span>)</div></pre></td></tr></table></figure></p>
<p>我们再扩展一下 play-seq，为它添加一个长度列表 rlst ：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; plays a sequence of pitches</span></div><div class="line"><span class="list">(<span class="title">define</span> play-seq</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> plst rlst)</span></span></div><div class="line">    <span class="list">(<span class="title">play-note</span> time synth <span class="list">(<span class="title">car</span> plst)</span><span class="number"> 80</span> <span class="list">(<span class="title">car</span> rlst)</span>)</span></div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title"><span class="built_in">*</span></span> .5 <span class="list">(<span class="title">car</span> rlst)</span>)</span>)</span> 'play-seq <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title">car</span> rlst)</span>)</span></span></div><div class="line">              <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> plst)</span>)</span></span></div><div class="line">                  '<span class="list">(<span class="title">60</span><span class="number"> 62</span><span class="number"> 65</span><span class="number"> 69</span><span class="number"> 67</span>)</span></div><div class="line">                  <span class="list">(<span class="title">cdr</span> plst)</span>)</div><div class="line">              <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> rlst)</span>)</span></span></div><div class="line">                  '<span class="list">(<span class="title">11025</span><span class="number"> 11025</span><span class="number"> 22050</span><span class="number"> 11025</span>)</span></div><div class="line">                  <span class="list">(<span class="title">cdr</span> rlst)</span>))))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">60</span><span class="number"> 62</span><span class="number"> 65</span><span class="number"> 69</span><span class="number"> 67</span>)</span> '<span class="list">(<span class="title">11025</span><span class="number"> 11025</span><span class="number"> 22050</span><span class="number"> 11025</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<p>注意到 rlst 和 plst 长度允许不同，两个列表是彼此独立的遍历和重新初始化的。</p>
<p>目前为止，演奏音乐的音量都是 80 ，我们可以修改一下程序，通过使用 <code>random</code> 加入随机因子，实现一个音高和音量不断变化的演奏：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; plays a random pentatonic sequence of notes with a metric pulse</span></div><div class="line"><span class="list">(<span class="title">define</span> play-seq</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> plst rlst)</span></span></div><div class="line">    <span class="list">(<span class="title">play-note</span> time synth <span class="list">(<span class="title">car</span> plst)</span></span></div><div class="line">               <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 60</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 50</span> <span class="list">(<span class="title">cos</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 0.03125</span><span class="number"> 3.141592</span> time)</span>)</span>)</span>)</span></div><div class="line">               <span class="list">(<span class="title"><span class="built_in">*</span></span> .65 <span class="list">(<span class="title">car</span> rlst)</span>)</span>)</div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title"><span class="built_in">*</span></span> .5 <span class="list">(<span class="title">car</span> rlst)</span>)</span>)</span> 'play-seq <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title">car</span> rlst)</span>)</span></span></div><div class="line">              <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> plst)</span>)</span></span></div><div class="line">                  <span class="list">(<span class="title">make-list-with-proc</span><span class="number"> 4</span> <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">i</span>)</span> <span class="list">(<span class="title">random</span> '<span class="list">(<span class="title">60</span><span class="number"> 62</span><span class="number"> 64</span><span class="number"> 67</span><span class="number"> 69</span>)</span>)</span>)</span>)</span></div><div class="line">                  <span class="list">(<span class="title">cdr</span> plst)</span>)</div><div class="line">              <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> rlst)</span>)</span></span></div><div class="line">                  <span class="list">(<span class="title">make-list</span><span class="number"> 4</span><span class="number"> 11025</span>)</span></div><div class="line">                  <span class="list">(<span class="title">cdr</span> rlst)</span>))))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">60</span><span class="number"> 62</span><span class="number"> 64</span><span class="number"> 67</span>)</span> '<span class="list">(<span class="title">11025</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<h3 id="节拍和长度">节拍和长度</h3>
<p>到目前为止，我们使用的是 Extempore 的标准计时方式 —— 采样/秒，来控制节拍和长度。更有用的方式是使用节拍和长度。</p>
<p>下面这个例子用到了<a href="#%E4%BD%BF%E7%94%A8%E9%87%87%E6%A0%B7%E5%99%A8">前面建立好的鼓乐器</a>。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; assuming you've set up and loaded the drums sampler as in</span></div><div class="line"><span class="comment">;; http://benswift.me/2012-10-17-loading-and-using-a-sampler.html</span></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="attribute">:DSP</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time chan dat)</span></span></div><div class="line">    <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="title">synth</span> in time chan dat)</span></span></div><div class="line">       <span class="list">(<span class="title">organ</span> in time chan dat)</span></div><div class="line">       <span class="list">(<span class="title">drums</span> in time chan dat)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">define</span> drum-loop</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> dur)</span></span></div><div class="line">    <span class="list">(<span class="title">play-note</span> time drums *gm-cowbell*<span class="number"> 80</span> dur)</span></div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title"><span class="built_in">*</span></span> .5 dur)</span>)</span> 'drum-loop <span class="list">(<span class="title"><span class="built_in">+</span></span> time dur)</span> <span class="list">(<span class="title">random</span> '<span class="list">(<span class="title">22050</span><span class="number"> 11025</span>)</span>)</span>)</span>))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">drum-loop</span> <span class="list">(<span class="title">now</span>)</span><span class="number"> 11025</span>)</span></div></pre></td></tr></table></figure></p>
<p>我们可以将上面这段程序用更抽象化描述的时间来描述：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; beat loop</span></div><div class="line"><span class="list">(<span class="title">define</span> drum-loop</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> dur)</span></span></div><div class="line">    <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">d</span> <span class="list">(<span class="title"><span class="built_in">*</span></span> dur *samplerate*)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">play-note</span> time drums *gm-cowbell*<span class="number"> 80</span> d)</span></div><div class="line">      <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title"><span class="built_in">*</span></span> .5 d)</span>)</span> 'drum-loop <span class="list">(<span class="title"><span class="built_in">+</span></span> time d)</span> <span class="list">(<span class="title">random</span> '<span class="list">(<span class="title">0.5</span><span class="number"> 0.25</span>)</span>)</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">drum-loop</span> <span class="list">(<span class="title">now</span>)</span><span class="number"> 0.25</span>)</span></div></pre></td></tr></table></figure></p>
<p>Extempore 默认的速率是 60 拍/秒（bpm） ，我们可以将上面的程序改成 120 bpm，并加上 1/3 拍。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; beat loop at 120bpm</span></div><div class="line"><span class="list">(<span class="title">define</span> drum-loop</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> dur)</span></span></div><div class="line">    <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">d</span> <span class="list">(<span class="title"><span class="built_in">*</span></span> dur .5 *samplerate*)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">play-note</span> time drums *gm-cowbell*<span class="number"> 80</span> d)</span></div><div class="line">      <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title"><span class="built_in">*</span></span> .5 d)</span>)</span> 'drum-loop <span class="list">(<span class="title"><span class="built_in">+</span></span> time d)</span></span></div><div class="line">                <span class="list">(<span class="title">random</span> <span class="list">(<span class="title"><span class="built_in">list</span></span> <span class="list">(<span class="title"><span class="built_in">/</span></span><span class="number"> 1</span><span class="number"> 3</span>)</span><span class="number"> 0.5</span><span class="number"> 0.25</span>)</span>)</span>))))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">drum-loop</span> <span class="list">(<span class="title">now</span>)</span><span class="number"> 0.25</span>)</span></div></pre></td></tr></table></figure></p>
<p>为了得到更明确的律动，runtime/scheme.xtm 提供了一个 <code>make-metro</code> 函数，该函数接受一个 tempo 参数，返回一个可以生成节拍样本的闭包。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; create a metronome starting at 120 bpm</span></div><div class="line"><span class="list">(<span class="title">define</span> <span class="variable">*metro*</span> <span class="list">(<span class="title">make-metro</span> <span class="number">120</span>)</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; beat loop</span></div><div class="line"><span class="list">(<span class="title">define</span> drum-loop</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">time</span> duration)</span></span></div><div class="line">    <span class="list">(<span class="title">println</span> time duration)</span></div><div class="line">    <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums <span class="variable">*gm-cowbell*</span> <span class="number">80</span> <span class="list">(<span class="title">*metro*</span> <span class="quoted">'dur</span> duration)</span>)</span></div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title">*metro*</span> <span class="list">(<span class="title">+</span> time <span class="list">(<span class="title">*</span> .<span class="number">5</span> duration)</span>)</span>)</span> <span class="quoted">'drum-loop</span> <span class="list">(<span class="title">+</span> time duration)</span></span></div><div class="line">              <span class="list">(<span class="title">random</span> <span class="list">(<span class="title">list</span> <span class="number">0.5</span>)</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">drum-loop</span> <span class="list">(<span class="title">*metro*</span> <span class="quoted">'get-beat</span>)</span> <span class="number">0.5</span>)</span></div></pre></td></tr></table></figure></p>
<p>从上面的例子我们可以发现：</p>
<ol>
<li>我们通过调用 <code>(*metro* 'get-beat)</code> 开始我们的循环。这个语句向 <em>metro</em> 闭包请求返回下一个可用的节拍数值（fmod beat 1.0）。<em>metro</em> 一经初始化，就开始算拍子了。</li>
<li>时间以拍子数为单位（而不再是采样数），并且是个累加值。你可以在 <em>extempore</em> 的输出窗口中看到任意时刻  time 的值。</li>
<li><code>(*metro* 'dur duration)</code> 返回一个采样与当前节拍的相对长度信息。</li>
</ol>
<p>我们可以加入一个振荡器，并使用 <code>set-tempo</code> 使得节奏发生变化：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; create a metronome starting at 120 bpm</span></div><div class="line"><span class="list">(<span class="title">define</span> <span class="variable">*metro*</span> <span class="list">(<span class="title">make-metro</span> <span class="number">120</span>)</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; beat loop with tempo shift</span></div><div class="line"><span class="list">(<span class="title">define</span> drum-loop</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">time</span> duration)</span></span></div><div class="line">    <span class="list">(<span class="title">*metro*</span> <span class="quoted">'set-tempo</span> <span class="list">(<span class="title">+</span> <span class="number">120</span> <span class="list">(<span class="title">*</span> <span class="number">40</span> <span class="list">(<span class="title">cos</span> <span class="list">(<span class="title">*</span> .<span class="number">25</span> <span class="number">3.141592</span> time)</span>)</span>)</span>)</span>)</span></div><div class="line">    <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums <span class="variable">*gm-cowbell*</span> <span class="number">80</span> <span class="list">(<span class="title">*metro*</span> <span class="quoted">'dur</span> duration)</span>)</span></div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title">*metro*</span> <span class="list">(<span class="title">+</span> time <span class="list">(<span class="title">*</span> .<span class="number">5</span> duration)</span>)</span>)</span> <span class="quoted">'drum-loop</span> <span class="list">(<span class="title">+</span> time duration)</span></span></div><div class="line">              <span class="list">(<span class="title">random</span> <span class="list">(<span class="title">list</span> <span class="number">0.5</span>)</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">drum-loop</span> <span class="list">(<span class="title">*metro*</span> <span class="quoted">'get-beat</span>)</span> <span class="number">0.5</span>)</span></div></pre></td></tr></table></figure></p>
<p>Extempore 还提供了另一个有用的律动函数 <code>make-metre</code> 。<code>make-metre</code> 同样返回一个闭包，该闭包根据一个简单的查询返回 <code>#t</code> 或 <code>#f</code>：给定一个累加的节拍数，是否当前处在某个律动上？</p>
<p><code>make-metre</code> 包含两个参数：第一个参数是一个数值列表，第二个参数是一个分母值。例如：</p>
<ul>
<li><code>(make-metre '(4) 1.0)</code> 提供以 4 分音符为一拍，每小节 4 拍（即 4/4 拍）；</li>
<li><code>(make-metre '(3) 0.5)</code> 提供以 8 分音符为一拍，每小节 3 拍（即 3/8 拍）；</li>
<li><code>(make-metre '(2 3) 0.5)</code> 提供以 8 分音符为一拍，每小节先 2 拍再 3 拍（即 2/8 拍，3/8 拍，2/8 拍，3/8 拍……）。</li>
</ul>
<p>先看看最简单的例子。以 2/8、3/8、2/8 拍的节奏演奏鼓的侧敲。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">define</span> <span class="variable">*metro*</span> <span class="list">(<span class="title">make-metro</span> <span class="number">90</span>)</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; a 2/8 3/8 2/8 cycle</span></div><div class="line"><span class="list">(<span class="title">define</span> <span class="variable">*metre*</span> <span class="list">(<span class="title">make-metre</span> <span class="quoted">'(<span class="number">2</span> <span class="number">3</span> <span class="number">2</span>)</span> <span class="number">0.5</span>)</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; play first beat of each 'bar'</span></div><div class="line"><span class="list">(<span class="title">define</span> metre-test</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">time</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">if</span> <span class="list">(<span class="title">*metre*</span> time <span class="number">1.0</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums <span class="variable">*gm-side-stick*</span> <span class="number">80</span> <span class="number">10000</span>)</span>)</div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title">*metro*</span> <span class="list">(<span class="title">+</span> time <span class="number">0.4</span>)</span>)</span> <span class="quoted">'metre-test</span> <span class="list">(<span class="title">+</span> time <span class="number">0.5</span>)</span>)</span>))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">metre-test</span> <span class="list">(<span class="title">*metro*</span> <span class="quoted">'get-beat</span> <span class="number">1.0</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<p>我们接下来使用两个律动器，两个律动分别演奏鼓的不同部分。</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; classic 2 against 3</span></div><div class="line"><span class="list">(<span class="title">define</span> <span class="variable">*metro*</span> <span class="list">(<span class="title">make-metro</span> <span class="number">180</span>)</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; 3/8</span></div><div class="line"><span class="list">(<span class="title">define</span> <span class="variable">*metre1*</span> <span class="list">(<span class="title">make-metre</span> <span class="quoted">'(<span class="number">3</span>)</span> .<span class="number">5</span>)</span>)</span></div><div class="line"><span class="comment">;; 2/8</span></div><div class="line"><span class="list">(<span class="title">define</span> <span class="variable">*metre2*</span> <span class="list">(<span class="title">make-metre</span> <span class="quoted">'(<span class="number">2</span>)</span> .<span class="number">5</span>)</span>)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">;; play first beat of each 'bar'</span></div><div class="line"><span class="list">(<span class="title">define</span> metre-test</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">time</span>)</span></span></div><div class="line">    <span class="list">(<span class="title">if</span> <span class="list">(<span class="title">*metre1*</span> time <span class="number">1.0</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums <span class="variable">*gm-side-stick*</span> <span class="number">80</span> <span class="number">10000</span>)</span>)</div><div class="line">    <span class="list">(<span class="title">if</span> <span class="list">(<span class="title">*metre2*</span> time <span class="number">1.0</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums <span class="variable">*gm-snare*</span> <span class="number">60</span> <span class="number">10000</span>)</span>)</div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title">*metro*</span> <span class="list">(<span class="title">+</span> time <span class="number">0.4</span>)</span>)</span> <span class="quoted">'metre-test</span> <span class="list">(<span class="title">+</span> time <span class="number">0.5</span>)</span>)</span>))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">metre-test</span> <span class="list">(<span class="title">*metro*</span> <span class="quoted">'get-beat</span> <span class="number">1.0</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<p>下面是一个更复杂（也更动听）的例子：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;; messiaen drum kit</span></div><div class="line"><span class="list">(<span class="title">define</span> *metro* <span class="list">(<span class="title">make-metro</span><span class="number"> 140</span>)</span>)</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">define</span> *metre1* <span class="list">(<span class="title">make-metre</span> '<span class="list">(<span class="title">2</span><span class="number"> 3</span><span class="number"> 4</span><span class="number"> 3</span><span class="number"> 2</span>)</span> .5)</span>)</span></div><div class="line"><span class="list">(<span class="title">define</span> *metre2* <span class="list">(<span class="title">make-metre</span> '<span class="list">(<span class="title">3</span><span class="number"> 5</span><span class="number"> 7</span><span class="number"> 5</span><span class="number"> 3</span>)</span> .5)</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; play first beat of each 'bar'</span></div><div class="line"><span class="list">(<span class="title">define</span> metre-test</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span>)</span></span></div><div class="line">    <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums</span></div><div class="line">               <span class="list">(<span class="title">random</span> <span class="list">(<span class="title"><span class="built_in">cons</span></span> .8 *gm-closed-hi-hat*)</span> <span class="list">(<span class="title"><span class="built_in">cons</span></span> .2 *gm-open-hi-hat*)</span>)</span></div><div class="line">               <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 40</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 20</span> <span class="list">(<span class="title">cos</span> <span class="list">(<span class="title"><span class="built_in">*</span></span><span class="number"> 2</span><span class="number"> 3.441592</span> time)</span>)</span>)</span>)</span></div><div class="line">               <span class="list">(<span class="title">random</span> <span class="list">(<span class="title"><span class="built_in">cons</span></span> .8<span class="number"> 500</span>)</span>  <span class="list">(<span class="title"><span class="built_in">cons</span></span> .2<span class="number"> 2000</span>)</span>)</span>)</div><div class="line">    <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title">*metre1*</span> time<span class="number"> 1.0</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">begin</span> <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums *gm-snare*<span class="number"> 80</span><span class="number"> 10000</span>)</span></span></div><div class="line">               <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums *gm-pedal-hi-hat*<span class="number"> 80</span><span class="number"> 100000</span>)</span>))</div><div class="line">    <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title">*metre2*</span> time<span class="number"> 1.0</span>)</span></span></div><div class="line">        <span class="list">(<span class="title">begin</span> <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums *gm-kick*<span class="number"> 80</span><span class="number"> 100000</span>)</span></span></div><div class="line">               <span class="list">(<span class="title">play-note</span> <span class="list">(<span class="title">*metro*</span> time)</span> drums *gm-ride-bell*<span class="number"> 100</span><span class="number"> 100000</span>)</span>))</div><div class="line">    <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title">*metro*</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 0.2</span>)</span>)</span> 'metre-test <span class="list">(<span class="title"><span class="built_in">+</span></span> time<span class="number"> 0.25</span>)</span>)</span>))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">metre-test</span> <span class="list">(<span class="title">*metro*</span> 'get-beat<span class="number"> 1.0</span>)</span>)</span></div></pre></td></tr></table></figure></p>
<h3 id="用-extempore-写的小苹果">用 Extempore 写的小苹果</h3>
<p>最后是我写的一段《小苹果》：</p>
<p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">sys</span><span class="attribute">:load</span> <span class="string">"libs/core/instruments.xtm"</span>)</span></div><div class="line"></div><div class="line"><span class="comment">;; define a synth using the provided components</span></div><div class="line"><span class="comment">;; synth_note_c and synth_fx</span></div><div class="line"><span class="list">(<span class="title">define-instrument</span> synth synth_note_c synth_fx)</span></div><div class="line"></div><div class="line"><span class="comment">;; add the instrument to the DSP output sink closure</span></div><div class="line"><span class="list">(<span class="title">bind-func</span> dsp<span class="attribute">:DSP</span></span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title">in</span> time chan dat)</span></span></div><div class="line">    <span class="list">(<span class="title">synth</span> in time chan dat)</span>))</div><div class="line"><span class="list">(<span class="title">dsp</span><span class="attribute">:set!</span> dsp)</span></div><div class="line"></div><div class="line"><span class="comment">;; Define a recursive function to cycle through the pitches in melody</span></div><div class="line"></div><div class="line"><span class="list">(<span class="title">define</span> play-seq</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">(<span class="title"><span class="built_in">time</span></span> plst rlst)</span></span></div><div class="line">    <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="title">d</span> <span class="list">(<span class="title"><span class="built_in">*</span></span> <span class="list">(<span class="title">car</span> rlst)</span> .5 *samplerate*)</span>)</span>)</span></span></div><div class="line">      <span class="list">(<span class="title">play-note</span> time synth <span class="list">(<span class="title"><span class="built_in">+</span></span><span class="number"> 60</span> <span class="list">(<span class="title">car</span> plst)</span>)</span><span class="number"> 80</span> d)</span></div><div class="line">      <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">and</span></span> <span class="list">(<span class="title"><span class="built_in">not</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> plst)</span>)</span>)</span> <span class="list">(<span class="title"><span class="built_in">not</span></span> <span class="list">(<span class="title">null?</span> <span class="list">(<span class="title">cdr</span> rlst)</span>)</span>)</span>)</span></span></div><div class="line">          <span class="list">(<span class="title">callback</span> <span class="list">(<span class="title"><span class="built_in">+</span></span> time <span class="list">(<span class="title"><span class="built_in">*</span></span> .5 d)</span>)</span> 'play-seq <span class="list">(<span class="title"><span class="built_in">+</span></span> time d)</span> <span class="list">(<span class="title">cdr</span> plst)</span> <span class="list">(<span class="title">cdr</span> rlst)</span>)</span>))))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">define</span> sing1</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span> <span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">16</span><span class="number"> 12</span><span class="number"> 14</span><span class="number"> 9</span><span class="number"> 16</span><span class="number"> 14</span><span class="number"> 12</span><span class="number"> 14</span><span class="number"> 9</span>)</span></span></span></div><div class="line">                       '<span class="list">(<span class="title">0.5</span><span class="number"> 0.5</span><span class="number"> 0.5</span><span class="number"> 0.5</span><span class="number"> 0.3</span><span class="number"> 0.3</span><span class="number"> 0.3</span><span class="number"> 0.3</span><span class="number"> 0.5</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">define</span> sing2</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span> <span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">16</span><span class="number"> 12</span><span class="number"> 14</span><span class="number"> 14</span><span class="number"> 19</span><span class="number"> 16</span><span class="number"> 11</span><span class="number"> 12</span>)</span></span></span></div><div class="line">                       '<span class="list">(<span class="title">0.5</span><span class="number"> 0.5</span><span class="number"> 0.5</span><span class="number"> 0.5</span><span class="number"> 0.3</span><span class="number"> 0.3</span><span class="number"> 0.5</span><span class="number"> 0.5</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">define</span> sing3</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span> <span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">12</span><span class="number"> 11</span><span class="number"> 9</span><span class="number"> 11</span><span class="number"> 12</span><span class="number"> 14</span><span class="number"> 7</span><span class="number"> 21</span><span class="number"> 19</span><span class="number"> 16</span><span class="number"> 16</span>)</span></span></span></div><div class="line">                       '<span class="list">(<span class="title">0.3</span><span class="number"> 0.3</span><span class="number"> 0.5</span><span class="number"> 0.3</span><span class="number"> 0.3</span><span class="number"> 0.4</span><span class="number"> 0.5</span><span class="number"> 0.3</span><span class="number"> 0.3</span><span class="number"> 0.5</span><span class="number"> 0.5</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">define</span> sing4</span></div><div class="line">  <span class="list">(<span class="title">lambda</span> <span class="list">()</span> <span class="list">(<span class="title">play-seq</span> <span class="list">(<span class="title">now</span>)</span> '<span class="list">(<span class="title">14</span><span class="number"> 12</span><span class="number"> 16</span><span class="number"> 14</span><span class="number"> 7</span><span class="number"> 9</span><span class="number"> 12</span><span class="number"> 9</span>)</span></span></span></div><div class="line">                       '<span class="list">(<span class="title">0.3</span><span class="number"> 0.5</span><span class="number"> 0.4</span><span class="number"> 0.5</span><span class="number"> 0.5</span><span class="number"> 0.5</span><span class="number"> 0.5</span><span class="number"> 0.5</span>)</span>)))</div><div class="line"></div><div class="line"><span class="list">(<span class="title">sing1</span>)</span></div><div class="line"><span class="list">(<span class="title">sing2</span>)</span></div><div class="line"><span class="list">(<span class="title">sing3</span>)</span></div><div class="line"><span class="list">(<span class="title">sing4</span>)</span></div></pre></td></tr></table></figure></p>
<p>如果有兴趣，可以观看演奏过程的视频：</p>
<iframe src="http://www.tudou.com/programs/view/html5embed.action?type=0&code=YYmUmVgovp8&lcode=&resourceId=14402399_06_05_99" allowtransparency="true" allowfullscreen="true" scrolling="no" border="0" frameborder="0" style="width:100%;height:400px;"></iframe>
<h2 id="深入阅读">深入阅读</h2>
<p>由于篇幅关系，本文并没有详细介绍 Scheme 和 xtlang 的语法细节，也略过了乐器的编写和音级（pitch classes）的使用。读完这篇文章后，感兴趣的读者可以继续阅读以下几篇文章：</p>
<ol>
<li><a href="http://benswift.me/extempore-docs/index.html" target="_blank" rel="external">Extempore 官方文档</a></li>
<li><a href="http://www.scheme.com/tspl3/" target="_blank" rel="external">Scheme 教程</a></li>
<li><a href="http://benswift.me/2012-09-28-making-an-instrument.html" target="_blank" rel="external">如何编写乐器</a></li>
<li><a href="http://benswift.me/2012/10/15/playing-an-instrument-part-ii/" target="_blank" rel="external">音级</a></li>
</ol>
<p>Extempore 自带的相关范例也是不错的学习资源：</p>
<ul>
<li>examples/core/audio_101.xtm</li>
<li>examples/core/polysynth.xtm</li>
<li>examples/core/fmsynth.xtm</li>
<li>examples/external/electrofunk.xtm</li>
<li>examples/external/audio_player.xtm</li>
<li>examples/external/convolution_reverb.xtm</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>对于 cyber-physical 这个词，我一直想不出更好的翻译。cyber 意为 “计算机的”，而 physical 则意为 “物理的，人体的”。从作者的设计意图上来看， physical 应该更接近“人体”的意思。而直接翻译成“人机编程”又显得很 low ：编程不就是人和计算机之间的交互吗？（我想这也是为什么作者不直接命名为 “man-machine”）最后我决定翻译为<q>机体编程</q>，有计算机和人体混合的含义。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>更多命名约定可参考 <a href="http://benswift.me/2012/10/15/xtlang-naming-conventions/" target="_blank" rel="external">xtlang naming conventions</a> 。 <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p>副作用在 Lisp 中不是一个贬义词，而是求值的附加效果。例如 Emacs Lisp 的副作用常常是对文本缓冲区的控制。 <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/Extempore/" term="Extempore"/>
    <category scheme="http://hahack.com/tags/xtlang/" term="xtlang"/>
    <category scheme="http://hahack.com/tags/Live-Coding/" term="Live Coding"/>
    <category scheme="http://hahack.com/tags/Scheme/" term="Scheme"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[SCNUThesis招募新的维护者]]></title>
    <link href="http://hahack.com/life/an-appeal-from-scnuthesis-author/"/>
    <id>http://hahack.com/life/an-appeal-from-scnuthesis-author/</id>
    <published>2015-01-22T15:42:03.000Z</published>
    <updated>2017-02-11T04:41:08.099Z</updated>
    <content type="html"><![CDATA[<h2 id="缘起">缘起</h2>
<p>工作大半年，开始感觉不如以前可以花很多时间在业余小项目上了。</p>
<p>读书的时候，虽然白天有很多课业上的压力，但到了晚上总有精力来做一些小东西。那个时候，熬夜的后果最多就是第二天到课室打下瞌睡。工作之后就完全不同了，白天的时候，需要一直聚精会神的工作，以保证每天的产出，到了晚上就感觉好累好累，不想再碰电脑。</p>
<p>这半年的时间，如果说我有进步的地方，就是学会了如何保养自己的身体。每天回家，我几乎都是先看半小时书，然后做一会儿简单的运动，再洗个澡，泡个脚，喝杯牛奶去睡觉。周末的时间，由于不放心外面的食物，我学会了下厨，于是周末两天我的大部分时间都是在一堆锅碗瓢盆中度过的。<a id="more"></a></p>
<p><img src="/images/an-appeal-from-scnuthesis-author/food.png" alt="做过的菜"></p>
<p>如果说退步的地方，那就是参与开源项目的热度了。现在每当我打开 Github ，看到我的贡献图，我就会感到非常惭愧：</p>
<p><img src="/images/an-appeal-from-scnuthesis-author/0-commit.jpg" alt="工作后几乎 0 commit"></p>
<p>你可以很明显地看出工作前和工作后我的贡献热度的区别。与此类似，也有热心的读者发现我的博客有半年没有更新了。</p>
<p>总之，上面的文字无非是在说，工作之后，我深感精力有限，无暇维护我需要长期维护的项目。其中， <a href="https://github.com/scnu/scnuthesis" target="_blank" rel="external">SCNUThesis</a> 就是我认为必须得转让的长期项目。</p>
<p><a href="https://github.com/scnu/scnuthesis" target="_blank" rel="external">SCNUThesis</a> 是一份非官方的，符合华南师范大学硕士/博士学位论文格式要求的 LaTeX 模板。</p>
<p>写这份模板的缘由要追述到研一的时候。当时出于好奇，我接触了 LaTeX 这个排版系统，一下子就被其 WYTIWYG 的观念深深吸引了。用它来排版论文是如此的方便，以至于我希望毕业的时候也能用它来排版毕业论文。不出意料，我的学校并没有提供这样的模板。虽然很失望，但<strong>与其等别人帮助，不如给别人帮助</strong>。于是，我花了一个月的时间，阅读了很多高校的 LaTeX 模板，最终吸取了几所高校的模板的优点，编写出了第一个版本的模板。我也开始学会使用 svn 做版本控制，并在 google code 上发布了第一个版本。后面这个项目又从 google code 迁移到了 Github 。</p>
<p>我的模板的第一个用户是王立斌老师的学生潘嘉昕师兄，他当时正赶着要写毕业论文。当时的 SCNUThesis 可以说还只是个半成品，但他对我的项目非常支持，并且愿意放弃使用 Office 而跑来当我的小白鼠。我们就一直保持着邮件联系，他一边使用模板，一边给我的模板提供了很多宝贵的改进建议。在他的帮助下，我的模板基本成型了，而他也顺利的用 SCNUThesis 完成了论文的排版。在他的论文的致谢中，他特意感谢了 SCNUThesis：</p>
<p><blockquote>

<p>感谢 XXX 师兄、XXX 师兄、XX、XX、XX、XXX 等同实验室师兄弟，与他们的讨论与交流促进了我的科研工作，也丰富了我的研究生生活。感谢潘伟洲同学提供的 LaTeX 排版模版 SCNUThesis。</p>


<footer><strong>潘嘉昕</strong></footer></blockquote>
</p>
<p>收到第一个用户的致谢，可想而知当时我的内心多么有成就感。**SCNUThesis 是我的第一份开源作品，而它实实在在地能够帮助到其他人！**在这之后，陆续也其他几位师兄师姐使用我的模板。到了我这一届的时候，因为我的推动，我们整个实验室的人几乎都用它来完成论文的排版，减轻了他们花在格式排版上的负担。而 SCNUThesis 也开始被广东工业大学、首都师范大学等其他高校的学生借鉴，衍生出了更多高校的毕业论文 LaTeX 模板，还被收录在知名 TeX 博客 <a href="http://www.latexstudio.net/south-china-normal-university-masters-doctorate-thesis-latex-template/" target="_blank" rel="external">LaTeXStudio</a> 中。</p>
<h2 id="呼吁">呼吁</h2>
<p>前话扯了一堆，现在摆出正题：<strong>我希望在这里招募到 SCNUThesis 新的维护者</strong>。</p>
<p>早在研三的时候，我就已经预料到了我早晚有一天要交出它，就像一个老父亲将自己的爱女交付给靠谱的女婿。当时我就在 Github 上建了一个 <a href="https://github.com/scnu" target="_blank" rel="external">scnu</a> 组织，目的就是等以后我无力再维护 SCNUThesis 的时候，将它转移给组织，让其他爱好者共同来维护它。</p>
<p>为了准备好这个交接，我已经将 SCNUThesis 正式转移给了 scnu 组织，将版本号正式定为 1.0 ，并且公布了自己的毕业论文论文源码以供他人参考。现在它需要的，就是一位（或者多位）愿意花时间维护它的人。</p>
<h3 id="为什么我要寻找新的维护者">为什么我要寻找新的维护者</h3>
<p>因为：</p>
<ol>
<li>我现在的工作中很少用到 LaTeX ，久了难免生疏；</li>
<li>我已经毕业离校，也不可能再使用它排版论文；</li>
<li>需要配合每年格式上的改动做些调整；</li>
<li>需要花时间帮助新手解决各种排版上的问题。</li>
</ol>
<h3 id="如何维护-scnuthesis-？">如何维护 SCNUThesis ？</h3>
<p>维护 SCNUThesis 主要有三种方式：</p>
<ol>
<li>成为代码贡献者；</li>
<li>成为项目维护者；</li>
<li>成为项目管理者。</li>
</ol>
<p>第一种方式很简单，你的责任也比较小。就是 fork 我的项目，然后当模板有问题需要维护的时候，对你的本地项目做好修改，然后向 scnu 发 pull request。当我和其他项目管理者会对你的代码进行 code review ，并考虑并入模板中。</p>
<p>一个合格的 pull request 应该是：</p>
<ol>
<li>不仅发送 pro 的分支，还发送 master 分支的 pull request。两个分支的 cls 和 pdf 文件必须一致；</li>
<li>有良好的 commit 说明。</li>
</ol>
<p>第二种方式则可以具备更多的权利。你可以先（邮件或在这里评论）告诉我你希望成为项目维护者。我将邀请你加入 scnu 组并赋予你维护者权限。你将可以直接修改 SCNUThesis 的代码，也可以审核和处理其他人的 pull request。</p>
<p>第三种方式则具备最高的权限，除了具备所有维护者的权利之外，你还可以添加其他维护者。增加这个角色是为了以后的传承。我希望这个项目能够一直有人在跟进、维护，并由一届维护者传承给下一届的维护者。项目管理者一般不轻易添加，只有贡献突出的维护者可以跟我申请管理者权限。</p>
<h3 id="成为维护者需要什么条件？">成为维护者需要什么条件？</h3>
<p>从上一个问题你可以看出，维护SCNUThesis对于能力上的要求并不高。如果真要有硬性条件，那就是：</p>
<ol>
<li>你必须是华南师范大学的在读学生，并且愿意在毕业时使用它。我相信一个产品只有作者也在使用时，这个产品才有活力。</li>
<li>你必须对 LaTeX 技术具有浓厚的兴趣，愿意稍微深入一点了解 LaTeX 的编写技巧，能够积极响应和解决用户提出的问题。</li>
<li>你必须具备独立解决问题的能力。遇到困难时，你要能沉住气解决它，而不是把问题抛给我。我很乐意在你遇到困难的时候给予帮助，但我只愿意回答聪明的问题。</li>
</ol>
<h3 id="为什么你应该参与-scnuthesis？">为什么你应该参与 SCNUThesis？</h3>
<p>原因有几个：</p>
<ol>
<li>参与开源。SCNUThesis 是我的第一个开源项目，而且它的难度不大。我在这个过程中，学习了 svn、git、Makefile 等方面的知识，并且懂得如何在 Github 上维护项目；</li>
<li>一份使命。开发这份模板时，我并没有从学校拿到一分钱经费，没有获得任何经济利益。但帮助其他同学顺利完成论文排版，免除他们使用word带来的负担，这是我的一份光荣的使命。我相信这也是你的一份使命；</li>
<li>证明自己。坦白说， SCNUThesis 并不能证明多少技术的能力。但从对项目的管理情况、对issue的follow程度、遇到问题的应对态度、对排版效果的考究程度等多个方面已经足以让我摸清一个维护者的技术、审美、耐性等方面的情况。如果我遇到一个出色的维护者，我会毫不犹豫的为他推荐就业机会。</li>
</ol>
<h2 id="后话">后话</h2>
<p>Paul Gramham 在《黑客与画家》中谈到了工作与兴趣的问题。他认为黑客可以和音乐家一样，白天可以拥有一分养家糊口的工作，然后在夜间经营一份自己喜欢的工作。对于音乐家而言，喜欢的工作就是演奏。对于黑客而言，喜欢的工作就是参与自己感兴趣的开源项目。</p>
<p><blockquote>

<p>I think the answer to this problem, in the case of software, is a concept known to nearly all makers: the day job. This phrase began with musicians, who perform at night. More generally, it means that you have one kind of work you do for money, and another for love.</p>
<p>Nearly all makers have day jobs early in their careers. Painters and writers notoriously do. If you’re lucky you can get a day job that’s closely related to your real work. Musicians often seem to work in record stores. A hacker working on some programming language or operating system might likewise be able to get a day job using it.</p>


<footer><strong>Paul Gramham</strong></footer></blockquote>
</p>
<p>也许，我现在的情况似乎越来越不像一个黑客。但如他第二段所说，如果运气好的话，黑客可以找到一份接近自己兴趣的白天工作。从这一点看，我或许是幸运的，因为我的白天工作就是我热爱的行业，这使我在其他时间更愿意去做其他我以前没有做过的事情。我希望，我可以在今后的时间更好的把握工作上的项目和开源项目的分配时间，在开源社区略尽自己的绵薄之力。</p>
]]></content>
    <category scheme="http://hahack.com/tags/SCNUThesis/" term="SCNUThesis"/>
    <category scheme="http://hahack.com/tags/LaTeX/" term="LaTeX"/>
    <category scheme="http://hahack.com/categories/life/" term="life"/>
  </entry>
</feed>
